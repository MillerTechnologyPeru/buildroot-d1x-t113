From b41a420b92de837d6eff945e9d9328f1a87d29f2 Mon Sep 17 00:00:00 2001
From: YuzukiTsuru <gloomyghost@gloomyghost.com>
Date: Fri, 25 Mar 2022 16:48:23 +0800
Subject: [PATCH 22/93] add xradio rtl driver support

---
 drivers/bluetooth/Kconfig        |   30 +
 drivers/bluetooth/Makefile       |    4 +
 drivers/bluetooth/bcm_btlpm.c    | 1012 ++++++++++++++++++++++++++++++
 drivers/bluetooth/btqca.c        |   92 ++-
 drivers/bluetooth/btqca.h        |   32 +-
 drivers/bluetooth/hci_qca.c      |   16 +-
 drivers/bluetooth/rtl_btlpm.c    |  639 +++++++++++++++++++
 drivers/bluetooth/xradio_btlpm.c |  895 ++++++++++++++++++++++++++
 8 files changed, 2677 insertions(+), 43 deletions(-)
 create mode 100644 drivers/bluetooth/bcm_btlpm.c
 create mode 100644 drivers/bluetooth/rtl_btlpm.c
 create mode 100644 drivers/bluetooth/xradio_btlpm.c

diff --git a/drivers/bluetooth/Kconfig b/drivers/bluetooth/Kconfig
index aae665a3a..e09ce4c5f 100644
--- a/drivers/bluetooth/Kconfig
+++ b/drivers/bluetooth/Kconfig
@@ -342,6 +342,36 @@ config BT_HCIVHCI
 	  Say Y here to compile support for virtual HCI devices into the
 	  kernel or say M to compile it as module (hci_vhci).
 
+config BCM_BT_LPM
+	tristate "Broadcom Bluetooth Low Power Manager Support"
+	help
+	  Bluetooth Low Power Manager Driver.
+	  This driver provides the dynamic active power saving mechanism for
+	  bluetooth radio devices special for android4.2.
+
+	  Say Y here to compile support for bt lmp support into the kernel
+	  or say M to compile it as module (btlmp).
+
+config RTL_BT_LPM
+	tristate "Realtek Bluesleep driver support"
+	help
+	  Bluetooth Bluesleep Driver.
+	  This driver provides the dynamic active power saving mechanism for
+	  bluetooth radio devices.
+
+	  Say Y here to compile support for bluesleep support into the kernel
+	  or say M to compile it as module (bluesleep).
+
+config XR_BT_LPM
+	tristate "Xradio Bluetooth sleep driver support"
+	help
+	  Bluetooth Bluetooth sleep Driver.
+	  This driver provides the dynamic active power saving mechanism for
+	  bluetooth radio devices.
+
+	  Say Y here to compile support for bluesleep support into the kernel
+	  or say M to compile it as module (bluesleep).
+
 config BT_MRVL
 	tristate "Marvell Bluetooth driver support"
 	help
diff --git a/drivers/bluetooth/Makefile b/drivers/bluetooth/Makefile
index 34887b9b3..daac1fd78 100644
--- a/drivers/bluetooth/Makefile
+++ b/drivers/bluetooth/Makefile
@@ -34,6 +34,10 @@ obj-$(CONFIG_BT_HCIRSI)		+= btrsi.o
 btmrvl-y			:= btmrvl_main.o
 btmrvl-$(CONFIG_DEBUG_FS)	+= btmrvl_debugfs.o
 
+obj-$(CONFIG_BCM_BT_LPM)    += bcm_btlpm.o
+obj-$(CONFIG_RTL_BT_LPM)    += rtl_btlpm.o
+obj-$(CONFIG_XR_BT_LPM)     += xradio_btlpm.o
+
 hci_uart-y				:= hci_ldisc.o
 hci_uart-$(CONFIG_BT_HCIUART_SERDEV)	+= hci_serdev.o
 hci_uart-$(CONFIG_BT_HCIUART_H4)	+= hci_h4.o
diff --git a/drivers/bluetooth/bcm_btlpm.c b/drivers/bluetooth/bcm_btlpm.c
new file mode 100644
index 000000000..b97794bd7
--- /dev/null
+++ b/drivers/bluetooth/bcm_btlpm.c
@@ -0,0 +1,1012 @@
+/*
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * for more details.
+ *
+ *
+ * Copyright (C) 2006-2007 - Motorola
+ * Copyright (c) 2008-2010, Code Aurora Forum. All rights reserved.
+ *
+ * Date         Author           Comment
+ * -----------  --------------   --------------------------------
+ * 2006-Apr-28  Motorola     The kernel module for running the Bluetooth(R)
+ *              Sleep-Mode Protocol from the Host side
+ * 2006-Sep-08  Motorola         Added workqueue for handling sleep work.
+ * 2007-Jan-24  Motorola         Added mbm_handle_ioi() call to ISR.
+ *
+ */
+
+#define DEBUG
+
+#include <linux/module.h>
+#include <linux/errno.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/notifier.h>
+#include <linux/proc_fs.h>
+#include <linux/spinlock.h>
+#include <linux/timer.h>
+#include <linux/uaccess.h>
+#include <linux/version.h>
+#include <linux/workqueue.h>
+#include <linux/platform_device.h>
+
+#include <linux/irq.h>
+#include <linux/param.h>
+#include <linux/bitops.h>
+#include <linux/termios.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+#include <linux/of_platform.h>
+#include <linux/pm_wakeirq.h>
+
+#include <net/bluetooth/bluetooth.h>
+#include <net/bluetooth/hci_core.h>
+#include <linux/serial_core.h>
+#include "hci_uart.h"
+
+/*
+ * #define BT_SLEEP_DBG
+ */
+#undef BT_DBG
+#undef BT_ERR
+#ifdef BT_SLEEP_DBG
+#define BT_DBG(fmt, arg...) pr_debug("[BT_LPM] %s: " fmt "\n",\
+				__func__, ## arg)
+#else
+#define BT_DBG(fmt, arg...)
+#endif
+#define BT_ERR(fmt, arg...) pr_err("[BT_LPM] %s: " fmt "\n",\
+				__func__, ## arg)
+
+/*
+ * Defines
+ */
+
+#define VERSION		"1.3.3"
+#define PROC_DIR	"bluetooth/sleep"
+
+#define DEFAULT_UART_INDEX   1
+#define BT_BLUEDROID_SUPPORT 1
+static int bluesleep_start(void);
+static void bluesleep_stop(void);
+
+struct bluesleep_info {
+	unsigned int wakeup_enable;
+	unsigned host_wake;
+	unsigned ext_wake;
+	unsigned host_wake_irq;
+	struct wakeup_source *ws;
+	struct uart_port *uport;
+	unsigned host_wake_assert:1;
+	unsigned ext_wake_assert:1;
+	struct platform_device *pdev;
+};
+
+/* work function */
+static void bluesleep_sleep_work(struct work_struct *work);
+static void bluesleep_tx_allow_sleep(void);
+
+/* work queue */
+DECLARE_DELAYED_WORK(sleep_workqueue, bluesleep_sleep_work);
+
+/* Macros for handling sleep work */
+#define bluesleep_rx_busy()     schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_tx_busy()     schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_rx_idle()     schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_tx_idle()     schedule_delayed_work(&sleep_workqueue, 0)
+
+/* 1 second timeout */
+#define RX_TIMER_INTERVAL  1
+
+/* state variable names and bit positions */
+#define BT_PROTO	0x01
+#define BT_TXDATA	0x02
+#define BT_ASLEEP	0x04
+#define BT_RXTIMER	0x20
+
+#if BT_BLUEDROID_SUPPORT
+static bool has_lpm_enabled;
+#else
+/* global pointer to a single hci device. */
+static struct hci_dev *bluesleep_hdev;
+#endif
+
+#if BT_BLUEDROID_SUPPORT
+static struct platform_device *bluesleep_uart_dev;
+#endif
+static struct bluesleep_info *bsi;
+
+/* module usage */
+static atomic_t open_count = ATOMIC_INIT(1);
+
+/*
+ * Local function prototypes
+ */
+
+#if !BT_BLUEDROID_SUPPORT
+static int bluesleep_hci_event(struct notifier_block *this,
+				unsigned long event, void *data);
+#endif
+
+/*
+ * Global variables
+ */
+
+/** Global state flags */
+static unsigned long flags;
+
+/** Tasklet to respond to change in hostwake line */
+static struct tasklet_struct hostwake_task;
+
+/** Reception timer */
+static void bluesleep_rx_timer_expire(struct timer_list *t);
+static struct timer_list rx_timer;
+
+/** Lock for state transitions */
+static spinlock_t rw_lock;
+
+#if !BT_BLUEDROID_SUPPORT
+/** Notifier block for HCI events */
+struct notifier_block hci_event_nblock = {
+	.notifier_call = bluesleep_hci_event,
+};
+#endif
+
+struct proc_dir_entry *bluetooth_dir, *sleep_dir;
+
+/*
+ * Local functions
+ */
+
+/*
+ * bt go to sleep will call this function tell uart stop data interactive
+ */
+static void hsuart_power(int on)
+{
+	if (bsi->uport != NULL) {
+		if (on)
+			bsi->uport->ops->set_mctrl(bsi->uport, TIOCM_RTS);
+		else
+			bsi->uport->ops->set_mctrl(bsi->uport, 0);
+	} else {
+		BT_ERR("bsi->uport = NULL, has_lpm_enabled = %d", has_lpm_enabled);
+	}
+}
+
+/**
+ * @return 1 if the Host can go to sleep, 0 otherwise.
+ */
+static inline int bluesleep_can_sleep(void)
+{
+	/* check if HOST_WAKE_BT_GPIO and BT_WAKE_HOST_GPIO
+	 * are both deasserted
+	 */
+	return (gpio_get_value(bsi->ext_wake) != bsi->ext_wake_assert) &&
+		(gpio_get_value(bsi->host_wake) != bsi->host_wake_assert) &&
+		(!test_bit(BT_RXTIMER, &flags)) && (bsi->uport != NULL);
+}
+
+/**
+ * @brief@  main sleep work handling function which update the flags
+ * and activate and deactivate UART ,check FIFO.
+ */
+static void bluesleep_sleep_work(struct work_struct *work)
+{
+	if (bluesleep_can_sleep()) {
+		/* already asleep, this is an error case */
+		if (test_bit(BT_ASLEEP, &flags)) {
+			BT_DBG("already asleep");
+			return;
+		}
+		if (bsi->uport->ops->tx_empty(bsi->uport)) {
+			BT_DBG("going to sleep...");
+			set_bit(BT_ASLEEP, &flags);
+			/*Deactivating UART */
+			hsuart_power(0);
+			__pm_wakeup_event(bsi->ws, HZ / 2);
+		} else {
+			BT_DBG("This should never happen.\n");
+			return;
+		}
+	} else if (test_bit(BT_ASLEEP, &flags)) {
+		__pm_stay_awake(bsi->ws);
+		clear_bit(BT_ASLEEP, &flags);
+
+		/* Add a timer to make sure that UART
+		 * would not be turned on&off very frequentently
+		 */
+		mod_timer(&rx_timer, jiffies + (RX_TIMER_INTERVAL * HZ));
+
+		set_bit(BT_RXTIMER, &flags);
+		hsuart_power(1);
+	} else {
+		BT_DBG("do nothing\n");
+	}
+}
+
+/**
+ * A tasklet function that runs in tasklet context and reads the value
+ * of the HOST_WAKE GPIO pin and further defer the work.
+ * @param data Not used.
+ */
+static void bluesleep_hostwake_task(unsigned long data)
+{
+	BT_DBG("hostwake line change");
+	spin_lock(&rw_lock);
+
+	if (gpio_get_value(bsi->host_wake) == bsi->host_wake_assert)
+		bluesleep_rx_busy();
+	else
+		bluesleep_rx_idle();
+
+	spin_unlock(&rw_lock);
+}
+
+/**
+ * Handles proper timer action when outgoing data is delivered to the
+ * HCI line discipline. Sets BT_TXDATA.
+ */
+static void bluesleep_outgoing_data(void)
+{
+	unsigned long irq_flags;
+	int power_on_uart = 0;
+
+	spin_lock_irqsave(&rw_lock, irq_flags);
+
+	/* if the tx side is sleeping... */
+	if (gpio_get_value(bsi->ext_wake) != bsi->ext_wake_assert) {
+		BT_DBG("tx was sleeping, wakeup it");
+		__pm_stay_awake(bsi->ws);
+		gpio_set_value(bsi->ext_wake, bsi->ext_wake_assert);
+		clear_bit(BT_ASLEEP, &flags);
+		power_on_uart = 1;
+	}
+
+	spin_unlock_irqrestore(&rw_lock, irq_flags);
+	if (power_on_uart == 1)
+		hsuart_power(1);
+}
+
+#if BT_BLUEDROID_SUPPORT
+static struct uart_port *bluesleep_get_uart_port(void)
+{
+	struct uart_port *uport = NULL;
+
+	if (bluesleep_uart_dev) {
+		uport = platform_get_drvdata(bluesleep_uart_dev);
+		if (uport)
+			BT_DBG(
+			"%s get uart_port from blusleep_uart_dev: %s, port irq: %d",
+			__func__, bluesleep_uart_dev->name, uport->irq);
+	}
+	return uport;
+}
+
+static int bluesleep_lpm_proc_show(struct seq_file *m, void *v)
+{
+	seq_printf(m, "lpm enable: %d\n", has_lpm_enabled);
+	return 0;
+}
+
+static int bluesleep_lpm_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, bluesleep_lpm_proc_show, NULL);
+}
+
+static ssize_t bluesleep_write_proc_lpm(struct file *file,
+				const char __user *buffer,
+				size_t count, loff_t *pos)
+{
+	char b;
+
+	if (count < 1)
+		return -EINVAL;
+
+	if (copy_from_user(&b, buffer, 1))
+		return -EFAULT;
+
+	if (b == '0') {
+		/* HCI_DEV_UNREG */
+		bluesleep_stop();
+		has_lpm_enabled = false;
+		bsi->uport = NULL;
+	} else {
+		/* HCI_DEV_REG */
+		if (!has_lpm_enabled) {
+			has_lpm_enabled = true;
+			if (bluesleep_uart_dev)
+				bsi->uport = bluesleep_get_uart_port();
+
+			/* if bluetooth started, start bluesleep*/
+			bluesleep_start();
+		}
+	}
+
+	return count;
+}
+
+static int bluesleep_btwrite_proc_show(struct seq_file *m, void *v)
+{
+	seq_puts(m, "it's not support\n");
+	return 0;
+}
+
+static int bluesleep_btwrite_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, bluesleep_btwrite_proc_show, NULL);
+}
+
+static ssize_t bluesleep_write_proc_btwrite(struct file *file,
+				const char __user *buffer,
+				size_t count, loff_t *pos)
+{
+	char b;
+
+	if (count < 1)
+		return -EINVAL;
+
+	if (copy_from_user(&b, buffer, 1))
+		return -EFAULT;
+
+	/* HCI_DEV_WRITE */
+	if (b != '0')
+		bluesleep_outgoing_data();
+	else
+		bluesleep_tx_allow_sleep();
+
+	return count;
+}
+
+static const struct file_operations lpm_fops = {
+	.owner		= THIS_MODULE,
+	.open		= bluesleep_lpm_proc_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+	.write		= bluesleep_write_proc_lpm,
+};
+static const struct file_operations btwrite_fops = {
+	.owner		= THIS_MODULE,
+	.open		= bluesleep_btwrite_proc_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+	.write		= bluesleep_write_proc_btwrite,
+};
+#else
+/**
+ * Handles HCI device events.
+ * @param this Not used.
+ * @param event The event that occurred.
+ * @param data The HCI device associated with the event.
+ * @return <code>NOTIFY_DONE</code>.
+ */
+static int bluesleep_hci_event(struct notifier_block *this,
+				unsigned long event, void *data)
+{
+	struct hci_dev *hdev = (struct hci_dev *) data;
+	struct hci_uart *hu;
+	struct uart_state *state;
+
+	if (!hdev)
+		return NOTIFY_DONE;
+
+	switch (event) {
+	case HCI_DEV_REG:
+		if (!bluesleep_hdev) {
+			bluesleep_hdev = hdev;
+			hu  = (struct hci_uart *) hdev->driver_data;
+			state = (struct uart_state *) hu->tty->driver_data;
+			bsi->uport = state->uart_port;
+		}
+		break;
+	case HCI_DEV_UNREG:
+		bluesleep_hdev = NULL;
+		bsi->uport = NULL;
+		break;
+	case HCI_DEV_WRITE:
+		bluesleep_outgoing_data();
+		break;
+	}
+
+	return NOTIFY_DONE;
+}
+#endif
+
+/**
+ * Function to check wheather bluetooth can sleep when btwrite was deasserted
+ * by bluedroid.
+ */
+static void bluesleep_tx_allow_sleep(void)
+{
+	unsigned long irq_flags;
+	BT_DBG("Tx has been idle\n");
+	spin_lock_irqsave(&rw_lock, irq_flags);
+	gpio_set_value(bsi->ext_wake, !bsi->ext_wake_assert);
+	bluesleep_tx_idle();
+	spin_unlock_irqrestore(&rw_lock, irq_flags);
+}
+
+
+/* Handles reception timer expiration.
+ * Clear BT_RXTIMER.
+ * @param data Not used.
+ */
+static void bluesleep_rx_timer_expire(struct timer_list *t)
+{
+	BT_DBG("bluesleep_rx_timer_expire");
+	clear_bit(BT_RXTIMER, &flags);
+	bluesleep_rx_idle();
+}
+
+/**
+ * Schedules a tasklet to run when receiving an interrupt on the
+ * <code>HOST_WAKE</code> GPIO pin.
+ * @param irq Not used.
+ * @param dev_id Not used.
+ */
+static irqreturn_t bluesleep_hostwake_isr(int irq, void *dev_id)
+{
+	/* schedule a tasklet to handle the change in the host wake line */
+	tasklet_schedule(&hostwake_task);
+	return IRQ_HANDLED;
+}
+
+/**
+ * Starts the Sleep-Mode Protocol on the Host.
+ * @return On success, 0. On error, -1, and <code>errno</code> is set
+ * appropriately.
+ */
+static int bluesleep_start(void)
+{
+	int retval;
+	unsigned long irq_flags;
+
+	spin_lock_irqsave(&rw_lock, irq_flags);
+
+	if (test_bit(BT_PROTO, &flags)) {
+		spin_unlock_irqrestore(&rw_lock, irq_flags);
+		return 0;
+	}
+
+	spin_unlock_irqrestore(&rw_lock, irq_flags);
+
+	if (!atomic_dec_and_test(&open_count)) {
+		atomic_inc(&open_count);
+		return -EBUSY;
+	}
+
+	/* start the timer */
+	mod_timer(&rx_timer, jiffies + (RX_TIMER_INTERVAL*HZ));
+
+	/* assert BT_WAKE */
+	gpio_set_value(bsi->ext_wake, bsi->ext_wake_assert);
+	retval = request_irq(bsi->host_wake_irq, bluesleep_hostwake_isr,
+				IRQF_TRIGGER_FALLING | IRQF_TRIGGER_RISING,
+				"bluetooth hostwake", &bsi->pdev->dev);
+	if (retval  < 0) {
+		BT_ERR("Couldn't acquire BT_HOST_WAKE IRQ");
+		goto fail;
+	}
+
+	set_bit(BT_PROTO, &flags);
+	__pm_stay_awake(bsi->ws);
+
+	return 0;
+fail:
+	del_timer(&rx_timer);
+	atomic_inc(&open_count);
+
+	return retval;
+}
+
+/**
+ * Stops the Sleep-Mode Protocol on the Host.
+ */
+static void bluesleep_stop(void)
+{
+	unsigned long irq_flags;
+
+	spin_lock_irqsave(&rw_lock, irq_flags);
+
+	if (!test_bit(BT_PROTO, &flags)) {
+		spin_unlock_irqrestore(&rw_lock, irq_flags);
+		return;
+	}
+
+	/* assert BT_WAKE */
+	gpio_set_value(bsi->ext_wake, bsi->ext_wake_assert);
+
+	del_timer(&rx_timer);
+	clear_bit(BT_PROTO, &flags);
+
+	if (test_bit(BT_ASLEEP, &flags)) {
+		clear_bit(BT_ASLEEP, &flags);
+		hsuart_power(1);
+	}
+
+	atomic_inc(&open_count);
+
+	spin_unlock_irqrestore(&rw_lock, irq_flags);
+	free_irq(bsi->host_wake_irq, &bsi->pdev->dev);
+	__pm_wakeup_event(bsi->ws, HZ / 2);
+}
+#if 0
+/**
+ * Read the <code>BT_WAKE</code> GPIO pin value via the proc interface.
+ * When this function returns, <code>page</code> will contain a 1 if the
+ * pin is high, 0 otherwise.
+ * @param page Buffer for writing data.
+ * @param start Not used.
+ * @param offset Not used.
+ * @param count Not used.
+ * @param eof Whether or not there is more data to be read.
+ * @param data Not used.
+ * @return The number of bytes written.
+ */
+static int bluepower_read_proc_btwake(char *page, char **start, off_t offset,
+					int count, int *eof, void *data)
+{
+	*eof = 1;
+	return sprintf(page, "btwake:%u\n",
+		(gpio_get_value(bsi->ext_wake) == bsi->ext_wake_assert));
+}
+
+/**
+ * Write the <code>BT_WAKE</code> GPIO pin value via the proc interface.
+ * @param file Not used.
+ * @param buffer The buffer to read from.
+ * @param count The number of bytes to be written.
+ * @param data Not used.
+ * @return On success, the number of bytes written. On error, -1, and
+ * <code>errno</code> is set appropriately.
+ */
+static int bluepower_write_proc_btwake(struct file *file, const char *buffer,
+					unsigned long count, void *data)
+{
+	char *buf;
+
+	if (count < 1)
+		return -EINVAL;
+
+	buf = kmalloc(count, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	if (copy_from_user(buf, buffer, count)) {
+		kfree(buf);
+		return -EFAULT;
+	}
+
+	if (buf[0] == '0') {
+		gpio_set_value(bsi->ext_wake, !bsi->ext_wake_assert);
+	} else if (buf[0] == '1') {
+		gpio_set_value(bsi->ext_wake, bsi->ext_wake_assert);
+	} else {
+		kfree(buf);
+		return -EINVAL;
+	}
+
+	kfree(buf);
+	return count;
+}
+
+/**
+ * Read the <code>BT_HOST_WAKE</code> GPIO pin value via the proc interface.
+ * When this function returns, <code>page</code> will contain a 1 if the pin
+ * is high, 0 otherwise.
+ * @param page Buffer for writing data.
+ * @param start Not used.
+ * @param offset Not used.
+ * @param count Not used.
+ * @param eof Whether or not there is more data to be read.
+ * @param data Not used.
+ * @return The number of bytes written.
+ */
+static int bluepower_read_proc_hostwake(char *page, char **start, off_t offset,
+					int count, int *eof, void *data)
+{
+	*eof = 1;
+	return sprintf(page, "hostwake: %u\n",
+		(gpio_get_value(bsi->host_wake) == bsi->host_wake_assert));
+}
+
+
+/**
+ * Read the low-power status of the Host via the proc interface.
+ * When this function returns, <code>page</code> contains a 1 if the Host
+ * is asleep, 0 otherwise.
+ * @param page Buffer for writing data.
+ * @param start Not used.
+ * @param offset Not used.
+ * @param count Not used.
+ * @param eof Whether or not there is more data to be read.
+ * @param data Not used.
+ * @return The number of bytes written.
+ */
+static int bluesleep_read_proc_asleep(char *page, char **start, off_t offset,
+					int count, int *eof, void *data)
+{
+	unsigned int asleep;
+
+	asleep = test_bit(BT_ASLEEP, &flags) ? 1 : 0;
+	*eof = 1;
+	return sprintf(page, "asleep: %u\n", asleep);
+}
+
+/**
+ * Read the low-power protocol being used by the Host via the proc interface.
+ * When this function returns, <code>page</code> will contain a 1 if the Host
+ * is using the Sleep Mode Protocol, 0 otherwise.
+ * @param page Buffer for writing data.
+ * @param start Not used.
+ * @param offset Not used.
+ * @param count Not used.
+ * @param eof Whether or not there is more data to be read.
+ * @param data Not used.
+ * @return The number of bytes written.
+ */
+static int bluesleep_read_proc_proto(char *page, char **start, off_t offset,
+					int count, int *eof, void *data)
+{
+	unsigned int proto;
+
+	proto = test_bit(BT_PROTO, &flags) ? 1 : 0;
+	*eof = 1;
+	return sprintf(page, "proto: %u\n", proto);
+}
+
+/**
+ * Modify the low-power protocol used by the Host via the proc interface.
+ * @param file Not used.
+ * @param buffer The buffer to read from.
+ * @param count The number of bytes to be written.
+ * @param data Not used.
+ * @return On success, the number of bytes written. On error, -1, and
+ * <code>errno</code> is set appropriately.
+ */
+static int bluesleep_write_proc_proto(struct file *file, const char *buffer,
+					unsigned long count, void *data)
+{
+	char proto;
+
+	if (count < 1)
+		return -EINVAL;
+
+	if (copy_from_user(&proto, buffer, 1))
+		return -EFAULT;
+
+	if (proto == '0')
+		bluesleep_stop();
+	else
+		bluesleep_start();
+
+	/* claim that we wrote everything */
+	return count;
+}
+#endif
+
+static int assert_level = -1;
+module_param(assert_level, int, S_IRUGO);
+MODULE_PARM_DESC(assert_level, "BT_LPM hostwake/btwake assert level");
+
+static struct platform_device *sw_uart_get_pdev(int id)
+{
+	struct device_node *np;
+	char match[20];
+	sprintf(match, "uart%d", id);
+	np = of_find_node_by_type(NULL, match);
+	return of_find_device_by_node(np);
+}
+
+static int __init bluesleep_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct device *dev = &pdev->dev;
+	enum of_gpio_flags config;
+	int ret, uart_index;
+	u32 val;
+
+	bsi = devm_kzalloc(&pdev->dev, sizeof(struct bluesleep_info),
+			GFP_KERNEL);
+	if (!bsi)
+		return -ENOMEM;
+
+	bsi->host_wake = of_get_named_gpio_flags(np, "bt_hostwake", 0, &config);
+	if (!gpio_is_valid(bsi->host_wake)) {
+		BT_ERR("get gpio bt_hostwake failed\n");
+		return -EINVAL;
+	}
+
+	/* set host_wake_assert */
+	bsi->host_wake_assert = (config == OF_GPIO_ACTIVE_LOW) ? 0 : 1;
+	BT_DBG("bt_hostwake gpio=%d assert=%d\n", bsi->host_wake, bsi->host_wake_assert);
+
+	if (assert_level != -1) {
+		bsi->host_wake_assert = (assert_level & 0x02) > 0;
+		BT_DBG("override host_wake assert to %d", bsi->host_wake_assert);
+	}
+
+	ret = devm_gpio_request(dev, bsi->host_wake, "bt_hostwake");
+	if (ret < 0) {
+		BT_ERR("can't request bt_hostwake gpio %d\n",
+			bsi->host_wake);
+		return ret;
+	}
+	ret = gpio_direction_input(bsi->host_wake);
+	if (ret < 0) {
+		BT_ERR("can't request input direction bt_wake gpio %d\n",
+			bsi->host_wake);
+		return ret;
+	}
+
+	if (!of_property_read_bool(np, "wakeup-source")) {
+		BT_DBG("wakeup source is disabled!\n");
+	} else {
+		ret = device_init_wakeup(dev, true);
+		if (ret < 0) {
+			BT_ERR("device init wakeup failed!\n");
+			return ret;
+		}
+		ret = dev_pm_set_wake_irq(dev, gpio_to_irq(bsi->host_wake));
+		if (ret < 0) {
+			BT_ERR("can't enable wakeup src for bt_hostwake %d\n",
+				bsi->host_wake);
+			return ret;
+		}
+		bsi->wakeup_enable = 1;
+	}
+
+	bsi->ext_wake = of_get_named_gpio_flags(np, "bt_wake", 0, &config);
+	if (!gpio_is_valid(bsi->ext_wake)) {
+		BT_ERR("get gpio bt_wake failed\n");
+		return -EINVAL;
+	}
+
+	ret = devm_gpio_request(dev, bsi->ext_wake, "bt_wake");
+	if (ret < 0) {
+		BT_ERR("can't request bt_wake gpio %d\n",
+			bsi->ext_wake);
+		return ret;
+	}
+
+	/* set ext_wake_assert */
+	bsi->ext_wake_assert = (config == OF_GPIO_ACTIVE_LOW) ? 0 : 1;
+	BT_DBG("bt_wake gpio=%d assert=%d\n", bsi->ext_wake, bsi->ext_wake_assert);
+
+	if (assert_level != -1) {
+		bsi->ext_wake_assert = (assert_level & 0x01) > 0;
+		BT_DBG("override ext_wake assert to %d", bsi->ext_wake_assert);
+	}
+
+	/* 1.set bt_wake as output and the level is assert, assert bt wake */
+	ret = gpio_direction_output(bsi->ext_wake, bsi->ext_wake_assert);
+	if (ret < 0) {
+		BT_ERR("can't request output direction bt_wake gpio %d\n",
+			bsi->ext_wake);
+		return ret;
+	}
+
+	/* 2.get bt_host_wake gpio irq */
+	bsi->host_wake_irq = gpio_to_irq(bsi->host_wake);
+	if (bsi->host_wake_irq < 0) {
+		BT_ERR("map gpio [%d] to virq failed, errno = %d\n",
+				bsi->host_wake, bsi->host_wake_irq);
+		ret = -ENODEV;
+		return ret;
+	}
+
+	uart_index = DEFAULT_UART_INDEX;
+	if (!of_property_read_u32(np, "uart_index", &val)) {
+		switch (val) {
+		case 0:
+		case 1:
+		case 2:
+			uart_index = val;
+			break;
+		default:
+			BT_ERR("unsupported uart_index (%u)\n", val);
+		}
+	}
+	BT_DBG("uart_index (%u)\n", uart_index);
+	bluesleep_uart_dev = sw_uart_get_pdev(uart_index);
+
+	bsi->ws = wakeup_source_register(dev, "bluesleep");
+	bsi->pdev = pdev;
+	return 0;
+}
+
+static int bluesleep_remove(struct platform_device *pdev)
+{
+	/* assert bt wake */
+	gpio_set_value(bsi->ext_wake, bsi->ext_wake_assert);
+	if (test_bit(BT_PROTO, &flags)) {
+		if (disable_irq_wake(bsi->host_wake_irq))
+			BT_ERR("Couldn't disable hostwake IRQ wakeup mode\n");
+		free_irq(bsi->host_wake_irq, &bsi->pdev->dev);
+		del_timer(&rx_timer);
+		if (test_bit(BT_ASLEEP, &flags))
+			hsuart_power(1);
+	}
+
+	wakeup_source_unregister(bsi->ws);
+	if (bsi->wakeup_enable) {
+		BT_DBG("Deinit wakeup source");
+		device_init_wakeup(&pdev->dev, false);
+		dev_pm_clear_wake_irq(&pdev->dev);
+	}
+
+	return 0;
+}
+
+static const struct of_device_id sunxi_btlpm_ids[] = {
+	{ .compatible = "allwinner,sunxi-btlpm" },
+	{ /* Sentinel */ }
+};
+
+static struct platform_driver bluesleep_driver = {
+	.remove	= bluesleep_remove,
+	.driver	= {
+		.owner	= THIS_MODULE,
+		.name	= "sunxi-btlpm",
+		.of_match_table	= sunxi_btlpm_ids,
+	},
+};
+
+/**
+ * Initializes the module.
+ * @return On success, 0. On error, -1, and <code>errno</code> is set
+ * appropriately.
+ */
+static int __init bluesleep_init(void)
+{
+	int retval;
+	struct proc_dir_entry *ent;
+
+	BT_DBG("BlueSleep Mode Driver Ver %s", VERSION);
+
+	retval = platform_driver_probe(&bluesleep_driver, bluesleep_probe);
+	if (retval)
+		return retval;
+
+#if !BT_BLUEDROID_SUPPORT
+	bluesleep_hdev = NULL;
+#endif
+
+	bluetooth_dir = proc_mkdir("bluetooth", NULL);
+	if (bluetooth_dir == NULL) {
+		BT_ERR("Unable to create /proc/bluetooth directory");
+		return -ENOMEM;
+	}
+
+	sleep_dir = proc_mkdir("sleep", bluetooth_dir);
+	if (sleep_dir == NULL) {
+		BT_ERR("Unable to create /proc/%s directory", PROC_DIR);
+		return -ENOMEM;
+	}
+#if 0
+	/* Creating read/write "btwake" entry */
+	ent = create_proc_entry("btwake", 0, sleep_dir);
+	if (ent == NULL) {
+		BT_ERR("Unable to create /proc/%s/btwake entry", PROC_DIR);
+		retval = -ENOMEM;
+		goto fail;
+	}
+	ent->read_proc = bluepower_read_proc_btwake;
+	ent->write_proc = bluepower_write_proc_btwake;
+
+	/* read only proc entries */
+	if (create_proc_read_entry("hostwake", 0, sleep_dir,
+				bluepower_read_proc_hostwake, NULL) == NULL) {
+		BT_ERR("Unable to create /proc/%s/hostwake entry", PROC_DIR);
+		retval = -ENOMEM;
+		goto fail;
+	}
+
+	/* read/write proc entries */
+	ent = create_proc_entry("proto", 0666, sleep_dir);
+	if (ent == NULL) {
+		BT_ERR("Unable to create /proc/%s/proto entry", PROC_DIR);
+		retval = -ENOMEM;
+		goto fail;
+	}
+	ent->read_proc = bluesleep_read_proc_proto;
+	ent->write_proc = bluesleep_write_proc_proto;
+
+	/* read only proc entries */
+	if (create_proc_read_entry("asleep", 0,
+			sleep_dir, bluesleep_read_proc_asleep, NULL) == NULL) {
+		BT_ERR("Unable to create /proc/%s/asleep entry", PROC_DIR);
+		retval = -ENOMEM;
+		goto fail;
+	}
+#endif
+#if BT_BLUEDROID_SUPPORT
+	/* read/write proc entries */
+	ent = proc_create("lpm", 0660, sleep_dir, &lpm_fops);
+	if (ent == NULL) {
+		BT_ERR("Unable to create /proc/%s/lpm entry", PROC_DIR);
+		retval = -ENOMEM;
+		goto fail;
+	}
+
+	ent = proc_create("btwrite", 0660, sleep_dir, &btwrite_fops);
+	if (ent == NULL) {
+		BT_ERR("Unable to create /proc/%s/btwrite entry", PROC_DIR);
+		retval = -ENOMEM;
+		goto fail;
+	}
+#endif
+
+	flags = 0; /* clear all status bits */
+
+	/* Initialize spinlock. */
+	spin_lock_init(&rw_lock);
+
+	/* Initialize timer */
+	timer_setup(&rx_timer, bluesleep_rx_timer_expire, 0);
+
+	/* initialize host wake tasklet */
+	tasklet_init(&hostwake_task, bluesleep_hostwake_task, 0);
+
+#if !BT_BLUEDROID_SUPPORT
+	hci_register_notifier(&hci_event_nblock);
+#endif
+
+	return 0;
+
+fail:
+#if BT_BLUEDROID_SUPPORT
+	remove_proc_entry("btwrite", sleep_dir);
+	remove_proc_entry("lpm", sleep_dir);
+#endif
+#if 0
+	remove_proc_entry("asleep", sleep_dir);
+	remove_proc_entry("proto", sleep_dir);
+	remove_proc_entry("hostwake", sleep_dir);
+	remove_proc_entry("btwake", sleep_dir);
+#endif
+	remove_proc_entry("sleep", bluetooth_dir);
+	remove_proc_entry("bluetooth", 0);
+	return retval;
+}
+
+/**
+ * Cleans up the module.
+ */
+static void __exit bluesleep_exit(void)
+{
+#if !BT_BLUEDROID_SUPPORT
+	hci_unregister_notifier(&hci_event_nblock);
+#endif
+	platform_driver_unregister(&bluesleep_driver);
+
+#if BT_BLUEDROID_SUPPORT
+	remove_proc_entry("btwrite", sleep_dir);
+	remove_proc_entry("lpm", sleep_dir);
+#endif
+#if 0
+	remove_proc_entry("asleep", sleep_dir);
+	remove_proc_entry("proto", sleep_dir);
+	remove_proc_entry("hostwake", sleep_dir);
+	remove_proc_entry("btwake", sleep_dir);
+#endif
+	remove_proc_entry("sleep", bluetooth_dir);
+	remove_proc_entry("bluetooth", 0);
+}
+
+module_init(bluesleep_init);
+module_exit(bluesleep_exit);
+
+MODULE_DESCRIPTION("Bluetooth Sleep Mode Driver ver %s " VERSION);
+#ifdef MODULE_LICENSE
+MODULE_LICENSE("GPL");
+#endif
diff --git a/drivers/bluetooth/btqca.c b/drivers/bluetooth/btqca.c
index 8cc21ad7c..ec69e5dd7 100644
--- a/drivers/bluetooth/btqca.c
+++ b/drivers/bluetooth/btqca.c
@@ -14,19 +14,33 @@
 
 #define VERSION "0.1"
 
-int qca_read_soc_version(struct hci_dev *hdev, u32 *soc_version)
+int qca_read_soc_version(struct hci_dev *hdev, u32 *soc_version,
+			 enum qca_btsoc_type soc_type)
 {
 	struct sk_buff *skb;
 	struct edl_event_hdr *edl;
-	struct rome_version *ver;
+	struct qca_btsoc_version *ver;
 	char cmd;
 	int err = 0;
+	u8 event_type = HCI_EV_VENDOR;
+	u8 rlen = sizeof(*edl) + sizeof(*ver);
+	u8 rtype = EDL_APP_VER_RES_EVT;
 
 	bt_dev_dbg(hdev, "QCA Version Request");
 
+	/* Unlike other SoC's sending version command response as payload to
+	 * VSE event. WCN3991 sends version command response as a payload to
+	 * command complete event.
+	 */
+	if (soc_type == QCA_WCN3991) {
+		event_type = 0;
+		rlen += 1;
+		rtype = EDL_PATCH_VER_REQ_CMD;
+	}
+
 	cmd = EDL_PATCH_VER_REQ_CMD;
 	skb = __hci_cmd_sync_ev(hdev, EDL_PATCH_CMD_OPCODE, EDL_PATCH_CMD_LEN,
-				&cmd, HCI_EV_VENDOR, HCI_INIT_TIMEOUT);
+				&cmd, event_type, HCI_INIT_TIMEOUT);
 	if (IS_ERR(skb)) {
 		err = PTR_ERR(skb);
 		bt_dev_err(hdev, "Reading QCA version information failed (%d)",
@@ -34,7 +48,7 @@ int qca_read_soc_version(struct hci_dev *hdev, u32 *soc_version)
 		return err;
 	}
 
-	if (skb->len != sizeof(*edl) + sizeof(*ver)) {
+	if (skb->len != rlen) {
 		bt_dev_err(hdev, "QCA Version size mismatch len %d", skb->len);
 		err = -EILSEQ;
 		goto out;
@@ -48,18 +62,21 @@ int qca_read_soc_version(struct hci_dev *hdev, u32 *soc_version)
 	}
 
 	if (edl->cresp != EDL_CMD_REQ_RES_EVT ||
-	    edl->rtype != EDL_APP_VER_RES_EVT) {
+	    edl->rtype != rtype) {
 		bt_dev_err(hdev, "QCA Wrong packet received %d %d", edl->cresp,
 			   edl->rtype);
 		err = -EIO;
 		goto out;
 	}
 
-	ver = (struct rome_version *)(edl->data);
+	if (soc_type == QCA_WCN3991)
+		memmove(&edl->data, &edl->data[1], sizeof(*ver));
+
+	ver = (struct qca_btsoc_version *)(edl->data);
 
 	BT_DBG("%s: Product:0x%08x", hdev->name, le32_to_cpu(ver->product_id));
 	BT_DBG("%s: Patch  :0x%08x", hdev->name, le16_to_cpu(ver->patch_ver));
-	BT_DBG("%s: ROM    :0x%08x", hdev->name, le16_to_cpu(ver->rome_ver));
+	BT_DBG("%s: ROM    :0x%08x", hdev->name, le16_to_cpu(ver->rom_ver));
 	BT_DBG("%s: SOC    :0x%08x", hdev->name, le32_to_cpu(ver->soc_id));
 
 	/* QCA chipset version can be decided by patch and SoC
@@ -67,7 +84,7 @@ int qca_read_soc_version(struct hci_dev *hdev, u32 *soc_version)
 	 * and lower 2 bytes from patch will be used.
 	 */
 	*soc_version = (le32_to_cpu(ver->soc_id) << 16) |
-			(le16_to_cpu(ver->rome_ver) & 0x0000ffff);
+			(le16_to_cpu(ver->rom_ver) & 0x0000ffff);
 	if (*soc_version == 0)
 		err = -EILSEQ;
 
@@ -121,7 +138,7 @@ int qca_send_pre_shutdown_cmd(struct hci_dev *hdev)
 }
 EXPORT_SYMBOL_GPL(qca_send_pre_shutdown_cmd);
 
-static void qca_tlv_check_data(struct rome_config *config,
+static void qca_tlv_check_data(struct qca_fw_config *config,
 				const struct firmware *fw)
 {
 	const u8 *data;
@@ -140,8 +157,8 @@ static void qca_tlv_check_data(struct rome_config *config,
 	BT_DBG("TLV Type\t\t : 0x%x", type_len & 0x000000ff);
 	BT_DBG("Length\t\t : %d bytes", length);
 
-	config->dnld_mode = ROME_SKIP_EVT_NONE;
-	config->dnld_type = ROME_SKIP_EVT_NONE;
+	config->dnld_mode = QCA_SKIP_EVT_NONE;
+	config->dnld_type = QCA_SKIP_EVT_NONE;
 
 	switch (config->type) {
 	case TLV_TYPE_PATCH:
@@ -223,31 +240,45 @@ static void qca_tlv_check_data(struct rome_config *config,
 }
 
 static int qca_tlv_send_segment(struct hci_dev *hdev, int seg_size,
-				 const u8 *data, enum rome_tlv_dnld_mode mode)
+				const u8 *data, enum qca_tlv_dnld_mode mode,
+				enum qca_btsoc_type soc_type)
 {
 	struct sk_buff *skb;
 	struct edl_event_hdr *edl;
 	struct tlv_seg_resp *tlv_resp;
 	u8 cmd[MAX_SIZE_PER_TLV_SEGMENT + 2];
 	int err = 0;
+	u8 event_type = HCI_EV_VENDOR;
+	u8 rlen = (sizeof(*edl) + sizeof(*tlv_resp));
+	u8 rtype = EDL_TVL_DNLD_RES_EVT;
 
 	cmd[0] = EDL_PATCH_TLV_REQ_CMD;
 	cmd[1] = seg_size;
 	memcpy(cmd + 2, data, seg_size);
 
-	if (mode == ROME_SKIP_EVT_VSE_CC || mode == ROME_SKIP_EVT_VSE)
+	if (mode == QCA_SKIP_EVT_VSE_CC || mode == QCA_SKIP_EVT_VSE)
 		return __hci_cmd_send(hdev, EDL_PATCH_CMD_OPCODE, seg_size + 2,
 				      cmd);
 
+	/* Unlike other SoC's sending version command response as payload to
+	 * VSE event. WCN3991 sends version command response as a payload to
+	 * command complete event.
+	 */
+	if (soc_type == QCA_WCN3991) {
+		event_type = 0;
+		rlen = sizeof(*edl);
+		rtype = EDL_PATCH_TLV_REQ_CMD;
+	}
+
 	skb = __hci_cmd_sync_ev(hdev, EDL_PATCH_CMD_OPCODE, seg_size + 2, cmd,
-				HCI_EV_VENDOR, HCI_INIT_TIMEOUT);
+				event_type, HCI_INIT_TIMEOUT);
 	if (IS_ERR(skb)) {
 		err = PTR_ERR(skb);
 		bt_dev_err(hdev, "QCA Failed to send TLV segment (%d)", err);
 		return err;
 	}
 
-	if (skb->len != sizeof(*edl) + sizeof(*tlv_resp)) {
+	if (skb->len != rlen) {
 		bt_dev_err(hdev, "QCA TLV response size mismatch");
 		err = -EILSEQ;
 		goto out;
@@ -260,13 +291,19 @@ static int qca_tlv_send_segment(struct hci_dev *hdev, int seg_size,
 		goto out;
 	}
 
-	tlv_resp = (struct tlv_seg_resp *)(edl->data);
+	if (edl->cresp != EDL_CMD_REQ_RES_EVT || edl->rtype != rtype) {
+		bt_dev_err(hdev, "QCA TLV with error stat 0x%x rtype 0x%x",
+			   edl->cresp, edl->rtype);
+		err = -EIO;
+	}
 
-	if (edl->cresp != EDL_CMD_REQ_RES_EVT ||
-	    edl->rtype != EDL_TVL_DNLD_RES_EVT || tlv_resp->result != 0x00) {
+	if (soc_type == QCA_WCN3991)
+		goto out;
+
+	tlv_resp = (struct tlv_seg_resp *)(edl->data);
+	if (tlv_resp->result) {
 		bt_dev_err(hdev, "QCA TLV with error stat 0x%x rtype 0x%x (0x%x)",
 			   edl->cresp, edl->rtype, tlv_resp->result);
-		err = -EIO;
 	}
 
 out:
@@ -301,7 +338,8 @@ static int qca_inject_cmd_complete_event(struct hci_dev *hdev)
 }
 
 static int qca_download_firmware(struct hci_dev *hdev,
-				  struct rome_config *config)
+				 struct qca_fw_config *config,
+				 enum qca_btsoc_type soc_type)
 {
 	const struct firmware *fw;
 	const u8 *segment;
@@ -328,10 +366,10 @@ static int qca_download_firmware(struct hci_dev *hdev,
 		remain -= segsize;
 		/* The last segment is always acked regardless download mode */
 		if (!remain || segsize < MAX_SIZE_PER_TLV_SEGMENT)
-			config->dnld_mode = ROME_SKIP_EVT_NONE;
+			config->dnld_mode = QCA_SKIP_EVT_NONE;
 
 		ret = qca_tlv_send_segment(hdev, segsize, segment,
-					    config->dnld_mode);
+					   config->dnld_mode, soc_type);
 		if (ret)
 			goto out;
 
@@ -344,8 +382,8 @@ static int qca_download_firmware(struct hci_dev *hdev,
 	 * decrease the BT in initialization time. Here we will inject a command
 	 * complete event to avoid a command timeout error message.
 	 */
-	if (config->dnld_type == ROME_SKIP_EVT_VSE_CC ||
-	    config->dnld_type == ROME_SKIP_EVT_VSE)
+	if (config->dnld_type == QCA_SKIP_EVT_VSE_CC ||
+	    config->dnld_type == QCA_SKIP_EVT_VSE)
 		ret = qca_inject_cmd_complete_event(hdev);
 
 out:
@@ -382,7 +420,7 @@ int qca_uart_setup(struct hci_dev *hdev, uint8_t baudrate,
 		   enum qca_btsoc_type soc_type, u32 soc_ver,
 		   const char *firmware_name)
 {
-	struct rome_config config;
+	struct qca_fw_config config;
 	int err;
 	u8 rom_ver = 0;
 
@@ -405,7 +443,7 @@ int qca_uart_setup(struct hci_dev *hdev, uint8_t baudrate,
 			 "qca/rampatch_%08x.bin", soc_ver);
 	}
 
-	err = qca_download_firmware(hdev, &config);
+	err = qca_download_firmware(hdev, &config, soc_type);
 	if (err < 0) {
 		bt_dev_err(hdev, "QCA Failed to download patch (%d)", err);
 		return err;
@@ -426,7 +464,7 @@ int qca_uart_setup(struct hci_dev *hdev, uint8_t baudrate,
 		snprintf(config.fwname, sizeof(config.fwname),
 			 "qca/nvm_%08x.bin", soc_ver);
 
-	err = qca_download_firmware(hdev, &config);
+	err = qca_download_firmware(hdev, &config, soc_type);
 	if (err < 0) {
 		bt_dev_err(hdev, "QCA Failed to download NVM (%d)", err);
 		return err;
diff --git a/drivers/bluetooth/btqca.h b/drivers/bluetooth/btqca.h
index 69c5315a6..f5795b1a3 100644
--- a/drivers/bluetooth/btqca.h
+++ b/drivers/bluetooth/btqca.h
@@ -56,24 +56,24 @@ enum qca_baudrate {
 	QCA_BAUDRATE_RESERVED
 };
 
-enum rome_tlv_dnld_mode {
-	ROME_SKIP_EVT_NONE,
-	ROME_SKIP_EVT_VSE,
-	ROME_SKIP_EVT_CC,
-	ROME_SKIP_EVT_VSE_CC
+enum qca_tlv_dnld_mode {
+	QCA_SKIP_EVT_NONE,
+	QCA_SKIP_EVT_VSE,
+	QCA_SKIP_EVT_CC,
+	QCA_SKIP_EVT_VSE_CC
 };
 
-enum rome_tlv_type {
+enum qca_tlv_type {
 	TLV_TYPE_PATCH = 1,
 	TLV_TYPE_NVM
 };
 
-struct rome_config {
+struct qca_fw_config {
 	u8 type;
 	char fwname[64];
 	uint8_t user_baud_rate;
-	enum rome_tlv_dnld_mode dnld_mode;
-	enum rome_tlv_dnld_mode dnld_type;
+	enum qca_tlv_dnld_mode dnld_mode;
+	enum qca_tlv_dnld_mode dnld_type;
 };
 
 struct edl_event_hdr {
@@ -82,10 +82,10 @@ struct edl_event_hdr {
 	__u8 data[0];
 } __packed;
 
-struct rome_version {
+struct qca_btsoc_version {
 	__le32 product_id;
 	__le16 patch_ver;
-	__le16 rome_ver;
+	__le16 rom_ver;
 	__le32 soc_id;
 } __packed;
 
@@ -125,6 +125,7 @@ enum qca_btsoc_type {
 	QCA_AR3002,
 	QCA_ROME,
 	QCA_WCN3990,
+	QCA_WCN3991,
 	QCA_WCN3998,
 };
 
@@ -134,12 +135,14 @@ int qca_set_bdaddr_rome(struct hci_dev *hdev, const bdaddr_t *bdaddr);
 int qca_uart_setup(struct hci_dev *hdev, uint8_t baudrate,
 		   enum qca_btsoc_type soc_type, u32 soc_ver,
 		   const char *firmware_name);
-int qca_read_soc_version(struct hci_dev *hdev, u32 *soc_version);
+int qca_read_soc_version(struct hci_dev *hdev, u32 *soc_version,
+			 enum qca_btsoc_type);
 int qca_set_bdaddr(struct hci_dev *hdev, const bdaddr_t *bdaddr);
 int qca_send_pre_shutdown_cmd(struct hci_dev *hdev);
 static inline bool qca_is_wcn399x(enum qca_btsoc_type soc_type)
 {
-	return soc_type == QCA_WCN3990 || soc_type == QCA_WCN3998;
+	return soc_type == QCA_WCN3990 || soc_type == QCA_WCN3991 ||
+	       soc_type == QCA_WCN3998;
 }
 #else
 
@@ -155,7 +158,8 @@ static inline int qca_uart_setup(struct hci_dev *hdev, uint8_t baudrate,
 	return -EOPNOTSUPP;
 }
 
-static inline int qca_read_soc_version(struct hci_dev *hdev, u32 *soc_version)
+static inline int qca_read_soc_version(struct hci_dev *hdev, u32 *soc_version,
+				       enum qca_btsoc_type)
 {
 	return -EOPNOTSUPP;
 }
diff --git a/drivers/bluetooth/hci_qca.c b/drivers/bluetooth/hci_qca.c
index e3164c200..bbd290fbe 100644
--- a/drivers/bluetooth/hci_qca.c
+++ b/drivers/bluetooth/hci_qca.c
@@ -1262,7 +1262,7 @@ static int qca_setup(struct hci_uart *hu)
 		if (ret)
 			return ret;
 
-		ret = qca_read_soc_version(hdev, &soc_ver);
+		ret = qca_read_soc_version(hdev, &soc_ver, soc_type);
 		if (ret)
 			return ret;
 	} else {
@@ -1282,7 +1282,7 @@ static int qca_setup(struct hci_uart *hu)
 
 	if (!qca_is_wcn399x(soc_type)) {
 		/* Get QCA version information */
-		ret = qca_read_soc_version(hdev, &soc_ver);
+		ret = qca_read_soc_version(hdev, &soc_ver, soc_type);
 		if (ret)
 			return ret;
 	}
@@ -1340,6 +1340,17 @@ static const struct qca_vreg_data qca_soc_data_wcn3990 = {
 	.num_vregs = 4,
 };
 
+static const struct qca_vreg_data qca_soc_data_wcn3991 = {
+	.soc_type = QCA_WCN3991,
+	.vregs = (struct qca_vreg []) {
+		{ "vddio", 15000  },
+		{ "vddxo", 80000  },
+		{ "vddrf", 300000 },
+		{ "vddch0", 450000 },
+	},
+	.num_vregs = 4,
+};
+
 static const struct qca_vreg_data qca_soc_data_wcn3998 = {
 	.soc_type = QCA_WCN3998,
 	.vregs = (struct qca_vreg []) {
@@ -1567,6 +1578,7 @@ static void qca_serdev_remove(struct serdev_device *serdev)
 static const struct of_device_id qca_bluetooth_of_match[] = {
 	{ .compatible = "qcom,qca6174-bt" },
 	{ .compatible = "qcom,wcn3990-bt", .data = &qca_soc_data_wcn3990},
+	{ .compatible = "qcom,wcn3991-bt", .data = &qca_soc_data_wcn3991},
 	{ .compatible = "qcom,wcn3998-bt", .data = &qca_soc_data_wcn3998},
 	{ /* sentinel */ }
 };
diff --git a/drivers/bluetooth/rtl_btlpm.c b/drivers/bluetooth/rtl_btlpm.c
new file mode 100644
index 000000000..393d37f06
--- /dev/null
+++ b/drivers/bluetooth/rtl_btlpm.c
@@ -0,0 +1,639 @@
+/*
+ *  TI Bluesleep driver
+ *	Kernel module responsible for Wake up of Host
+ *  Copyright (C) 2009-2010 Texas Instruments
+
+
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * for more details.
+ *
+ * Copyright (C) 2006-2007 - Motorola
+ * Copyright (c) 2008-2009, Code Aurora Forum. All rights reserved.
+ *
+ *  Date         Author           Comment
+ * -----------  --------------   --------------------------------
+ * 2006-Apr-28  Motorola         The kernel module for running the Bluetooth(R)
+ *                               Sleep-Mode Protocol from the Host side
+ * 2006-Sep-08  Motorola         Added workqueue for handling sleep work.
+ * 2007-Jan-24  Motorola         Added mbm_handle_ioi() call to ISR.
+ * 2009-Aug-10  Motorola         Changed "add_timer" to "mod_timer" to solve
+ *                               race when flurry of queued work comes in.
+*/
+#define DEBUG
+
+#include <linux/module.h>       /* kernel module definitions */
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/serial_core.h>
+#include <linux/proc_fs.h>
+
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+#include <linux/of_platform.h>
+#include <linux/pm_wakeirq.h>
+
+#include <net/bluetooth/bluetooth.h>
+
+/*
+ * #define BT_SLEEP_DBG
+ */
+#undef BT_DBG
+#undef BT_ERR
+#ifdef BT_SLEEP_DBG
+#define BT_DBG(fmt, arg...) pr_debug("[BT_LPM] %s: " fmt "\n",\
+				__func__, ## arg)
+#else
+#define BT_DBG(fmt, arg...)
+#endif
+#define BT_ERR(fmt, arg...) pr_err("[BT_LPM] %s: " fmt "\n",\
+				__func__, ## arg)
+
+/*
+ * Defines
+ */
+#define VERSION	 "1.2.3"
+#define PROC_DIR	"bluetooth/sleep"
+
+#define DEFAULT_UART_INDEX   1
+
+
+static void bluesleep_stop(void);
+static int bluesleep_start(void);
+
+struct bluesleep_info {
+	unsigned int wakeup_enable;
+	unsigned host_wake;
+	unsigned ext_wake;
+	unsigned host_wake_irq;
+	struct wakeup_source *ws;
+	struct uart_port *uport;
+	unsigned host_wake_assert:1;
+	unsigned ext_wake_assert:1;
+	struct platform_device *pdev;
+};
+
+/* work function */
+static void bluesleep_sleep_work(struct work_struct *work);
+
+/* work queue */
+DECLARE_DELAYED_WORK(sleep_workqueue, bluesleep_sleep_work);
+
+/* Macros for handling sleep work */
+#define bluesleep_rx_busy()     schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_tx_busy()     schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_rx_idle()     schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_tx_idle()     schedule_delayed_work(&sleep_workqueue, 0)
+
+/* 10 second timeout */
+#define TX_TIMER_INTERVAL	10
+
+/* state variable names and bit positions */
+#define BT_PROTO	0x01
+#define BT_TXDATA	0x02
+#define BT_ASLEEP	0x04
+
+/* variable use indicate lpm modle */
+static bool has_lpm_enabled;
+
+/* struct use save platform_device from uart */
+static struct platform_device *bluesleep_uart_dev;
+
+static struct bluesleep_info *bsi;
+
+/* module usage */
+static atomic_t open_count = ATOMIC_INIT(1);
+
+/*
+ * Global variables
+ */
+
+/** Global state flags */
+static unsigned long flags;
+
+/** Tasklet to respond to change in hostwake line */
+static struct tasklet_struct hostwake_task;
+
+/** Transmission timer */
+static struct timer_list tx_timer;
+
+/** Lock for state transitions */
+static spinlock_t rw_lock;
+
+
+struct proc_dir_entry *bluetooth_dir, *sleep_dir;
+
+/*
+ * Local functions
+ */
+
+/**
+ * @return 1 if the Host can go to sleep, 0 otherwise.
+ */
+static inline int bluesleep_can_sleep(void)
+{
+	/* check if BT_WAKE_HOST_GPIO deasserted */
+	return (gpio_get_value(bsi->host_wake) != bsi->host_wake_assert) &&
+		(bsi->uport != NULL);
+}
+
+/*
+ * after bt wakeup should clean BT_ASLEEP flag and start time.
+ */
+void bluesleep_sleep_wakeup(void)
+{
+	if (test_bit(BT_ASLEEP, &flags)) {
+		BT_DBG("waking up...");
+		/* Start the timer */
+		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
+		clear_bit(BT_ASLEEP, &flags);
+	}
+}
+
+/**
+ * @brief@  main sleep work handling function which update the flags
+ * and activate and deactivate UART ,check FIFO.
+ */
+static void bluesleep_sleep_work(struct work_struct *work)
+{
+	if (bluesleep_can_sleep()) {
+		/* already asleep, this is an error case */
+		if (test_bit(BT_ASLEEP, &flags)) {
+			BT_DBG("already asleep");
+			return;
+		}
+		if (bsi->uport->ops->tx_empty(bsi->uport)) {
+			BT_DBG("going to sleep...");
+			set_bit(BT_ASLEEP, &flags);
+			__pm_wakeup_event(bsi->ws, HZ / 2);
+		} else {
+			mod_timer(&tx_timer,
+					jiffies + (TX_TIMER_INTERVAL * HZ));
+			return;
+		}
+	} else if (!test_bit(BT_ASLEEP, &flags)) {
+		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
+	} else {
+		bluesleep_sleep_wakeup();
+	}
+}
+
+/**
+ * A tasklet function that runs in tasklet context and reads the value
+ * of the HOST_WAKE GPIO pin and further defer the work.
+ * @param data Not used.
+ */
+static void bluesleep_hostwake_task(unsigned long data)
+{
+	BT_DBG("hostwake line change");
+	spin_lock(&rw_lock);
+
+	if (gpio_get_value(bsi->host_wake) == bsi->host_wake_assert)
+		bluesleep_rx_busy();
+	else
+		bluesleep_rx_idle();
+
+	spin_unlock(&rw_lock);
+}
+
+static struct uart_port *bluesleep_get_uart_port(void)
+{
+	struct uart_port *uport = NULL;
+
+	if (bluesleep_uart_dev) {
+		uport = platform_get_drvdata(bluesleep_uart_dev);
+		if (uport)
+			BT_DBG(
+			"%s get uart_port from blusleep_uart_dev: %s, port irq: %d",
+					__func__, bluesleep_uart_dev->name,
+					uport->irq);
+	}
+	return uport;
+}
+
+static int bluesleep_lpm_proc_show(struct seq_file *m, void *v)
+{
+	seq_printf(m, "lpm enable: %d\n", has_lpm_enabled);
+	return 0;
+}
+
+static int bluesleep_lpm_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, bluesleep_lpm_proc_show, NULL);
+}
+
+static ssize_t bluesleep_write_proc_lpm(struct file *file,
+				const char __user *buffer,
+				size_t count, loff_t *pos)
+{
+	char b;
+
+	if (count < 1)
+		return -EINVAL;
+
+	if (copy_from_user(&b, buffer, 1))
+		return -EFAULT;
+
+	if (b == '0') {
+		/* HCI_DEV_UNREG */
+		bluesleep_stop();
+		has_lpm_enabled = false;
+		bsi->uport = NULL;
+	} else {
+		/* HCI_DEV_REG */
+		if (!has_lpm_enabled) {
+			has_lpm_enabled = true;
+			if (bluesleep_uart_dev)
+				bsi->uport = bluesleep_get_uart_port();
+
+			/* if bluetooth started, start bluesleep*/
+			bluesleep_start();
+		}
+	}
+
+	return count;
+}
+
+static const struct file_operations lpm_fops = {
+	.owner		= THIS_MODULE,
+	.open		= bluesleep_lpm_proc_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+	.write		= bluesleep_write_proc_lpm,
+};
+
+/**
+ * Handles transmission timer expiration.
+ * @param data Not used.
+ */
+static void bluesleep_tx_timer_expire(struct timer_list *t)
+{
+	unsigned long irq_flags;
+
+	spin_lock_irqsave(&rw_lock, irq_flags);
+
+	BT_DBG("Tx timer expired");
+
+	/* were we silent during the last timeout */
+	if (!test_bit(BT_TXDATA, &flags)) {
+		BT_DBG("Tx has been idle");
+		bluesleep_tx_idle();
+	} else {
+		BT_DBG("Tx data during last period");
+		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL*HZ));
+	}
+
+	/* clear the incoming data flag */
+	clear_bit(BT_TXDATA, &flags);
+
+	spin_unlock_irqrestore(&rw_lock, irq_flags);
+}
+
+/**
+ * Schedules a tasklet to run when receiving an interrupt on the
+ * <code>HOST_WAKE</code> GPIO pin.
+ * @param irq Not used.
+ * @param dev_id Not used.
+ */
+static irqreturn_t bluesleep_hostwake_isr(int irq, void *dev_id)
+{
+	/* schedule a tasklet to handle the change in the host wake line */
+	tasklet_schedule(&hostwake_task);
+	__pm_stay_awake(bsi->ws);
+	return IRQ_HANDLED;
+}
+
+/**
+ * Starts the Sleep-Mode Protocol on the Host.
+ * @return On success, 0. On error, -1, and <code>errno</code> is set
+ * appropriately.
+ */
+static int bluesleep_start(void)
+{
+	int retval;
+	unsigned long irq_flags;
+
+	spin_lock_irqsave(&rw_lock, irq_flags);
+
+	if (test_bit(BT_PROTO, &flags)) {
+		spin_unlock_irqrestore(&rw_lock, irq_flags);
+		return 0;
+	}
+
+	spin_unlock_irqrestore(&rw_lock, irq_flags);
+
+	if (!atomic_dec_and_test(&open_count)) {
+		atomic_inc(&open_count);
+		return -EBUSY;
+	}
+
+	/* start the timer */
+	mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL*HZ));
+
+	retval = request_irq(bsi->host_wake_irq, bluesleep_hostwake_isr,
+				IRQF_TRIGGER_FALLING | IRQF_TRIGGER_RISING,
+				"bluetooth hostwake", &bsi->pdev->dev);
+	if (retval  < 0) {
+		BT_ERR("Couldn't acquire BT_HOST_WAKE IRQ");
+		goto fail;
+	}
+
+	set_bit(BT_PROTO, &flags);
+	__pm_stay_awake(bsi->ws);
+
+	return 0;
+fail:
+	del_timer(&tx_timer);
+	atomic_inc(&open_count);
+
+	return retval;
+}
+
+/**
+ * Stops the Sleep-Mode Protocol on the Host.
+ */
+static void bluesleep_stop(void)
+{
+	unsigned long irq_flags;
+
+	spin_lock_irqsave(&rw_lock, irq_flags);
+
+	if (!test_bit(BT_PROTO, &flags)) {
+		spin_unlock_irqrestore(&rw_lock, irq_flags);
+		return;
+	}
+
+	del_timer(&tx_timer);
+	clear_bit(BT_PROTO, &flags);
+
+	if (test_bit(BT_ASLEEP, &flags))
+		clear_bit(BT_ASLEEP, &flags);
+
+	atomic_inc(&open_count);
+
+	spin_unlock_irqrestore(&rw_lock, irq_flags);
+	free_irq(bsi->host_wake_irq, &bsi->pdev->dev);
+	__pm_wakeup_event(bsi->ws, HZ / 2);
+}
+
+static int assert_level = -1;
+module_param(assert_level, int, S_IRUGO);
+MODULE_PARM_DESC(assert_level, "BT_LPM hostwake/btwake assert level");
+
+static struct platform_device *sw_uart_get_pdev(int id)
+{
+	struct device_node *np;
+	char match[20];
+	sprintf(match, "uart%d", id);
+	np = of_find_node_by_type(NULL, match);
+	return of_find_device_by_node(np);
+}
+
+static int __init bluesleep_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct device *dev = &pdev->dev;
+	enum of_gpio_flags config;
+	int ret, uart_index;
+	u32 val;
+
+	bsi = devm_kzalloc(&pdev->dev, sizeof(struct bluesleep_info),
+			GFP_KERNEL);
+	if (!bsi)
+		return -ENOMEM;
+
+	bsi->host_wake = of_get_named_gpio_flags(np, "bt_hostwake", 0, &config);
+	if (!gpio_is_valid(bsi->host_wake)) {
+		BT_ERR("get gpio bt_hostwake failed\n");
+		return -EINVAL;
+	}
+
+	/* set host_wake_assert */
+	bsi->host_wake_assert = (config == OF_GPIO_ACTIVE_LOW) ? 0 : 1;
+	BT_DBG("bt_hostwake gpio=%d assert=%d\n", bsi->host_wake, bsi->host_wake_assert);
+
+	if (assert_level != -1) {
+		bsi->host_wake_assert = (assert_level & 0x02) > 0;
+		BT_DBG("override host_wake assert to %d", bsi->host_wake_assert);
+	}
+
+	ret = devm_gpio_request(dev, bsi->host_wake, "bt_hostwake");
+	if (ret < 0) {
+		BT_ERR("can't request bt_hostwake gpio %d\n",
+			bsi->host_wake);
+		return ret;
+	}
+	ret = gpio_direction_input(bsi->host_wake);
+	if (ret < 0) {
+		BT_ERR("can't request input direction bt_wake gpio %d\n",
+			bsi->host_wake);
+		return ret;
+	}
+
+	if (!of_property_read_bool(np, "wakeup-source")) {
+		BT_DBG("wakeup source is disabled!\n");
+	} else {
+		ret = device_init_wakeup(dev, true);
+		if (ret < 0) {
+			BT_ERR("device init wakeup failed!\n");
+			return ret;
+		}
+		ret = dev_pm_set_wake_irq(dev, gpio_to_irq(bsi->host_wake));
+		if (ret < 0) {
+			BT_ERR("can't enable wakeup src for bt_hostwake %d\n",
+				bsi->host_wake);
+			return ret;
+		}
+		bsi->wakeup_enable = 1;
+	}
+
+	bsi->ext_wake = of_get_named_gpio_flags(np, "bt_wake",
+			0, (enum of_gpio_flags *)&config);
+	if (!gpio_is_valid(bsi->ext_wake)) {
+		BT_ERR("get gpio bt_wake failed\n");
+		return -EINVAL;
+	}
+
+	ret = devm_gpio_request(dev, bsi->ext_wake, "bt_wake");
+	if (ret < 0) {
+		BT_ERR("can't request bt_wake gpio %d\n",
+			bsi->ext_wake);
+		return ret;
+	}
+
+	/* set ext_wake_assert */
+	bsi->ext_wake_assert = (config == OF_GPIO_ACTIVE_LOW) ? 0 : 1;
+	BT_DBG("bt_wake gpio=%d assert=%d\n", bsi->ext_wake, bsi->ext_wake_assert);
+
+	if (assert_level != -1) {
+		bsi->ext_wake_assert = (assert_level & 0x01) > 0;
+		BT_DBG("override ext_wake assert to %d", bsi->ext_wake_assert);
+	}
+
+	/* 1.set bt_wake as output and the level is assert, assert bt wake */
+	ret = gpio_direction_output(bsi->ext_wake, bsi->ext_wake_assert);
+	if (ret < 0) {
+		BT_ERR("can't request output direction bt_wake gpio %d\n",
+			bsi->ext_wake);
+		return ret;
+	}
+
+	/* 2.get bt_host_wake gpio irq */
+	bsi->host_wake_irq = gpio_to_irq(bsi->host_wake);
+	if (bsi->host_wake_irq < 0) {
+		BT_ERR("map gpio [%d] to virq failed, errno = %d\n",
+				bsi->host_wake, bsi->host_wake_irq);
+		ret = -ENODEV;
+		return ret;
+	}
+
+	uart_index = DEFAULT_UART_INDEX;
+	if (!of_property_read_u32(np, "uart_index", &val)) {
+		switch (val) {
+		case 0:
+		case 1:
+		case 2:
+			uart_index = val;
+			break;
+		default:
+			BT_ERR("unsupported uart_index (%u)\n", val);
+		}
+	}
+	BT_DBG("uart_index (%u)\n", uart_index);
+	bluesleep_uart_dev = sw_uart_get_pdev(uart_index);
+
+	bsi->ws = wakeup_source_register(dev, "bluesleep");
+	bsi->pdev = pdev;
+	return 0;
+}
+
+static int bluesleep_remove(struct platform_device *pdev)
+{
+	if (test_bit(BT_PROTO, &flags)) {
+		if (disable_irq_wake(bsi->host_wake_irq))
+			BT_ERR("Couldn't disable hostwake IRQ wakeup mode\n");
+		free_irq(bsi->host_wake_irq, &bsi->pdev->dev);
+		del_timer(&tx_timer);
+	}
+
+	wakeup_source_unregister(bsi->ws);
+	if (bsi->wakeup_enable) {
+		BT_DBG("Deinit wakeup source");
+		device_init_wakeup(&pdev->dev, false);
+		dev_pm_clear_wake_irq(&pdev->dev);
+	}
+
+	return 0;
+}
+
+static int bluesleep_resume(struct platform_device *pdev)
+{
+	BT_DBG("%s", __func__);
+
+	return 0;
+}
+
+static int bluesleep_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	BT_DBG("%s", __func__);
+
+	return 0;
+}
+
+static const struct of_device_id sunxi_btlpm_ids[] = {
+	{ .compatible = "allwinner,sunxi-btlpm" },
+	{ /* Sentinel */ }
+};
+
+static struct platform_driver bluesleep_driver = {
+	.remove	= bluesleep_remove,
+	.suspend = bluesleep_suspend,
+	.resume = bluesleep_resume,
+	.driver	= {
+		.owner	= THIS_MODULE,
+		.name	= "sunxi-btlpm",
+		.of_match_table	= sunxi_btlpm_ids,
+	},
+};
+
+/**
+ * Initializes the module.
+ * @return On success, 0. On error, -1, and <code>errno</code> is set
+ * appropriately.
+ */
+static int __init bluesleep_init(void)
+{
+	int retval;
+	struct proc_dir_entry *ent;
+
+	BT_DBG("BlueSleep Mode Driver Ver %s", VERSION);
+
+	retval = platform_driver_probe(&bluesleep_driver, bluesleep_probe);
+	if (retval)
+		return retval;
+
+	bluetooth_dir = proc_mkdir("bluetooth", NULL);
+	if (bluetooth_dir == NULL) {
+		BT_ERR("Unable to create /proc/bluetooth directory");
+		return -ENOMEM;
+	}
+
+	sleep_dir = proc_mkdir("sleep", bluetooth_dir);
+	if (sleep_dir == NULL) {
+		BT_ERR("Unable to create /proc/%s directory", PROC_DIR);
+		return -ENOMEM;
+	}
+	/* read/write proc entries */
+	ent = proc_create("lpm", 0660, sleep_dir, &lpm_fops);
+	if (ent == NULL) {
+		BT_ERR("Unable to create /proc/%s/lpm entry", PROC_DIR);
+		retval = -ENOMEM;
+		goto fail;
+	}
+
+	flags = 0; /* clear all status bits */
+
+	/* Initialize spinlock. */
+	spin_lock_init(&rw_lock);
+
+	/* Initialize timer */
+	timer_setup(&tx_timer, bluesleep_tx_timer_expire, 0);
+
+	/* initialize host wake tasklet */
+	tasklet_init(&hostwake_task, bluesleep_hostwake_task, 0);
+
+	return 0;
+
+fail:
+	remove_proc_entry("lpm", sleep_dir);
+	remove_proc_entry("sleep", bluetooth_dir);
+	remove_proc_entry("bluetooth", 0);
+	return retval;
+}
+
+/**
+ * Cleans up the module.
+ */
+static void __exit bluesleep_exit(void)
+{
+	platform_driver_unregister(&bluesleep_driver);
+
+	remove_proc_entry("lpm", sleep_dir);
+	remove_proc_entry("sleep", bluetooth_dir);
+	remove_proc_entry("bluetooth", 0);
+}
+
+module_init(bluesleep_init);
+module_exit(bluesleep_exit);
+
+MODULE_DESCRIPTION("Bluetooth Sleep Mode Driver ver %s " VERSION);
+#ifdef MODULE_LICENSE
+MODULE_LICENSE("GPL");
+#endif
diff --git a/drivers/bluetooth/xradio_btlpm.c b/drivers/bluetooth/xradio_btlpm.c
new file mode 100644
index 000000000..93f034ffb
--- /dev/null
+++ b/drivers/bluetooth/xradio_btlpm.c
@@ -0,0 +1,895 @@
+/*
+** Bluetooth sleep and wakeup host interface for XRADIO Drivers
+**
+** Copyright (c) 2013, XRadio
+** Author: XRadio
+**
+** This program is free software; you can redistribute it and/or modify
+** it under the terms of the GNU General Public License version 2 as
+** published by the Free Software Foundation.
+*/
+#include <linux/module.h>
+#include <linux/errno.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/notifier.h>
+#include <linux/proc_fs.h>
+#include <linux/spinlock.h>
+#include <linux/timer.h>
+#include <linux/uaccess.h>
+#include <linux/version.h>
+#include <linux/workqueue.h>
+#include <linux/platform_device.h>
+#include <linux/irq.h>
+#include <linux/param.h>
+#include <linux/bitops.h>
+#include <linux/termios.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+#include <linux/of_platform.h>
+#include <linux/pm_wakeirq.h>
+#include <linux/serial_core.h>
+#include <net/bluetooth/bluetooth.h>
+#include <net/bluetooth/hci_core.h>
+
+
+#define BT_SLEEP_DEBUG
+
+#ifdef BT_SLEEP_DEBUG
+#define BT_SLEEP_DBG(fmt, arg...) printk(KERN_DEBUG "[XR_BT_LPM] %s: " fmt "\n", __func__, ## arg)
+#else
+#define BT_SLEEP_DBG(fmt, arg...)
+#endif
+
+#define BT_SLEEP_INF(fmt, arg...) printk(KERN_INFO "[XR_BT_LPM] %s: " fmt "\n", __func__, ## arg)
+#define VERSION					"1.0.10"
+#define PROC_SLEEP_DIR			"bluetooth/sleep"
+#define PROC_POWER_DIR			"bluetooth/power"
+#define BT_BLUEDROID_SUPPORT 	1
+
+#define AW1732_BT				1
+#define XRADIO_ETF_RFKILL		1
+
+struct xr_btsleep_info {
+	unsigned int wakeup_enable;
+	unsigned int host_wake;
+	unsigned int ext_wake;
+	unsigned int host_wake_irq;
+	struct wakeup_source *ws;
+	struct uart_port *uport;
+	unsigned int host_wake_polarity:1;
+	unsigned int bt_wake_polarity:1;
+	struct platform_device *pdev;
+};
+
+/* work function */
+static void bluesleep_sleep_work(struct work_struct *work);
+
+
+/* work queue */
+DECLARE_DELAYED_WORK(sleep_workqueue, bluesleep_sleep_work);
+
+
+/* Macros for handling sleep work */
+#define bluesleep_rx_busy()     schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_tx_busy()     schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_rx_idle()     schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_tx_idle()     schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_wake_up()     schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_standby()     schedule_delayed_work(&sleep_workqueue, 0)
+
+
+
+/* 10 second timeout */
+#define TX_TIMER_INTERVAL	2	//10s
+
+/* state variable names and bit positions */
+#define BT_PROTO	0x01
+#define BT_TXDATA	0x02
+#define BT_ASLEEP	0x04
+
+
+/* variable use indicate lpm modle */
+volatile bool has_lpm_enabled;
+
+/* struct use save platform_device from uart */
+static struct platform_device *bluesleep_uart_dev;
+static struct xr_btsleep_info *bsi;
+
+/* Global state flags */
+static unsigned long flags;
+
+#ifdef AW1732_BT
+/* module usage */
+static atomic_t open_count = ATOMIC_INIT(1);
+/* Tasklet to respond to change in hostwake line */
+static struct tasklet_struct hostwake_task;
+#endif
+
+/* Transmission timer */
+static struct timer_list tx_timer;
+
+/* Lock for state transitions */
+static spinlock_t rw_lock;
+static spinlock_t irq_lock;
+
+
+struct proc_dir_entry *bluetooth_dir, *sleep_dir;
+
+#ifdef XRADIO_ETF_RFKILL
+struct proc_dir_entry *power_dir;
+volatile char power_state_save;
+#endif
+
+/*
+ * bt go to sleep will call this function tell uart stop data interactive
+ */
+static void hsuart_power(int on)
+{
+	if (bsi->uport == NULL) {
+		return;
+	}
+	if (on) {
+		bsi->uport->ops->set_mctrl(bsi->uport, TIOCM_RTS);
+	} else {
+		bsi->uport->ops->set_mctrl(bsi->uport, 0);
+	}
+}
+
+/**
+ * @return 1 if the Host can go to sleep, 0 otherwise.
+ */
+static inline int bluesleep_can_sleep(void)
+{
+	/* check if HOST_WAKE_BT_GPIO and BT_WAKE_HOST_GPIO are both deasserted */
+	int flag1, flag2;
+	flag1 = !test_bit(BT_TXDATA, &flags);
+	flag2 = (bsi->uport != NULL);
+	BT_SLEEP_DBG(" !BT_TXDATA is %d, bsi->uport is %d", flag1, flag2);
+	return (flag1 && flag2);
+}
+
+/*
+ * after bt wakeup should clean BT_ASLEEP flag and start time.
+ */
+int bluesleep_sleep_wakeup(void)
+{
+	int poll_count = 0;
+	BT_SLEEP_DBG("test_bit(BT_ASLEEP, &flags) %d", test_bit(BT_ASLEEP, &flags));
+	if (gpio_get_value(bsi->ext_wake) != bsi->bt_wake_polarity ||
+		gpio_get_value(bsi->host_wake) != bsi->host_wake_polarity ||
+		test_bit(BT_ASLEEP, &flags) == 1) {
+		BT_SLEEP_DBG("waking up...");
+		/*Activating UART */
+		hsuart_power(1);
+		gpio_set_value(bsi->ext_wake, bsi->bt_wake_polarity);
+		//add poll bsi->hostwake
+		while (poll_count++ < 6) {
+			mdelay(25);
+			if (gpio_get_value(bsi->host_wake) == 1) {
+				BT_SLEEP_DBG("bt device active");
+				/*wake up, maybe no data or cmd need send to fw*/
+				/*so didn't change TXDATA in here*/
+				clear_bit(BT_ASLEEP, &flags);
+				return 0;
+			}
+		}
+		/*
+		*add once more wakeup operation when first operation failed,
+		*because if host wakeup device during device is wakeuped by yourself,
+		*device maybe couldn't receive wakeup GPIO rise-up signal
+		*/
+		poll_count = 0;
+		while (poll_count++ < 6) {
+			mdelay(25);
+			if (gpio_get_value(bsi->host_wake) == 1) {
+				BT_SLEEP_DBG("bt device active");
+				/*wake up, maybe no data or cmd need send to fw*/
+				/*so didn't change TXDATA in here*/
+				clear_bit(BT_ASLEEP, &flags);
+				return 0;
+			}
+		}
+		return 1;
+	} else {
+		BT_SLEEP_DBG("bluesleep_sleep_wakeup del_timer");
+		del_timer(&tx_timer);
+		return 0;
+	}
+	return 1;
+}
+
+/**
+ * @brief@  main sleep work handling function which update the flags
+ * and activate and deactivate UART ,check FIFO.
+ */
+static void bluesleep_sleep_work(struct work_struct *work)
+{
+	if (!has_lpm_enabled) {
+		BT_SLEEP_DBG("lpm disabled already");
+		return;
+	}
+
+	if (bluesleep_can_sleep()) {
+		/* already asleep, this is an error case */
+		if (test_bit(BT_ASLEEP, &flags)) {
+			BT_SLEEP_DBG("already asleep");
+			return;
+		}
+		if (bsi->uport->ops->tx_empty(bsi->uport)) {
+			BT_SLEEP_DBG("going to sleep...");
+			gpio_set_value(bsi->ext_wake, !bsi->bt_wake_polarity);
+			set_bit(BT_ASLEEP, &flags);
+			clear_bit(BT_TXDATA, &flags);
+			/*Deactivating UART */
+			hsuart_power(0);
+			__pm_relax(bsi->ws);
+		}
+	} else {
+		bluesleep_sleep_wakeup();
+	}
+}
+
+#ifdef AW1732_BT
+static void bluesleep_hostwake_task(unsigned long data)
+{
+	BT_SLEEP_DBG("hostwake line change");
+	if (!has_lpm_enabled) {
+		return;
+	}
+	spin_lock(&rw_lock);
+	//wakeup signal from fw
+	if (test_bit(BT_ASLEEP, &flags) && !test_bit(BT_TXDATA, &flags)) {
+		clear_bit(BT_ASLEEP, &flags);
+		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
+		bluesleep_sleep_wakeup();
+	}
+	spin_unlock(&rw_lock);
+}
+#endif
+
+
+static void bluesleep_outgoing_data(void)
+{
+	unsigned long irq_flags;
+	BT_SLEEP_DBG();
+	spin_lock_irqsave(&rw_lock, irq_flags);
+	/* log data passing by */
+	set_bit(BT_TXDATA, &flags);
+	/* if the tx side is sleeping... */
+	if (gpio_get_value(bsi->ext_wake) != bsi->bt_wake_polarity ||
+			gpio_get_value(bsi->host_wake) != bsi->host_wake_polarity) {
+		BT_SLEEP_DBG("tx was sleeping");
+		if (bluesleep_sleep_wakeup() == 1) {
+			BT_SLEEP_DBG("can't wakeup bt device!");
+		}
+	}
+	spin_unlock_irqrestore(&rw_lock, irq_flags);
+}
+
+static struct uart_port *bluesleep_get_uart_port(void)
+{
+	struct uart_port *uport = NULL;
+	BT_INFO("%s enter.", __func__);
+	if (bluesleep_uart_dev) {
+		uport = platform_get_drvdata(bluesleep_uart_dev);
+		BT_INFO("%s get uart_port from blusleep_uart_dev: %s",
+					__func__, bluesleep_uart_dev->name);
+	}
+	return uport;
+}
+
+#ifdef AW1732_BT
+static void bluesleep_tx_timer_expire(struct timer_list *t)
+{
+	unsigned long irq_flags;
+	spin_lock_irqsave(&rw_lock, irq_flags);
+	BT_SLEEP_DBG("Tx timer expired");
+	/* were we silent during the last timeout */
+	if (!test_bit(BT_ASLEEP, &flags) && !test_bit(BT_TXDATA, &flags)) {
+		BT_SLEEP_DBG("Tx has been idle");
+		bluesleep_tx_idle();
+	} else {
+		BT_SLEEP_DBG("Tx data during last period");
+	}
+
+	del_timer(&tx_timer);
+	/* clear the incoming data flag */
+	spin_unlock_irqrestore(&rw_lock, irq_flags);
+}
+
+
+static irqreturn_t bluesleep_hostwake_isr(int irq, void *dev_id)
+{
+	/* schedule a tasklet to handle the change in the host wake line */
+	tasklet_schedule(&hostwake_task);
+	__pm_stay_awake(bsi->ws);
+	return IRQ_HANDLED;
+}
+
+
+static int bluesleep_start(void)
+{
+	int retval;
+	unsigned long irq_flags;
+
+	spin_lock_irqsave(&rw_lock, irq_flags);
+	if (test_bit(BT_PROTO, &flags)) {
+		spin_unlock_irqrestore(&rw_lock, irq_flags);
+		return 0;
+	}
+	spin_unlock_irqrestore(&rw_lock, irq_flags);
+
+	if (!atomic_dec_and_test(&open_count)) {
+		atomic_inc(&open_count);
+		return -EBUSY;
+	}
+	/*wake up bt device ,initial irq service*/
+	gpio_set_value(bsi->ext_wake, bsi->bt_wake_polarity);
+	retval = request_irq(bsi->host_wake_irq, bluesleep_hostwake_isr,
+				bsi->host_wake_polarity ? IRQF_TRIGGER_RISING : IRQF_TRIGGER_FALLING,
+				"bluetooth hostwake", &bsi->pdev->dev);
+
+	if (retval  < 0) {
+		BT_ERR("Couldn't acquire BT_HOST_WAKE IRQ");
+		goto fail;
+	}
+
+	set_bit(BT_PROTO, &flags);
+	__pm_stay_awake(bsi->ws);
+
+	return 0;
+
+
+fail:
+	atomic_inc(&open_count);
+	return retval;
+}
+
+static void bluesleep_stop(void)
+{
+	unsigned long irq_flags;
+
+	spin_lock_irqsave(&rw_lock, irq_flags);
+
+	if (!test_bit(BT_PROTO, &flags)) {
+		spin_unlock_irqrestore(&rw_lock, irq_flags);
+		return;
+	}
+
+	clear_bit(BT_PROTO, &flags);
+	del_timer(&tx_timer);
+
+	if (test_bit(BT_ASLEEP, &flags)) {
+		clear_bit(BT_ASLEEP, &flags);
+		hsuart_power(1);
+	}
+
+	if (test_bit(BT_TXDATA, &flags)) {
+		clear_bit(BT_TXDATA, &flags);
+	}
+
+	atomic_inc(&open_count);
+	spin_unlock_irqrestore(&rw_lock, irq_flags);
+	free_irq(bsi->host_wake_irq, &bsi->pdev->dev);
+	__pm_wakeup_event(bsi->ws, jiffies_to_msecs(HZ * 5));
+}
+#endif
+
+
+#ifdef XRADIO_ETF_RFKILL
+extern void sunxi_bluetooth_set_power(bool on_off);
+
+static int bluetooth_pwr_proc_show(struct seq_file *m, void *v)
+{
+	seq_printf(m, "power state: %d\n", power_state_save);
+	return 0;
+}
+
+static int bluetooth_pwr_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, bluetooth_pwr_proc_show, NULL);
+}
+
+static ssize_t bluetooth_write_proc_pwr(struct file *file, const char __user *buffer,
+					size_t count, loff_t *pos)
+{
+	char b;
+
+	if (count < 1)
+		return -EINVAL;
+
+	if (copy_from_user(&b, buffer, 1))
+		return -EFAULT;
+
+	if (b == '0') {
+		BT_SLEEP_INF("bt power off");
+		//sunxi_bluetooth_set_power(false);
+		power_state_save = 0;
+	} else {
+		BT_SLEEP_INF("bt power on");
+		//sunxi_bluetooth_set_power(true);
+		power_state_save = 1;
+	}
+
+	return count;
+}
+#endif
+
+static int bluedroid_lpm_proc_show(struct seq_file *m, void *v)
+{
+	seq_printf(m, "lpm enable: %d\n", has_lpm_enabled);
+	return 0;
+}
+
+static int bluedroid_lpm_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, bluedroid_lpm_proc_show, NULL);
+}
+
+static ssize_t bluedroid_write_proc_lpm(struct file *file, const char __user *buffer,
+					size_t count, loff_t *pos)
+
+{
+	char b;
+
+	if (count < 1)
+		return -EINVAL;
+
+	if (copy_from_user(&b, buffer, 1))
+		return -EFAULT;
+
+#ifdef AW1732_BT
+	if (b == '0') {
+		has_lpm_enabled = false;
+		BT_SLEEP_DBG("disable lpm mode");
+		bluesleep_stop();
+		bsi->uport = NULL;
+	} else {
+		BT_SLEEP_DBG("enable lpm mode");
+		if (!has_lpm_enabled) {
+			has_lpm_enabled = true;
+			if (bluesleep_uart_dev)
+				bsi->uport = bluesleep_get_uart_port();
+			bluesleep_start();
+		}
+	}
+#else 	//work around for aw1722 wakeup bt before brom download
+	if (b == '0') {			//disable lpm mode
+		BT_SLEEP_DBG("disable lpm mode");
+		has_lpm_enabled = false;
+	} else {				//enable lpm mode
+		BT_SLEEP_DBG("enable lpm mode");
+		has_lpm_enabled = true;
+		if (bluesleep_uart_dev)
+			bsi->uport = bluesleep_get_uart_port();
+	}
+#endif
+
+	return count;
+}
+
+static int bluedroid_btwrite_proc_show(struct seq_file *m, void *v)
+{
+	seq_printf(m, "it's not support\n");
+	return 0;
+}
+
+static int bluedroid_btwrite_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, bluedroid_btwrite_proc_show, NULL);
+}
+
+static ssize_t bluedroid_write_proc_btwrite(struct file *file, const char __user *buffer,
+					size_t count, loff_t *pos)
+{
+	char b;
+
+	if (count < 1)
+		return -EINVAL;
+
+	if (copy_from_user(&b, buffer, 1))
+		return -EFAULT;
+
+	BT_SLEEP_DBG("bluedroid_write_proc_btwrite %c", b);
+	if (b == '1') {
+		mdelay(10);
+		set_bit(BT_TXDATA, &flags);
+		bluesleep_outgoing_data();
+		//start the timer when host receive event but reply no data or cmd send to fw
+		del_timer(&tx_timer);
+	} else if (b == '0') {
+		clear_bit(BT_TXDATA, &flags);
+		bluesleep_tx_idle();
+	}
+	return count;
+}
+
+static int bluedroid_btwake_proc_show(struct seq_file *m, void *v)
+{
+	seq_printf(m, "bt wake state:%d\n", gpio_get_value(bsi->ext_wake));
+	return 0;
+}
+
+static int bluedroid_btwake_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, bluedroid_btwake_proc_show, NULL);
+}
+
+static ssize_t bluedroid_write_proc_btwake(struct file *file, const char __user *buffer,
+					size_t count, loff_t *pos)
+{
+	char *buf;	if (count < 1)
+		return -EINVAL;
+
+	buf = kmalloc(count, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	if (copy_from_user(buf, buffer, count)) {
+		kfree(buf);
+		return -EFAULT;
+	}
+	BT_SLEEP_DBG("bluedroid_write_proc_btwake %c", buf[0]);
+	if (buf[0] == '0') {
+		BT_SLEEP_DBG("bt sleeping");
+		gpio_set_value(bsi->ext_wake, !bsi->bt_wake_polarity);
+	} else if (buf[0] == '1') {
+		BT_SLEEP_DBG("wakeup bt device");
+		gpio_set_value(bsi->ext_wake, bsi->bt_wake_polarity);
+	} else {
+		kfree(buf);
+		return -EINVAL;
+	}
+
+	kfree(buf);
+	return count;
+}
+
+#ifdef XRADIO_ETF_RFKILL
+static const struct file_operations pwr_fops = {
+	.owner		= THIS_MODULE,
+	.open		= bluetooth_pwr_proc_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+	.write		= bluetooth_write_proc_pwr,
+};
+#endif
+
+static const struct file_operations lpm_fops = {
+	.owner		= THIS_MODULE,
+	.open		= bluedroid_lpm_proc_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+	.write		= bluedroid_write_proc_lpm,
+};
+static const struct file_operations btwrite_fops = {
+	.owner		= THIS_MODULE,
+	.open		= bluedroid_btwrite_proc_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+	.write		= bluedroid_write_proc_btwrite,
+};
+static const struct file_operations btwake_fops = {
+	.owner		= THIS_MODULE,
+	.open		= bluedroid_btwake_proc_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+	.write		= bluedroid_write_proc_btwake,
+};
+
+static int assert_level = -1;
+module_param(assert_level, int, S_IRUGO);
+MODULE_PARM_DESC(assert_level, "BT_LPM hostwake/btwake assert level");
+
+static struct platform_device *sw_uart_get_pdev(int id)
+{
+	struct device_node *np;
+	char match[20];
+	sprintf(match, "uart%d", id);
+	np = of_find_node_by_type(NULL, match);
+	return of_find_device_by_node(np);
+}
+
+static int bluesleep_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct device *dev = &pdev->dev;
+	enum of_gpio_flags config;
+	int ret;
+	u32 val;
+
+	bsi = devm_kzalloc(&pdev->dev, sizeof(struct xr_btsleep_info), GFP_KERNEL);
+	if (!bsi)
+		return -ENOMEM;
+
+	//get bt_wake & bt_host_wake from sys_config.fex
+	bsi->ext_wake = of_get_named_gpio_flags(np, "bt_wake", 0, &config);
+	if (!gpio_is_valid(bsi->ext_wake)) {
+		BT_ERR("get gpio bt_wake failed");
+		return -EINVAL;
+	}
+
+	bsi->bt_wake_polarity = (config == OF_GPIO_ACTIVE_LOW) ? 0 : 1;
+	if (assert_level != -1) {
+		bsi->bt_wake_polarity = (assert_level & 0x01) > 0;
+		BT_SLEEP_DBG("override bt_wake polarity to %d", bsi->bt_wake_polarity);
+	}
+
+	BT_SLEEP_DBG("bt_wake polarity: %d", bsi->bt_wake_polarity);
+
+	ret = devm_gpio_request(dev, bsi->ext_wake, "bt_wake");
+	if (ret < 0) {
+		BT_ERR("can't request bt_wake gpio %d",
+			bsi->ext_wake);
+		goto exit;
+	}
+	ret = gpio_direction_output(bsi->ext_wake, bsi->bt_wake_polarity);
+	if (ret < 0) {
+		BT_ERR("can't request output direction bt_wake gpio %d",
+			bsi->ext_wake);
+		goto exit;
+	}
+
+	bsi->host_wake = of_get_named_gpio_flags(np, "bt_hostwake", 0, &config);
+	if (!gpio_is_valid(bsi->host_wake)) {
+		BT_ERR("get gpio bt_hostwake failed");
+		return -EINVAL;
+	}
+
+	bsi->host_wake_polarity = (config == OF_GPIO_ACTIVE_LOW) ? 0 : 1;
+	if (assert_level != -1) {
+		bsi->host_wake_polarity = (assert_level & 0x02) > 0;
+		BT_SLEEP_DBG("override host_wake polarity to %d", bsi->host_wake_polarity);
+	}
+
+	BT_SLEEP_DBG("host_wake polarity: %d", bsi->host_wake_polarity);
+
+	ret = devm_gpio_request(dev, bsi->host_wake, "bt_hostwake");
+	if (ret < 0) {
+		BT_ERR("can't request bt_hostwake gpio %d",
+			bsi->host_wake);
+		goto exit;
+	}
+	ret = gpio_direction_input(bsi->host_wake);
+	if (ret < 0) {
+		BT_ERR("can't request input direction bt_wake gpio %d",
+			bsi->host_wake);
+		goto exit;
+	}
+	if (!of_property_read_bool(np, "wakeup-source")) {
+		BT_SLEEP_DBG("wakeup source is disabled!\n");
+	} else {
+		ret = device_init_wakeup(dev, true);
+		if (ret < 0) {
+			BT_ERR("device init wakeup failed!\n");
+			return ret;
+		}
+		ret = dev_pm_set_wake_irq(dev, gpio_to_irq(bsi->host_wake));
+		if (ret < 0) {
+			BT_ERR("can't enable wakeup src for bt_hostwake %d\n",
+				bsi->host_wake);
+			return ret;
+		}
+		bsi->wakeup_enable = 1;
+	}
+	if (!of_property_read_u32(np, "uart_index", &val)) {
+		BT_SLEEP_DBG("uart_index(%u)", val);
+		bluesleep_uart_dev = sw_uart_get_pdev(val);
+	}
+
+	bsi->ws = wakeup_source_register(dev, "bluesleep");
+
+	//1.set bt_wake as output and the level is 0
+	gpio_set_value(bsi->ext_wake, 0);
+
+	//2.get bt_host_wake gpio irq
+#ifdef AW1732_BT
+	bsi->host_wake_irq = gpio_to_irq(bsi->host_wake);
+	if (bsi->host_wake_irq < 0) {
+		BT_ERR("map gpio [%d] to virq failed, errno = %d\n", bsi->host_wake, bsi->host_wake_irq);
+		ret = -ENODEV;
+		goto free_bt_ext_wake;
+	}
+#endif
+	bsi->pdev = pdev;
+
+	return 0;
+
+#ifdef AW1732_BT
+free_bt_ext_wake:
+	gpio_free(bsi->ext_wake);
+	gpio_free(bsi->host_wake);
+#endif
+
+exit:
+	return ret;
+}
+
+static int bluesleep_remove(struct platform_device *pdev)
+{
+	BT_SLEEP_DBG();
+	/* assert bt wake */
+	gpio_set_value(bsi->ext_wake, bsi->bt_wake_polarity);
+	if (test_bit(BT_PROTO, &flags)) {
+#ifdef AW1732_BT
+		free_irq(bsi->host_wake_irq, &bsi->pdev->dev);
+#endif
+		del_timer(&tx_timer);
+		if (test_bit(BT_ASLEEP, &flags))
+			hsuart_power(1);
+	}
+	gpio_free(bsi->host_wake);
+	gpio_free(bsi->ext_wake);
+	wakeup_source_unregister(bsi->ws);
+	if (bsi->wakeup_enable) {
+		BT_SLEEP_DBG("Deinit wakeup source");
+		device_init_wakeup(&pdev->dev, false);
+		dev_pm_clear_wake_irq(&pdev->dev);
+	}
+
+	return 0;
+}
+
+static int bluesleep_resume(struct platform_device *pdev)
+{
+	BT_SLEEP_DBG();
+	if (!has_lpm_enabled) {
+		return 0;
+	}
+#if 0   //fix bug for always wakeup
+	if (test_bit(BT_ASLEEP, &flags)) {
+		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL*HZ));
+	}
+	bluesleep_sleep_wakeup();
+#endif
+	return 0;
+}
+
+static int bluesleep_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	BT_SLEEP_DBG();
+	if (!has_lpm_enabled) {
+		return 0;
+	}
+	/*TXing DATA,if suspend will cause a error*/
+	if (test_bit(BT_TXDATA, &flags)) {
+		return -EBUSY;
+	}
+	del_timer(&tx_timer);
+	bluesleep_standby();
+	return 0;
+}
+
+
+static const struct of_device_id sunxi_btlpm_ids[] = {
+	{ .compatible = "allwinner,sunxi-btlpm" },
+	{ /* Sentinel */ }
+};
+
+static struct platform_driver bluesleep_driver = {
+	.probe = bluesleep_probe,
+	.remove = bluesleep_remove,
+	.suspend = bluesleep_suspend,
+	.resume = bluesleep_resume,
+	.driver = {
+		.owner = THIS_MODULE,
+		.name = "sunxi-btlpm",
+		.of_match_table	= sunxi_btlpm_ids,
+	},
+};
+
+static int __init btsleep_init(void)
+{
+	int retval;
+	struct proc_dir_entry *ent;
+
+	BT_INFO("XRadio Bluetooth LPM Mode Driver Ver %s", VERSION);
+
+	retval = platform_driver_probe(&bluesleep_driver, bluesleep_probe);
+	if (retval)
+		goto fail;
+
+	bluetooth_dir = proc_mkdir("bluetooth", NULL);
+	if (bluetooth_dir == NULL) {
+		BT_ERR("Unable to create /proc/bluetooth directory");
+		goto unreg_drv;
+	}
+	sleep_dir = proc_mkdir("sleep", bluetooth_dir);
+	if (sleep_dir == NULL) {
+		BT_ERR("Unable to create /proc/%s directory", PROC_SLEEP_DIR);
+		goto rm_bt_dir;
+	}
+
+#ifdef XRADIO_ETF_RFKILL
+	power_dir = proc_mkdir("power", bluetooth_dir);
+	if (power_dir == NULL) {
+		BT_ERR("Unable to create /proc/%s directory", PROC_POWER_DIR);
+		goto rm_bt_dir;
+	}
+	/* read/write proc entries */
+	ent = proc_create("state", 0220, power_dir, &pwr_fops);
+	if (ent == NULL) {
+		BT_ERR("Unable to create /proc/%s/state entry", PROC_POWER_DIR);
+		retval = -ENOMEM;
+		goto rm_power_dir;
+	}
+#endif
+
+	/* read/write proc entries */
+	ent = proc_create("lpm", 0220, sleep_dir, &lpm_fops);
+	if (ent == NULL) {
+		BT_ERR("Unable to create /proc/%s/lpm entry", PROC_SLEEP_DIR);
+		retval = -ENOMEM;
+		goto rm_sleep_dir;
+	}
+	ent = proc_create("btwrite", 0220, sleep_dir, &btwrite_fops);
+	if (ent == NULL) {
+		BT_ERR("Unable to create /proc/%s/btwrite entry", PROC_SLEEP_DIR);
+		retval = -ENOMEM;
+		goto rm_btwrite_dir;
+	}
+	ent = proc_create("btwake", 0220, sleep_dir, &btwake_fops);
+	if (ent == NULL) {
+		BT_ERR("Unable to create /proc/%s/btwrite entry", PROC_SLEEP_DIR);
+		retval = -ENOMEM;
+		goto rm_btwake_dir;
+	}
+
+#ifdef AW1732_BT
+	flags = 0;
+	/* Initialize spinlock. */
+	spin_lock_init(&rw_lock);
+	spin_lock_init(&irq_lock);
+	/* Initialize timer */
+	timer_setup(&tx_timer, bluesleep_tx_timer_expire, 0);
+	/* initialize host wake tasklet */
+	tasklet_init(&hostwake_task, bluesleep_hostwake_task, 0);
+#endif
+
+	return 0;
+
+rm_btwake_dir:
+	remove_proc_entry("btwake", sleep_dir);
+rm_btwrite_dir:
+	remove_proc_entry("btwrite", sleep_dir);
+rm_sleep_dir:
+	remove_proc_entry("sleep", bluetooth_dir);
+#ifdef XRADIO_ETF_RFKILL
+rm_power_dir:
+	remove_proc_entry("state", power_dir);
+	remove_proc_entry("power", bluetooth_dir);
+#endif
+rm_bt_dir:
+	remove_proc_entry("bluetooth", 0);
+unreg_drv:
+	platform_driver_unregister(&bluesleep_driver);
+fail:
+	return retval;
+}
+
+static void __exit btsleep_exit(void)
+{
+	platform_driver_unregister(&bluesleep_driver);
+
+	remove_proc_entry("btwake", sleep_dir);
+	remove_proc_entry("btwrite", sleep_dir);
+	remove_proc_entry("lpm", sleep_dir);
+	remove_proc_entry("sleep", bluetooth_dir);
+#ifdef XRADIO_ETF_RFKILL
+	remove_proc_entry("state", power_dir);
+	remove_proc_entry("power", bluetooth_dir);
+#endif
+	remove_proc_entry("bluetooth", 0);
+}
+
+module_init(btsleep_init);
+module_exit(btsleep_exit);
+MODULE_AUTHOR("XRadioTech");
+MODULE_DESCRIPTION("Bluetooth Sleep Mode Driver ver. %s" VERSION);
+MODULE_LICENSE("GPL");
-- 
2.17.1

