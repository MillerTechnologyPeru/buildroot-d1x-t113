From f7f915262e9c7a7ab36f67134c5a8f3fbd878a51 Mon Sep 17 00:00:00 2001
From: YuzukiTsuru <gloomyghost@gloomyghost.com>
Date: Fri, 25 Mar 2022 17:25:01 +0800
Subject: [PATCH 86/93] add sunxi pinctrl

---
 drivers/pinctrl/core.c                        |    7 +
 drivers/pinctrl/pinconf-generic.c             |    1 +
 drivers/pinctrl/qcom/Kconfig                  |    8 +-
 drivers/pinctrl/qcom/pinctrl-msm.c            |  121 ++
 drivers/pinctrl/qcom/pinctrl-msm.h            |   16 +
 drivers/pinctrl/sprd/Kconfig                  |   10 +-
 drivers/pinctrl/sprd/pinctrl-sprd.c           |   48 +-
 drivers/pinctrl/sunxi/Kconfig                 |   79 +-
 drivers/pinctrl/sunxi/Makefile                |   21 +-
 drivers/pinctrl/sunxi/pinctrl-debugfs.c       |  649 ++++++
 drivers/pinctrl/sunxi/pinctrl-sun50i-a100-r.c |  105 +
 drivers/pinctrl/sunxi/pinctrl-sun50i-a100.c   |  708 +++++++
 drivers/pinctrl/sunxi/pinctrl-sun50iw10p1-r.c |  130 ++
 drivers/pinctrl/sunxi/pinctrl-sun50iw10p1.c   | 1314 ++++++++++++
 drivers/pinctrl/sunxi/pinctrl-sun50iw12-r.c   |  110 +
 drivers/pinctrl/sunxi/pinctrl-sun50iw12.c     |  967 +++++++++
 drivers/pinctrl/sunxi/pinctrl-sun50iw9-r.c    |   57 +
 drivers/pinctrl/sunxi/pinctrl-sun50iw9.c      |  991 +++++++++
 drivers/pinctrl/sunxi/pinctrl-sun55iw3-r.c    |   58 +
 drivers/pinctrl/sunxi/pinctrl-sun55iw3.c      |  968 +++++++++
 drivers/pinctrl/sunxi/pinctrl-sun8iw15p1-r.c  |  145 ++
 drivers/pinctrl/sunxi/pinctrl-sun8iw15p1.c    |  859 ++++++++
 drivers/pinctrl/sunxi/pinctrl-sun8iw20.c      | 1307 ++++++++++++
 drivers/pinctrl/sunxi/pinctrl-sunxi-test.c    | 1780 +++++++++++++++++
 drivers/pinctrl/sunxi/pinctrl-sunxi.c         |  403 +++-
 drivers/pinctrl/sunxi/pinctrl-sunxi.h         |  101 +-
 26 files changed, 10825 insertions(+), 138 deletions(-)
 create mode 100644 drivers/pinctrl/sunxi/pinctrl-debugfs.c
 create mode 100644 drivers/pinctrl/sunxi/pinctrl-sun50i-a100-r.c
 create mode 100644 drivers/pinctrl/sunxi/pinctrl-sun50i-a100.c
 create mode 100644 drivers/pinctrl/sunxi/pinctrl-sun50iw10p1-r.c
 create mode 100644 drivers/pinctrl/sunxi/pinctrl-sun50iw10p1.c
 create mode 100644 drivers/pinctrl/sunxi/pinctrl-sun50iw12-r.c
 create mode 100644 drivers/pinctrl/sunxi/pinctrl-sun50iw12.c
 create mode 100644 drivers/pinctrl/sunxi/pinctrl-sun50iw9-r.c
 create mode 100644 drivers/pinctrl/sunxi/pinctrl-sun50iw9.c
 create mode 100644 drivers/pinctrl/sunxi/pinctrl-sun55iw3-r.c
 create mode 100644 drivers/pinctrl/sunxi/pinctrl-sun55iw3.c
 create mode 100644 drivers/pinctrl/sunxi/pinctrl-sun8iw15p1-r.c
 create mode 100644 drivers/pinctrl/sunxi/pinctrl-sun8iw15p1.c
 create mode 100644 drivers/pinctrl/sunxi/pinctrl-sun8iw20.c
 create mode 100644 drivers/pinctrl/sunxi/pinctrl-sunxi-test.c

diff --git a/drivers/pinctrl/core.c b/drivers/pinctrl/core.c
index 6381745e3..6bdf20d57 100644
--- a/drivers/pinctrl/core.c
+++ b/drivers/pinctrl/core.c
@@ -117,6 +117,9 @@ struct pinctrl_dev *get_pinctrl_dev_from_devname(const char *devname)
 
 	return NULL;
 }
+#if IS_ENABLED(CONFIG_PINCTRL_SUNXI_DEBUGFS)
+EXPORT_SYMBOL_GPL(get_pinctrl_dev_from_devname);
+#endif
 
 struct pinctrl_dev *get_pinctrl_dev_from_of_node(struct device_node *np)
 {
@@ -157,6 +160,9 @@ int pin_get_from_name(struct pinctrl_dev *pctldev, const char *name)
 
 	return -EINVAL;
 }
+#if IS_ENABLED(CONFIG_PINCTRL_SUNXI_DEBUGFS)
+EXPORT_SYMBOL_GPL(pin_get_from_name);
+#endif
 
 /**
  * pin_get_name_from_id() - look up a pin name from a pin id
@@ -176,6 +182,7 @@ const char *pin_get_name(struct pinctrl_dev *pctldev, const unsigned pin)
 
 	return desc->name;
 }
+EXPORT_SYMBOL_GPL(pin_get_name);
 
 /* Deletes a range of pin descriptors */
 static void pinctrl_free_pindescs(struct pinctrl_dev *pctldev,
diff --git a/drivers/pinctrl/pinconf-generic.c b/drivers/pinctrl/pinconf-generic.c
index 9eb86309c..dfef47120 100644
--- a/drivers/pinctrl/pinconf-generic.c
+++ b/drivers/pinctrl/pinconf-generic.c
@@ -286,6 +286,7 @@ int pinconf_generic_parse_dt_config(struct device_node *np,
 	kfree(cfg);
 	return ret;
 }
+EXPORT_SYMBOL_GPL(pinconf_generic_parse_dt_config);
 
 int pinconf_generic_dt_subnode_to_map(struct pinctrl_dev *pctldev,
 		struct device_node *np, struct pinctrl_map **map,
diff --git a/drivers/pinctrl/qcom/Kconfig b/drivers/pinctrl/qcom/Kconfig
index 32fc2458b..2377a718d 100644
--- a/drivers/pinctrl/qcom/Kconfig
+++ b/drivers/pinctrl/qcom/Kconfig
@@ -2,11 +2,17 @@
 if (ARCH_QCOM || COMPILE_TEST)
 
 config PINCTRL_MSM
-	bool
+	tristate "Qualcomm generic pin controller driver"
 	select PINMUX
 	select PINCONF
 	select GENERIC_PINCONF
 	select GPIOLIB_IRQCHIP
+	help
+          This is Qualcomm Technologies, Inc msm platform TLMM
+	  generic driver. This provides interfaces to chipset specific
+	  clients drivers use the TLMM block.
+	  Say yes here to enable Qualcomm TLMM driver.
+
 
 config PINCTRL_APQ8064
 	tristate "Qualcomm APQ8064 pin controller driver"
diff --git a/drivers/pinctrl/qcom/pinctrl-msm.c b/drivers/pinctrl/qcom/pinctrl-msm.c
index 443203220..2a12c3a45 100644
--- a/drivers/pinctrl/qcom/pinctrl-msm.c
+++ b/drivers/pinctrl/qcom/pinctrl-msm.c
@@ -23,6 +23,8 @@
 #include <linux/pm.h>
 #include <linux/log2.h>
 
+#include <linux/soc/qcom/irq.h>
+
 #include "../core.h"
 #include "../pinconf.h"
 #include "pinctrl-msm.h"
@@ -44,6 +46,7 @@
  * @enabled_irqs:   Bitmap of currently enabled irqs.
  * @dual_edge_irqs: Bitmap of irqs that need sw emulated dual edge
  *                  detection.
+ * @skip_wake_irqs: Skip IRQs that are handled by wakeup interrupt contrroller
  * @soc;            Reference to soc_data of platform specific data.
  * @regs:           Base addresses for the TLMM tiles.
  */
@@ -61,6 +64,7 @@ struct msm_pinctrl {
 
 	DECLARE_BITMAP(dual_edge_irqs, MAX_NR_GPIO);
 	DECLARE_BITMAP(enabled_irqs, MAX_NR_GPIO);
+	DECLARE_BITMAP(skip_wake_irqs, MAX_NR_GPIO);
 
 	const struct msm_pinctrl_soc_data *soc;
 	void __iomem *regs[MAX_NR_TILES];
@@ -707,6 +711,12 @@ static void msm_gpio_irq_mask(struct irq_data *d)
 	unsigned long flags;
 	u32 val;
 
+	if (d->parent_data)
+		irq_chip_mask_parent(d);
+
+	if (test_bit(d->hwirq, pctrl->skip_wake_irqs))
+		return;
+
 	g = &pctrl->soc->groups[d->hwirq];
 
 	raw_spin_lock_irqsave(&pctrl->lock, flags);
@@ -751,6 +761,12 @@ static void msm_gpio_irq_clear_unmask(struct irq_data *d, bool status_clear)
 	unsigned long flags;
 	u32 val;
 
+	if (d->parent_data)
+		irq_chip_unmask_parent(d);
+
+	if (test_bit(d->hwirq, pctrl->skip_wake_irqs))
+		return;
+
 	g = &pctrl->soc->groups[d->hwirq];
 
 	raw_spin_lock_irqsave(&pctrl->lock, flags);
@@ -778,10 +794,37 @@ static void msm_gpio_irq_clear_unmask(struct irq_data *d, bool status_clear)
 
 static void msm_gpio_irq_enable(struct irq_data *d)
 {
+	/*
+	 * Clear the interrupt that may be pending before we enable
+	 * the line.
+	 * This is especially a problem with the GPIOs routed to the
+	 * PDC. These GPIOs are direct-connect interrupts to the GIC.
+	 * Disabling the interrupt line at the PDC does not prevent
+	 * the interrupt from being latched at the GIC. The state at
+	 * GIC needs to be cleared before enabling.
+	 */
+	if (d->parent_data) {
+		irq_chip_set_parent_state(d, IRQCHIP_STATE_PENDING, 0);
+		irq_chip_enable_parent(d);
+	}
 
 	msm_gpio_irq_clear_unmask(d, true);
 }
 
+static void msm_gpio_irq_disable(struct irq_data *d)
+{
+	struct gpio_chip *gc = irq_data_get_irq_chip_data(d);
+	struct msm_pinctrl *pctrl = gpiochip_get_data(gc);
+
+	if (d->parent_data)
+		irq_chip_disable_parent(d);
+
+	if (test_bit(d->hwirq, pctrl->skip_wake_irqs))
+		return;
+
+	msm_gpio_irq_mask(d);
+}
+
 static void msm_gpio_irq_unmask(struct irq_data *d)
 {
 	msm_gpio_irq_clear_unmask(d, false);
@@ -795,6 +838,9 @@ static void msm_gpio_irq_ack(struct irq_data *d)
 	unsigned long flags;
 	u32 val;
 
+	if (test_bit(d->hwirq, pctrl->skip_wake_irqs))
+		return;
+
 	g = &pctrl->soc->groups[d->hwirq];
 
 	raw_spin_lock_irqsave(&pctrl->lock, flags);
@@ -820,6 +866,12 @@ static int msm_gpio_irq_set_type(struct irq_data *d, unsigned int type)
 	unsigned long flags;
 	u32 val;
 
+	if (d->parent_data)
+		irq_chip_set_type_parent(d, type);
+
+	if (test_bit(d->hwirq, pctrl->skip_wake_irqs))
+		return 0;
+
 	g = &pctrl->soc->groups[d->hwirq];
 
 	raw_spin_lock_irqsave(&pctrl->lock, flags);
@@ -912,6 +964,15 @@ static int msm_gpio_irq_set_wake(struct irq_data *d, unsigned int on)
 	struct msm_pinctrl *pctrl = gpiochip_get_data(gc);
 	unsigned long flags;
 
+	if (d->parent_data)
+		irq_chip_set_wake_parent(d, on);
+
+	/*
+	 * While they may not wake up when the TLMM is powered off,
+	 * some GPIOs would like to wakeup the system from suspend
+	 * when TLMM is powered on. To allow that, enable the GPIO
+	 * summary line to be wakeup capable at GIC.
+	 */
 	raw_spin_lock_irqsave(&pctrl->lock, flags);
 
 	irq_set_irq_wake(pctrl->irq, on);
@@ -990,6 +1051,30 @@ static void msm_gpio_irq_handler(struct irq_desc *desc)
 	chained_irq_exit(chip, desc);
 }
 
+static int msm_gpio_wakeirq(struct gpio_chip *gc,
+			    unsigned int child,
+			    unsigned int child_type,
+			    unsigned int *parent,
+			    unsigned int *parent_type)
+{
+	struct msm_pinctrl *pctrl = gpiochip_get_data(gc);
+	const struct msm_gpio_wakeirq_map *map;
+	int i;
+
+	*parent = GPIO_NO_WAKE_IRQ;
+	*parent_type = IRQ_TYPE_EDGE_RISING;
+
+	for (i = 0; i < pctrl->soc->nwakeirq_map; i++) {
+		map = &pctrl->soc->wakeirq_map[i];
+		if (map->gpio == child) {
+			*parent = map->wakeirq;
+			break;
+		}
+	}
+
+	return 0;
+}
+
 static bool msm_gpio_needs_valid_mask(struct msm_pinctrl *pctrl)
 {
 	if (pctrl->soc->reserved_gpios)
@@ -1004,6 +1089,7 @@ static int msm_gpio_init(struct msm_pinctrl *pctrl)
 	struct gpio_irq_chip *girq;
 	int ret;
 	unsigned ngpio = pctrl->soc->ngpios;
+	struct device_node *dn;
 
 	if (WARN_ON(ngpio > MAX_NR_GPIO))
 		return -EINVAL;
@@ -1020,17 +1106,40 @@ static int msm_gpio_init(struct msm_pinctrl *pctrl)
 
 	pctrl->irq_chip.name = "msmgpio";
 	pctrl->irq_chip.irq_enable = msm_gpio_irq_enable;
+	pctrl->irq_chip.irq_disable = msm_gpio_irq_disable;
 	pctrl->irq_chip.irq_mask = msm_gpio_irq_mask;
 	pctrl->irq_chip.irq_unmask = msm_gpio_irq_unmask;
 	pctrl->irq_chip.irq_ack = msm_gpio_irq_ack;
+	pctrl->irq_chip.irq_eoi = irq_chip_eoi_parent;
 	pctrl->irq_chip.irq_set_type = msm_gpio_irq_set_type;
 	pctrl->irq_chip.irq_set_wake = msm_gpio_irq_set_wake;
 	pctrl->irq_chip.irq_request_resources = msm_gpio_irq_reqres;
 	pctrl->irq_chip.irq_release_resources = msm_gpio_irq_relres;
 
+	dn = of_parse_phandle(pctrl->dev->of_node, "wakeup-parent", 0);
+	if (dn) {
+		int i;
+		bool skip;
+		unsigned int gpio;
+
+		chip->irq.parent_domain = irq_find_matching_host(dn,
+						 DOMAIN_BUS_WAKEUP);
+		of_node_put(dn);
+		if (!chip->irq.parent_domain)
+			return -EPROBE_DEFER;
+		chip->irq.child_to_parent_hwirq = msm_gpio_wakeirq;
+
+		skip = irq_domain_qcom_handle_wakeup(chip->irq.parent_domain);
+		for (i = 0; skip && i < pctrl->soc->nwakeirq_map; i++) {
+			gpio = pctrl->soc->wakeirq_map[i].gpio;
+			set_bit(gpio, pctrl->skip_wake_irqs);
+		}
+	}
+
 	girq = &chip->irq;
 	girq->chip = &pctrl->irq_chip;
 	girq->parent_handler = msm_gpio_irq_handler;
+	girq->fwnode = pctrl->dev->fwnode;
 	girq->num_parents = 1;
 	girq->parents = devm_kcalloc(pctrl->dev, 1, sizeof(*girq->parents),
 				     GFP_KERNEL);
@@ -1066,6 +1175,16 @@ static int msm_gpio_init(struct msm_pinctrl *pctrl)
 		}
 	}
 
+	/*
+	 * Since we are chained to the GIC using the TLMM summary line
+	 * and in hierarchy with the wakeup parent interrupt controller,
+	 * explicitly set the chained summary line. We need to do this because
+	 * the summary line is not routed to the wakeup parent but directly
+	 * to the GIC.
+	 */
+	gpiochip_set_chained_irqchip(chip, &pctrl->irq_chip, pctrl->irq,
+				     msm_gpio_irq_handler);
+
 	return 0;
 }
 
@@ -1200,3 +1319,5 @@ int msm_pinctrl_remove(struct platform_device *pdev)
 }
 EXPORT_SYMBOL(msm_pinctrl_remove);
 
+MODULE_DESCRIPTION("Qualcomm Technologies, Inc. pinctrl-msm driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/pinctrl/qcom/pinctrl-msm.h b/drivers/pinctrl/qcom/pinctrl-msm.h
index 48569cda8..15470203b 100644
--- a/drivers/pinctrl/qcom/pinctrl-msm.h
+++ b/drivers/pinctrl/qcom/pinctrl-msm.h
@@ -5,6 +5,8 @@
 #ifndef __PINCTRL_MSM_H__
 #define __PINCTRL_MSM_H__
 
+#include <linux/gpio/driver.h>
+
 struct pinctrl_pin_desc;
 
 /**
@@ -91,6 +93,16 @@ struct msm_pingroup {
 	unsigned intr_detection_width:5;
 };
 
+/**
+ * struct msm_gpio_wakeirq_map - Map of GPIOs and their wakeup pins
+ * @gpio:          The GPIOs that are wakeup capable
+ * @wakeirq:       The interrupt at the always-on interrupt controller
+ */
+struct msm_gpio_wakeirq_map {
+	unsigned int gpio;
+	unsigned int wakeirq;
+};
+
 /**
  * struct msm_pinctrl_soc_data - Qualcomm pin controller driver configuration
  * @pins:	    An array describing all pins the pin controller affects.
@@ -101,6 +113,8 @@ struct msm_pingroup {
  * @ngroups:	    The numbmer of entries in @groups.
  * @ngpio:	    The number of pingroups the driver should expose as GPIOs.
  * @pull_no_keeper: The SoC does not support keeper bias.
+ * @wakeirq_map:    The map of wakeup capable GPIOs and the pin at PDC/MPM
+ * @nwakeirq_map:   The number of entries in @hierarchy_map
  */
 struct msm_pinctrl_soc_data {
 	const struct pinctrl_pin_desc *pins;
@@ -114,6 +128,8 @@ struct msm_pinctrl_soc_data {
 	const char *const *tiles;
 	unsigned int ntiles;
 	const int *reserved_gpios;
+	const struct msm_gpio_wakeirq_map *wakeirq_map;
+	unsigned int nwakeirq_map;
 };
 
 extern const struct dev_pm_ops msm_pinctrl_dev_pm_ops;
diff --git a/drivers/pinctrl/sprd/Kconfig b/drivers/pinctrl/sprd/Kconfig
index b6c5479b5..eef35d01b 100644
--- a/drivers/pinctrl/sprd/Kconfig
+++ b/drivers/pinctrl/sprd/Kconfig
@@ -4,9 +4,7 @@
 #
 
 config PINCTRL_SPRD
-	bool "Spreadtrum pinctrl driver"
-	depends on OF
-	depends on ARCH_SPRD || COMPILE_TEST
+	tristate
 	select PINMUX
 	select PINCONF
 	select GENERIC_PINCONF
@@ -15,7 +13,9 @@ config PINCTRL_SPRD
 	  Say Y here to enable Spreadtrum pinctrl driver
 
 config PINCTRL_SPRD_SC9860
-	bool "Spreadtrum SC9860 pinctrl driver"
-	depends on PINCTRL_SPRD
+	tristate "Spreadtrum SC9860 pinctrl driver"
+	depends on OF
+	depends on ARCH_SPRD || COMPILE_TEST
+	select PINCTRL_SPRD
 	help
 	  Say Y here to enable Spreadtrum SC9860 pinctrl driver
diff --git a/drivers/pinctrl/sprd/pinctrl-sprd.c b/drivers/pinctrl/sprd/pinctrl-sprd.c
index 7b95bf5a8..48cbf2a28 100644
--- a/drivers/pinctrl/sprd/pinctrl-sprd.c
+++ b/drivers/pinctrl/sprd/pinctrl-sprd.c
@@ -41,7 +41,8 @@
 #define PUBCP_SLEEP_MODE		BIT(14)
 #define TGLDSP_SLEEP_MODE		BIT(15)
 #define AGDSP_SLEEP_MODE		BIT(16)
-#define SLEEP_MODE_MASK			GENMASK(3, 0)
+#define CM4_SLEEP_MODE			BIT(17)
+#define SLEEP_MODE_MASK			GENMASK(5, 0)
 #define SLEEP_MODE_SHIFT		13
 
 #define SLEEP_INPUT			BIT(1)
@@ -81,6 +82,7 @@ enum pin_sleep_mode {
 	PUBCP_SLEEP = BIT(1),
 	TGLDSP_SLEEP = BIT(2),
 	AGDSP_SLEEP = BIT(3),
+	CM4_SLEEP = BIT(4),
 };
 
 enum pin_func_sel {
@@ -462,9 +464,15 @@ static int sprd_pinconf_get(struct pinctrl_dev *pctldev, unsigned int pin_id,
 		case PIN_CONFIG_INPUT_ENABLE:
 			arg = (reg >> SLEEP_INPUT_SHIFT) & SLEEP_INPUT_MASK;
 			break;
-		case PIN_CONFIG_OUTPUT:
+		case PIN_CONFIG_OUTPUT_ENABLE:
 			arg = reg & SLEEP_OUTPUT_MASK;
 			break;
+		case PIN_CONFIG_BIAS_HIGH_IMPEDANCE:
+			if ((reg & SLEEP_OUTPUT) || (reg & SLEEP_INPUT))
+				return -EINVAL;
+
+			arg = 1;
+			break;
 		case PIN_CONFIG_DRIVE_STRENGTH:
 			arg = (reg >> DRIVE_STRENGTH_SHIFT) &
 				DRIVE_STRENGTH_MASK;
@@ -484,6 +492,13 @@ static int sprd_pinconf_get(struct pinctrl_dev *pctldev, unsigned int pin_id,
 			       SLEEP_PULL_UP_MASK) << 16;
 			arg |= (reg >> PULL_UP_SHIFT) & PULL_UP_MASK;
 			break;
+		case PIN_CONFIG_BIAS_DISABLE:
+			if ((reg & (SLEEP_PULL_DOWN | SLEEP_PULL_UP)) ||
+			    (reg & (PULL_DOWN | PULL_UP_4_7K | PULL_UP_20K)))
+				return -EINVAL;
+
+			arg = 1;
+			break;
 		case PIN_CONFIG_SLEEP_HARDWARE_STATE:
 			arg = 0;
 			break;
@@ -609,6 +624,8 @@ static int sprd_pinconf_set(struct pinctrl_dev *pctldev, unsigned int pin_id,
 					val |= TGLDSP_SLEEP_MODE;
 				if (arg & AGDSP_SLEEP)
 					val |= AGDSP_SLEEP_MODE;
+				if (arg & CM4_SLEEP)
+					val |= CM4_SLEEP_MODE;
 
 				mask = SLEEP_MODE_MASK;
 				shift = SLEEP_MODE_SHIFT;
@@ -624,13 +641,23 @@ static int sprd_pinconf_set(struct pinctrl_dev *pctldev, unsigned int pin_id,
 					shift = SLEEP_INPUT_SHIFT;
 				}
 				break;
-			case PIN_CONFIG_OUTPUT:
+			case PIN_CONFIG_OUTPUT_ENABLE:
 				if (is_sleep_config == true) {
-					val |= SLEEP_OUTPUT;
+					if (arg > 0)
+						val |= SLEEP_OUTPUT;
+					else
+						val &= ~SLEEP_OUTPUT;
+
 					mask = SLEEP_OUTPUT_MASK;
 					shift = SLEEP_OUTPUT_SHIFT;
 				}
 				break;
+			case PIN_CONFIG_BIAS_HIGH_IMPEDANCE:
+				if (is_sleep_config == true) {
+					val = shift = 0;
+					mask = SLEEP_OUTPUT | SLEEP_INPUT;
+				}
+				break;
 			case PIN_CONFIG_DRIVE_STRENGTH:
 				if (arg < 2 || arg > 60)
 					return -EINVAL;
@@ -674,6 +701,16 @@ static int sprd_pinconf_set(struct pinctrl_dev *pctldev, unsigned int pin_id,
 					shift = PULL_UP_SHIFT;
 				}
 				break;
+			case PIN_CONFIG_BIAS_DISABLE:
+				if (is_sleep_config == true) {
+					val = shift = 0;
+					mask = SLEEP_PULL_DOWN | SLEEP_PULL_UP;
+				} else {
+					val = shift = 0;
+					mask = PULL_DOWN | PULL_UP_20K |
+						PULL_UP_4_7K;
+				}
+				break;
 			case PIN_CONFIG_SLEEP_HARDWARE_STATE:
 				continue;
 			default:
@@ -1069,6 +1106,7 @@ int sprd_pinctrl_core_probe(struct platform_device *pdev,
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(sprd_pinctrl_core_probe);
 
 int sprd_pinctrl_remove(struct platform_device *pdev)
 {
@@ -1077,6 +1115,7 @@ int sprd_pinctrl_remove(struct platform_device *pdev)
 	pinctrl_unregister(sprd_pctl->pctl);
 	return 0;
 }
+EXPORT_SYMBOL_GPL(sprd_pinctrl_remove);
 
 void sprd_pinctrl_shutdown(struct platform_device *pdev)
 {
@@ -1091,6 +1130,7 @@ void sprd_pinctrl_shutdown(struct platform_device *pdev)
 		return;
 	pinctrl_select_state(pinctl, state);
 }
+EXPORT_SYMBOL_GPL(sprd_pinctrl_shutdown);
 
 MODULE_DESCRIPTION("SPREADTRUM Pin Controller Driver");
 MODULE_AUTHOR("Baolin Wang <baolin.wang@spreadtrum.com>");
diff --git a/drivers/pinctrl/sunxi/Kconfig b/drivers/pinctrl/sunxi/Kconfig
index f7aae200e..b0cbb1083 100644
--- a/drivers/pinctrl/sunxi/Kconfig
+++ b/drivers/pinctrl/sunxi/Kconfig
@@ -1,11 +1,77 @@
 # SPDX-License-Identifier: GPL-2.0-only
 if ARCH_SUNXI
+menu "Allwinner SOC PINCTRL DRIVER"
 
 config PINCTRL_SUNXI
-	bool
+	tristate "Sunxi Pinctrl core driver"
 	select PINMUX
 	select GENERIC_PINCONF
 	select GPIOLIB
+	default y
+
+config PINCTRL_SUNXI_DEBUGFS
+	tristate "pinctrl sunxi debugfs driver"
+	depends on PINCTRL_SUNXI && DEBUG_FS
+	default n
+
+config PINCTRL_SUNXI_TEST
+	tristate "pinctrl sunxi test driver"
+	default n
+
+config PINCTRL_SUN8IW15P1
+	tristate "Pinctrl sun8iw15p1 PIO controller"
+	select PINCTRL_SUNXI
+	default ARCH_SUN8IW15
+
+config PINCTRL_SUN8IW15P1_R
+	tristate "Pinctrl sun8iw15p1 R_PIO controller"
+	select PINCTRL_SUNXI
+	default ARCH_SUN8IW15
+
+config PINCTRL_SUN8IW20
+	tristate "Pinctrl sun8iw20 PIO controller"
+	select PINCTRL_SUNXI
+	default ARCH_SUN8IW20 || ARCH_SUN20IW1
+
+config PINCTRL_SUN50IW9
+	tristate "Support for the Allwinner sun50iw9 PIO"
+	select PINCTRL_SUNXI
+	default ARCH_SUN50IW9
+
+config PINCTRL_SUN50IW9_R
+	tristate "Support for the Allwinner sun50iw9 R-PIO"
+	select PINCTRL_SUNXI
+	default ARCH_SUN50IW9
+
+config PINCTRL_SUN50IW10P1
+	tristate "Pinctrl sun50iw10p1 PIO controller"
+	select PINCTRL_SUNXI
+	default ARCH_SUN50IW10
+
+config PINCTRL_SUN50IW10P1_R
+	tristate "Pinctrl sun50iw10p1 R_PIO controller"
+	select PINCTRL_SUNXI
+	default ARCH_SUN50IW10
+
+config PINCTRL_SUN50IW12
+	tristate "Pinctrl sun50iw12 PIO controller"
+	select PINCTRL_SUNXI
+	default ARCH_SUN50IW12
+
+config PINCTRL_SUN50IW12_R
+	tristate "Pinctrl sun50iw12 R_PIO controller"
+	select PINCTRL_SUNXI
+	default ARCH_SUN50IW12
+
+config PINCTRL_SUN55IW3
+	tristate "Pinctrl sun55iw3 PIO controller"
+	select PINCTRL_SUNXI
+	default ARCH_SUN55IW3
+
+config PINCTRL_SUN55IW3_R
+	tristate "Pinctrl sun55iw3 R_PIO controller"
+	select PINCTRL_SUNXI
+	default ARCH_SUN55IW3
 
 config PINCTRL_SUNIV_F1C100S
 	def_bool MACH_SUNIV
@@ -94,6 +160,16 @@ config PINCTRL_SUN50I_A64_R
 	default ARM64 && ARCH_SUNXI
 	select PINCTRL_SUNXI
 
+config PINCTRL_SUN50I_A100
+	bool "Support for the Allwinner A100 PIO"
+	default ARM64 && ARCH_SUNXI
+	select PINCTRL_SUNXI
+
+config PINCTRL_SUN50I_A100_R
+	bool "Support for the Allwinner A100 R-PIO"
+	default ARM64 && ARCH_SUNXI
+	select PINCTRL_SUNXI
+
 config PINCTRL_SUN50I_H5
 	bool "Support for the Allwinner H5 PIO"
 	default ARM64 && ARCH_SUNXI
@@ -109,4 +185,5 @@ config PINCTRL_SUN50I_H6_R
 	default ARM64 && ARCH_SUNXI
 	select PINCTRL_SUNXI
 
+endmenu
 endif
diff --git a/drivers/pinctrl/sunxi/Makefile b/drivers/pinctrl/sunxi/Makefile
index fafcdae81..dadbf2148 100644
--- a/drivers/pinctrl/sunxi/Makefile
+++ b/drivers/pinctrl/sunxi/Makefile
@@ -1,8 +1,21 @@
 # SPDX-License-Identifier: GPL-2.0
 # Core
-obj-y					+= pinctrl-sunxi.o
-
-# SoC Drivers
+obj-$(CONFIG_PINCTRL_SUNXI)		+= pinctrl-sunxi.o
+obj-$(CONFIG_PINCTRL_SUNXI_DEBUGFS)	+= pinctrl-debugfs.o
+# Private SoC Drivers
+obj-$(CONFIG_PINCTRL_SUNXI_TEST)	+= pinctrl-sunxi-test.o
+obj-$(CONFIG_PINCTRL_SUN8IW15P1)	+= pinctrl-sun8iw15p1.o
+obj-$(CONFIG_PINCTRL_SUN8IW15P1_R)	+= pinctrl-sun8iw15p1-r.o
+obj-$(CONFIG_PINCTRL_SUN8IW20)		+= pinctrl-sun8iw20.o
+obj-$(CONFIG_PINCTRL_SUN50IW9)		+= pinctrl-sun50iw9.o
+obj-$(CONFIG_PINCTRL_SUN50IW9_R)	+= pinctrl-sun50iw9-r.o
+obj-$(CONFIG_PINCTRL_SUN50IW10P1)	+= pinctrl-sun50iw10p1.o
+obj-$(CONFIG_PINCTRL_SUN50IW10P1_R)	+= pinctrl-sun50iw10p1-r.o
+obj-$(CONFIG_PINCTRL_SUN50IW12)		+= pinctrl-sun50iw12.o
+obj-$(CONFIG_PINCTRL_SUN50IW12_R)	+= pinctrl-sun50iw12-r.o
+obj-$(CONFIG_PINCTRL_SUN55IW3)		+= pinctrl-sun55iw3.o
+#obj-$(CONFIG_PINCTRL_SUN55IW3_R)	+= pinctrl-sun55iw3-r.o
+# Mainline SoC Drivers
 obj-$(CONFIG_PINCTRL_SUNIV_F1C100S)	+= pinctrl-suniv-f1c100s.o
 obj-$(CONFIG_PINCTRL_SUN4I_A10)		+= pinctrl-sun4i-a10.o
 obj-$(CONFIG_PINCTRL_SUN5I)		+= pinctrl-sun5i.o
@@ -13,6 +26,8 @@ obj-$(CONFIG_PINCTRL_SUN8I_A23_R)	+= pinctrl-sun8i-a23-r.o
 obj-$(CONFIG_PINCTRL_SUN8I_A33)		+= pinctrl-sun8i-a33.o
 obj-$(CONFIG_PINCTRL_SUN50I_A64)	+= pinctrl-sun50i-a64.o
 obj-$(CONFIG_PINCTRL_SUN50I_A64_R)	+= pinctrl-sun50i-a64-r.o
+obj-$(CONFIG_PINCTRL_SUN50I_A100)	+= pinctrl-sun50i-a100.o
+obj-$(CONFIG_PINCTRL_SUN50I_A100_R)	+= pinctrl-sun50i-a100-r.o
 obj-$(CONFIG_PINCTRL_SUN8I_A83T)	+= pinctrl-sun8i-a83t.o
 obj-$(CONFIG_PINCTRL_SUN8I_A83T_R)	+= pinctrl-sun8i-a83t-r.o
 obj-$(CONFIG_PINCTRL_SUN8I_H3)		+= pinctrl-sun8i-h3.o
diff --git a/drivers/pinctrl/sunxi/pinctrl-debugfs.c b/drivers/pinctrl/sunxi/pinctrl-debugfs.c
new file mode 100644
index 000000000..60f7ac0b0
--- /dev/null
+++ b/drivers/pinctrl/sunxi/pinctrl-debugfs.c
@@ -0,0 +1,649 @@
+/*
+ * Copyright (C) 2013 Allwinnertech, kevin.z.m <kevin@allwinnertech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/debugfs.h>
+#include <linux/uaccess.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/pinctrl/machine.h>
+#include <linux/pinctrl/pinctrl.h>
+#include <linux/pinctrl/pinconf-generic.h>
+#include <linux/pinctrl/pinmux.h>
+#include <linux/platform_device.h>
+#include <dt-bindings/pinctrl/sun4i-a10.h>
+
+#include "../core.h"
+#include "../pinconf.h"
+#include "../../gpio/gpiolib.h"
+#include "pinctrl-sunxi.h"
+
+static struct dentry *debugfs_root;
+
+#define SUNXI_PINCTRL  "pio"
+#define SUNXI_R_PINCTRL "r_pio"
+#define SUNXI_MAX_NAME_LEN 20
+
+static char sunxi_dbg_pinname[SUNXI_MAX_NAME_LEN];
+static char sunxi_dbg_devname[SUNXI_MAX_NAME_LEN] = SUNXI_PINCTRL;
+
+static int pin_config_get(const char *dev_name, const char *name,
+			unsigned long *config)
+{
+	struct pinctrl_dev *pctldev;
+	int pin, ret;
+	const struct pinconf_ops *ops = NULL;
+
+	pctldev = get_pinctrl_dev_from_devname(dev_name);
+	if (IS_ERR_OR_NULL(pctldev))
+		return -EINVAL;
+
+	mutex_lock(&pctldev->mutex);
+
+	pin = pin_get_from_name(pctldev, name);
+	if (pin < 0)
+		goto unlock;
+
+	ops = pctldev->desc->confops;
+	if (!ops || !ops->pin_config_get) {
+		dev_err(pctldev->dev,
+			"cannot get pin configuration, .pin_config_get missing in driver\n");
+		mutex_unlock(&pctldev->mutex);
+		return -ENOTSUPP;
+	}
+
+	ret = ops->pin_config_get(pctldev, pin, config);
+	if (ret < 0) {
+		dev_err(pctldev->dev, "get config faile\n");
+		mutex_unlock(&pctldev->mutex);
+		return -EINVAL;
+	}
+unlock:
+	mutex_unlock(&pctldev->mutex);
+	return ret;
+}
+
+int pin_config_set(const char *dev_name, const char *name,
+		unsigned long config)
+{
+	struct pinctrl_dev *pctldev;
+	int pin, ret;
+	const struct pinconf_ops *ops = NULL;
+
+	pctldev = get_pinctrl_dev_from_devname(dev_name);
+	if (!pctldev) {
+		ret = -EINVAL;
+		return ret;
+	}
+
+	mutex_lock(&pctldev->mutex);
+
+	pin = pin_get_from_name(pctldev, name);
+	if (pin < 0) {
+		ret = pin;
+		goto unlock;
+	}
+
+	ops = pctldev->desc->confops;
+	if (!ops || !ops->pin_config_set) {
+		dev_err(pctldev->dev, "cannot configure pin, missing "
+			"config function in driver\n");
+		mutex_unlock(&pctldev->mutex);
+		return -EINVAL;
+	}
+
+	ret = ops->pin_config_set(pctldev, pin, &config, 1);
+	if (ret < 0) {
+		dev_err(pctldev->dev, "set config faile\n");
+		mutex_unlock(&pctldev->mutex);
+		return -EINVAL;
+	}
+
+unlock:
+	mutex_unlock(&pctldev->mutex);
+	return ret;
+
+}
+
+static int sunxi_pin_configure_show(struct seq_file *s, void *d)
+{
+	int pin;
+	unsigned long config;
+	struct pinctrl_dev *pctldev;
+	struct sunxi_pinctrl *pctl;
+
+	/* get pinctrl device */
+	pctldev = get_pinctrl_dev_from_devname(sunxi_dbg_devname);
+	if (!pctldev) {
+		seq_puts(s, "cannot get pinctrl device from devname\n");
+		return -EINVAL;
+	}
+
+	/* change pin name to pin index */
+	pin = pin_get_from_name(pctldev, sunxi_dbg_pinname);
+	if (pin < 0) {
+		pr_err("unvalid pin:%s for sunxi_dbg_devname:%s\n", sunxi_dbg_pinname, sunxi_dbg_devname);
+		return -EINVAL;
+	}
+	pctl = pinctrl_dev_get_drvdata(pctldev);
+
+	/*get pin func*/
+	config = pinconf_to_config_packed(SUNXI_PINCFG_TYPE_FUNC, 0XFFFFFF);
+	pin_config_get(sunxi_dbg_devname, sunxi_dbg_pinname, &config);
+	seq_printf(s, "pin[%s] funciton: %lx\n", sunxi_dbg_pinname,
+					pinconf_to_config_argument(config));
+
+	/*get pin data*/
+	config = pinconf_to_config_packed(SUNXI_PINCFG_TYPE_DAT, 0XFFFFFF);
+	pin_config_get(sunxi_dbg_devname, sunxi_dbg_pinname, &config);
+	seq_printf(s, "pin[%s] data: %lx\n", sunxi_dbg_pinname,
+					pinconf_to_config_argument(config));
+
+	/* get pin dlevel */
+	config = pinconf_to_config_packed(PIN_CONFIG_DRIVE_STRENGTH, 0xFFFFFF);
+	pin_config_get(sunxi_dbg_devname, sunxi_dbg_pinname, &config);
+	seq_printf(s, "pin[%s] dlevel: %dmA\n", sunxi_dbg_pinname,
+			pinconf_to_config_argument(config));
+
+	/*get pin pull*/
+	config = pinconf_to_config_packed(PIN_CONFIG_BIAS_PULL_UP, 0XFFFFFF);
+	pin_config_get(sunxi_dbg_devname, sunxi_dbg_pinname, &config);
+	seq_printf(s, "pin[%s] pull up: 0x%x\n", sunxi_dbg_pinname,
+			pinconf_to_config_argument(config));
+
+	config = pinconf_to_config_packed(PIN_CONFIG_BIAS_PULL_DOWN, 0XFFFFFF);
+	pin_config_get(sunxi_dbg_devname, sunxi_dbg_pinname, &config);
+	seq_printf(s, "pin[%s] pull down: 0x%x\n", sunxi_dbg_pinname,
+			pinconf_to_config_argument(config));
+
+	config = pinconf_to_config_packed(PIN_CONFIG_BIAS_DISABLE, 0XFFFFFF);
+	pin_config_get(sunxi_dbg_devname, sunxi_dbg_pinname, &config);
+	seq_printf(s, "pin[%s] pull disable: 0x%x\n", sunxi_dbg_pinname,
+			pinconf_to_config_argument(config));
+
+	return 0;
+}
+
+static ssize_t sunxi_pin_configure_write(struct file *file,
+		const char __user *user_buf, size_t count, loff_t *ppos)
+{
+	int err;
+	int pin;
+	unsigned int function;
+	unsigned int data;
+	unsigned int pull;
+	unsigned int dlevel;
+	unsigned long config;
+	struct pinctrl_dev *pctldev;
+	struct sunxi_pinctrl *pctl;
+	unsigned char buf[SUNXI_MAX_NAME_LEN];
+
+	if (copy_from_user(buf, user_buf, count))
+		return -EFAULT;
+
+	err = sscanf(buf, "%19s %u %u %u %u", sunxi_dbg_pinname,
+			&function, &data, &dlevel, &pull);
+
+	if (err != 5)
+		return -EINVAL;
+
+	if (function > 7) {
+		pr_err("Input Parameters function error!\n");
+		return -EINVAL;
+	}
+
+	if (data > 1) {
+		pr_err("Input Parameters data error!\n");
+		return -EINVAL;
+	}
+
+	if (pull > 3) {
+		pr_err("Input Parameters pull error!\n");
+		return -EINVAL;
+	}
+
+	if (dlevel > 3) {
+		pr_err("Input Parameters dlevel error!\n");
+		return -EINVAL;
+	}
+	dlevel = (dlevel + 1) * 10;
+
+	pctldev = get_pinctrl_dev_from_devname(sunxi_dbg_devname);
+	if (!pctldev)
+		return -EINVAL;
+
+	pin = pin_get_from_name(pctldev, sunxi_dbg_pinname);
+	if (pin < 0) {
+		pr_err("invalid pin:%s for sunxi_dbg_devname:%s\n",
+			sunxi_dbg_pinname, sunxi_dbg_devname);
+		return -EINVAL;
+	}
+
+	pctl = pinctrl_dev_get_drvdata(pctldev);
+
+	/* set function value*/
+	config = pinconf_to_config_packed(SUNXI_PINCFG_TYPE_FUNC, function);
+	pin_config_set(sunxi_dbg_devname, sunxi_dbg_pinname, config);
+	pr_debug("pin[%s] set function:     %x;\n", sunxi_dbg_pinname, function);
+
+	/* set data value*/
+	config = pinconf_to_config_packed(SUNXI_PINCFG_TYPE_DAT, data);
+	pin_config_set(sunxi_dbg_devname, sunxi_dbg_pinname, config);
+	pr_debug("pin[%s] set data:     %x;\n", sunxi_dbg_pinname, data);
+
+	/* set dlevel value */
+	config = pinconf_to_config_packed(PIN_CONFIG_DRIVE_STRENGTH, dlevel);
+	pin_config_set(sunxi_dbg_devname, sunxi_dbg_pinname, config);
+	pr_debug("pin[%s] set dlevel:     %dmA;\n", sunxi_dbg_pinname, dlevel);
+
+	/* set pull value */
+	switch (pull) {
+	case SUN4I_PINCTRL_NO_PULL:
+		config = pinconf_to_config_packed(PIN_CONFIG_BIAS_DISABLE, pull);
+		pin_config_set(sunxi_dbg_devname, sunxi_dbg_pinname, config);
+		pr_debug("pin[%s] set pull disable:     0x%x;\n", sunxi_dbg_pinname, pull);
+		break;
+
+	case SUN4I_PINCTRL_PULL_UP:
+		config = pinconf_to_config_packed(PIN_CONFIG_BIAS_PULL_UP, pull);
+		pin_config_set(sunxi_dbg_devname, sunxi_dbg_pinname, config);
+		pr_debug("pin[%s] set pull up:     0x%x;\n", sunxi_dbg_pinname, pull);
+		break;
+	case SUN4I_PINCTRL_PULL_DOWN:
+		config = pinconf_to_config_packed(PIN_CONFIG_BIAS_PULL_DOWN, pull);
+		pin_config_set(sunxi_dbg_devname, sunxi_dbg_pinname, config);
+		pr_debug("pin[%s] set pull down:     0x%x;\n", sunxi_dbg_pinname, pull);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return count;
+}
+
+static int sunxi_pin_show(struct seq_file *s, void *d)
+{
+	if (strlen(sunxi_dbg_pinname))
+		seq_printf(s, "%s\n", sunxi_dbg_pinname);
+	else
+		seq_puts(s, "No pin name set\n");
+
+	return 0;
+}
+
+static ssize_t sunxi_pin_write(struct file *file,
+	const char __user *user_buf, size_t count, loff_t *ppos)
+{
+	int err;
+	unsigned char buf[SUNXI_MAX_NAME_LEN];
+
+	if (count > SUNXI_MAX_NAME_LEN)
+		return -EINVAL;
+
+	if (copy_from_user(buf, user_buf, count))
+		return -EFAULT;
+
+	err = sscanf(buf, "%19s", sunxi_dbg_pinname);
+	if (err != 1)
+		return -EINVAL;
+
+	return count;
+}
+
+static int sunxi_pin_dlevel_show(struct seq_file *s, void *d)
+{
+	unsigned long config;
+	int pin;
+	struct pinctrl_dev *pctldev;
+
+	pctldev = get_pinctrl_dev_from_devname(sunxi_dbg_devname);
+	if (!pctldev)
+		return -EINVAL;
+	pin = pin_get_from_name(pctldev, sunxi_dbg_pinname);
+	if (pin < 0) {
+		pr_err("invalid pin:%s for sunxi_dbg_devname:%s\n",
+			sunxi_dbg_pinname, sunxi_dbg_devname);
+		return -EINVAL;
+	}
+	config = pinconf_to_config_packed(PIN_CONFIG_DRIVE_STRENGTH, 0xFFFFFF);
+	pin_config_get(sunxi_dbg_devname, sunxi_dbg_pinname, &config);
+	seq_printf(s, "pin[%s] dlevel: %dmA\n", sunxi_dbg_pinname,
+			pinconf_to_config_argument(config));
+	return 0;
+}
+
+static ssize_t sunxi_pin_dlevel_write(struct file *file,
+	const char __user *user_buf, size_t count, loff_t *ppos)
+{
+	int err;
+	unsigned long dlevel;
+	unsigned long config;
+	unsigned char buf[SUNXI_MAX_NAME_LEN];
+	int pin;
+	struct pinctrl_dev *pctldev;
+
+	if (copy_from_user(buf, user_buf, count))
+		return -EFAULT;
+
+	err = sscanf(buf, "%19s %lu", sunxi_dbg_pinname, &dlevel);
+	if (err != 2)
+		return err;
+
+	if (dlevel > 3) {
+		pr_debug("Input Parameters dlevel error!\n");
+		return -EINVAL;
+	}
+
+	pctldev = get_pinctrl_dev_from_devname(sunxi_dbg_devname);
+	if (!pctldev)
+		return -EINVAL;
+
+	pin = pin_get_from_name(pctldev, sunxi_dbg_pinname);
+	if (pin < 0) {
+		pr_err("invalid pin:%s for sunxi_dbg_devname:%s\n",
+			sunxi_dbg_pinname, sunxi_dbg_devname);
+		return -EINVAL;
+	}
+
+	dlevel = (dlevel + 1) * 10;
+
+	config = pinconf_to_config_packed(PIN_CONFIG_DRIVE_STRENGTH, dlevel);
+	pin_config_set(sunxi_dbg_devname, sunxi_dbg_pinname, config);
+
+	return count;
+}
+
+static int sunxi_pin_pull_show(struct seq_file *s, void *d)
+{
+	unsigned long config;
+	int pin;
+	struct pinctrl_dev *pctldev;
+
+	pctldev = get_pinctrl_dev_from_devname(sunxi_dbg_devname);
+	if (!pctldev)
+		return -EINVAL;
+
+	pin = pin_get_from_name(pctldev, sunxi_dbg_pinname);
+	if (pin < 0) {
+		pr_err("invalid pin:%s for sunxi_dbg_devname:%s\n",
+			sunxi_dbg_pinname, sunxi_dbg_devname);
+		return -EINVAL;
+	}
+	/*get pin pull*/
+	config = pinconf_to_config_packed(PIN_CONFIG_BIAS_PULL_UP, 0XFFFFFF);
+	pin_config_get(sunxi_dbg_devname, sunxi_dbg_pinname, &config);
+	seq_printf(s, "pin[%s] pull up: 0x%x\n", sunxi_dbg_pinname,
+			pinconf_to_config_argument(config));
+
+	config = pinconf_to_config_packed(PIN_CONFIG_BIAS_PULL_DOWN, 0XFFFFFF);
+	pin_config_get(sunxi_dbg_devname, sunxi_dbg_pinname, &config);
+	seq_printf(s, "pin[%s] pull down: 0x%x\n", sunxi_dbg_pinname,
+			pinconf_to_config_argument(config));
+
+	config = pinconf_to_config_packed(PIN_CONFIG_BIAS_DISABLE, 0XFFFFFF);
+	pin_config_get(sunxi_dbg_devname, sunxi_dbg_pinname, &config);
+	seq_printf(s, "pin[%s] pull disable: 0x%x\n", sunxi_dbg_pinname,
+			pinconf_to_config_argument(config));
+
+	return 0;
+}
+
+static ssize_t sunxi_pin_pull_write(struct file *file,
+		const char __user *user_buf,
+		size_t count, loff_t *ppos)
+{
+	int err;
+	unsigned long pull;
+	unsigned long config;
+	unsigned char buf[SUNXI_MAX_NAME_LEN];
+	int pin;
+	struct pinctrl_dev *pctldev;
+
+	if (copy_from_user(buf, user_buf, count))
+		return -EFAULT;
+
+	err = sscanf(buf, "%19s %lu", sunxi_dbg_pinname, &pull);
+	if (err != 2)
+		return err;
+
+	if (pull > 3) {
+		pr_debug("Input Parameters pull error!\n");
+		return -EINVAL;
+	}
+
+	pctldev = get_pinctrl_dev_from_devname(sunxi_dbg_devname);
+	if (!pctldev)
+		return -EINVAL;
+
+	pin = pin_get_from_name(pctldev, sunxi_dbg_pinname);
+	if (pin < 0) {
+		pr_err("invalid pin:%s for sunxi_dbg_devname:%s\n",
+			sunxi_dbg_pinname, sunxi_dbg_devname);
+		return -EINVAL;
+	}
+
+	/* set pull value */
+	switch (pull) {
+	case SUN4I_PINCTRL_NO_PULL:
+		config = pinconf_to_config_packed(PIN_CONFIG_BIAS_DISABLE, pull);
+		pin_config_set(sunxi_dbg_devname, sunxi_dbg_pinname, config);
+		pr_debug("pin[%s] set pull disable: 0x%lx;\n", sunxi_dbg_pinname, pull);
+		break;
+
+	case SUN4I_PINCTRL_PULL_UP:
+		config = pinconf_to_config_packed(PIN_CONFIG_BIAS_PULL_UP, pull);
+		pin_config_set(sunxi_dbg_devname, sunxi_dbg_pinname, config);
+		pr_debug("pin[%s] set pull up:     0x%lx;\n", sunxi_dbg_pinname, pull);
+		break;
+	case SUN4I_PINCTRL_PULL_DOWN:
+		config = pinconf_to_config_packed(PIN_CONFIG_BIAS_PULL_DOWN, pull);
+		pin_config_set(sunxi_dbg_devname, sunxi_dbg_pinname, config);
+		pr_debug("pin[%s] set pull down:     0x%lx;\n", sunxi_dbg_pinname, pull);
+		break;
+	default:
+		return -EINVAL;
+	}
+	return count;
+}
+
+static int sunxi_dev_name_show(struct seq_file *s, void *d)
+{
+	if (strlen(sunxi_dbg_devname))
+		seq_printf(s, "%s\n", sunxi_dbg_devname);
+	else
+		seq_puts(s, "No dev name set\n");
+
+	return 0;
+}
+
+static ssize_t sunxi_dev_name_write(struct file *file,
+	const char __user *user_buf, size_t count, loff_t *ppos)
+{
+	int err;
+	unsigned char buf[SUNXI_MAX_NAME_LEN];
+
+	if (count > SUNXI_MAX_NAME_LEN)
+		return -EINVAL;
+
+	if (copy_from_user(buf, user_buf, count))
+		return -EFAULT;
+
+	err = sscanf(buf, "%19s", sunxi_dbg_devname);
+	if (err != 1)
+		return -EINVAL;
+
+	return count;
+}
+
+/*
+ * add gpio function modify node
+ */
+static ssize_t sunxi_pin_func_write(struct file *file,
+	const char __user *user_buf, size_t count, loff_t *ppos)
+{
+	int err;
+	unsigned long function;
+	unsigned long config;
+	unsigned char buf[SUNXI_MAX_NAME_LEN];
+	int pin;
+	struct pinctrl_dev *pctldev;
+
+	if (copy_from_user(buf, user_buf, count))
+		return -EFAULT;
+
+	err = sscanf(buf, "%19s %lu", sunxi_dbg_pinname, &function);
+	if (err != 2)
+		return err;
+
+	if (function > 7) {
+		pr_debug("Input Parameters function error!\n");
+		return -EINVAL;
+	}
+
+	pctldev = get_pinctrl_dev_from_devname(sunxi_dbg_devname);
+	if (!pctldev)
+		return -EINVAL;
+
+	pin = pin_get_from_name(pctldev, sunxi_dbg_pinname);
+	if (pin < 0) {
+		pr_err("invalid pin:%s for sunxi_dbg_devname:%s\n",
+			sunxi_dbg_pinname, sunxi_dbg_devname);
+		return -EINVAL;
+	}
+
+	config = pinconf_to_config_packed(SUNXI_PINCFG_TYPE_FUNC, function);
+	pin_config_set(sunxi_dbg_devname, sunxi_dbg_pinname, config);
+	pr_debug("pin[%s] set function:     %x;\n", sunxi_dbg_pinname, function);
+
+	return count;
+}
+
+static int sunxi_pin_configure_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, sunxi_pin_configure_show, inode->i_private);
+}
+
+static int sunxi_pin_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, sunxi_pin_show, inode->i_private);
+}
+
+static int sunxi_pin_dlevel_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, sunxi_pin_dlevel_show, inode->i_private);
+}
+
+static int sunxi_pin_pull_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, sunxi_pin_pull_show, inode->i_private);
+}
+
+static int sunxi_dev_name_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, sunxi_dev_name_show, inode->i_private);
+}
+
+static int sunxi_pin_func_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, sunxi_dev_name_show, inode->i_private);
+}
+
+static const struct file_operations sunxi_pin_configure_ops = {
+	.open		= sunxi_pin_configure_open,
+	.write		= sunxi_pin_configure_write,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+	.owner		= THIS_MODULE,
+};
+
+static const struct file_operations sunxi_pin_ops = {
+	.open		= sunxi_pin_open,
+	.write		= sunxi_pin_write,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+	.owner		= THIS_MODULE,
+};
+
+static const struct file_operations sunxi_dev_name_ops = {
+	.open		= sunxi_dev_name_open,
+	.write		= sunxi_dev_name_write,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+	.owner		= THIS_MODULE,
+};
+
+static const struct file_operations sunxi_pin_dlevel_ops = {
+	.open		= sunxi_pin_dlevel_open,
+	.write		= sunxi_pin_dlevel_write,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+	.owner		= THIS_MODULE,
+};
+
+static const struct file_operations sunxi_pin_pull_ops = {
+	.open		= sunxi_pin_pull_open,
+	.write		= sunxi_pin_pull_write,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+	.owner		= THIS_MODULE,
+};
+
+static const struct file_operations sunxi_pin_func_ops = {
+	.open		= sunxi_pin_func_open,
+	.write		= sunxi_pin_func_write,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+	.owner		= THIS_MODULE,
+};
+
+static int __init sunxi_pinctrl_debugfs_init(void)
+{
+	debugfs_root = debugfs_create_dir("sunxi_pinctrl", NULL);
+	if (IS_ERR_OR_NULL(debugfs_root)) {
+		pr_debug("failed to create debugfs directory\n");
+		debugfs_root = NULL;
+		return -EFAULT;
+	}
+
+	debugfs_create_file("sunxi_pin_configure",
+				(S_IRUGO | S_IWUSR | S_IWGRP),
+			    debugfs_root, NULL, &sunxi_pin_configure_ops);
+	debugfs_create_file("sunxi_pin", (S_IRUGO | S_IWUSR | S_IWGRP),
+			    debugfs_root, NULL, &sunxi_pin_ops);
+	debugfs_create_file("dlevel", (S_IRUGO | S_IWUSR | S_IWGRP),
+			    debugfs_root, NULL, &sunxi_pin_dlevel_ops);
+	debugfs_create_file("pull", (S_IRUGO | S_IWUSR | S_IWGRP),
+			    debugfs_root, NULL, &sunxi_pin_pull_ops);
+	debugfs_create_file("dev_name", (S_IRUGO | S_IWUSR | S_IWGRP),
+			    debugfs_root, NULL, &sunxi_dev_name_ops);
+	debugfs_create_file("function", (S_IRUGO | S_IWUSR | S_IWGRP),
+			    debugfs_root, NULL, &sunxi_pin_func_ops);
+
+	return 0;
+}
+module_init(sunxi_pinctrl_debugfs_init);
+
+static void __exit sunxi_pinctrl_debugfs_exit(void)
+{
+	debugfs_remove_recursive(debugfs_root);
+	debugfs_root = NULL;
+}
+module_exit(sunxi_pinctrl_debugfs_exit);
+
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/pinctrl/sunxi/pinctrl-sun50i-a100-r.c b/drivers/pinctrl/sunxi/pinctrl-sun50i-a100-r.c
new file mode 100644
index 000000000..21054fcac
--- /dev/null
+++ b/drivers/pinctrl/sunxi/pinctrl-sun50i-a100-r.c
@@ -0,0 +1,105 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2020 Yangtao Li <frank@allwinnertech.com>
+ *
+ * Based on:
+ * huangshuosheng <huangshuosheng@allwinnertech.com>
+ */
+
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/pinctrl.h>
+#include <linux/platform_device.h>
+
+#include "pinctrl-sunxi.h"
+
+static const struct sunxi_desc_pin a100_r_pins[] = {
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 0),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "s_i2c0"),	/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "s_i2c0"),	/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "s_uart0"),	/* TX */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "s_uart0"),	/* RX */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 4),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "s_jtag"),	/* MS */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "s_jtag"),	/* CK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "s_jtag"),	/* DO */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 7),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "s_jtag"),	/* DI */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 8),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "s_i2c1"),	/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 9),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "s_i2c1"),	/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 10),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "s_pwm"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 11),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "s_cir"),		/* IN */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 11)),
+};
+
+static const struct sunxi_pinctrl_desc a100_r_pinctrl_data = {
+	.pins = a100_r_pins,
+	.npins = ARRAY_SIZE(a100_r_pins),
+	.pin_base = PL_BASE,
+	.irq_banks = 1,
+};
+
+static int a100_r_pinctrl_probe(struct platform_device *pdev)
+{
+	return sunxi_pinctrl_init(pdev, &a100_r_pinctrl_data);
+}
+
+static const struct of_device_id a100_r_pinctrl_match[] = {
+	{ .compatible = "allwinner,sun50i-a100-r-pinctrl", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, a100_r_pinctrl_match);
+
+static struct platform_driver a100_r_pinctrl_driver = {
+	.probe	= a100_r_pinctrl_probe,
+	.driver	= {
+		.name		= "sun50iw10p1-r-pinctrl",
+		.of_match_table	= a100_r_pinctrl_match,
+	},
+};
+module_platform_driver(a100_r_pinctrl_driver);
diff --git a/drivers/pinctrl/sunxi/pinctrl-sun50i-a100.c b/drivers/pinctrl/sunxi/pinctrl-sun50i-a100.c
new file mode 100644
index 000000000..19cfd1e76
--- /dev/null
+++ b/drivers/pinctrl/sunxi/pinctrl-sun50i-a100.c
@@ -0,0 +1,708 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2020 Yangtao Li <frank@allwinnertech.com>
+ *
+ * Based on:
+ * huangshuosheng <huangshuosheng@allwinnertech.com>
+ */
+
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/pinctrl.h>
+#include <linux/platform_device.h>
+
+#include "pinctrl-sunxi.h"
+
+static const struct sunxi_desc_pin a100_pins[] = {
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 0),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart2"),		/* TX */
+		  SUNXI_FUNCTION(0x3, "spi2"),		/* CS */
+		  SUNXI_FUNCTION(0x4, "jtag"),		/* MS */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart2"),		/* RX */
+		  SUNXI_FUNCTION(0x3, "spi2"),		/* CLK */
+		  SUNXI_FUNCTION(0x4, "jtag"),		/* CK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart2"),		/* RTS */
+		  SUNXI_FUNCTION(0x3, "spi2"),		/* MOSI */
+		  SUNXI_FUNCTION(0x4, "jtag"),		/* DO */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart2"),		/* CTS */
+		  SUNXI_FUNCTION(0x3, "spi2"),		/* MISO */
+		  SUNXI_FUNCTION(0x4, "jtag"),		/* DI */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 4),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "i2c1"),		/* SCK */
+		  SUNXI_FUNCTION(0x3, "i2s0"),		/* MCLK */
+		  SUNXI_FUNCTION(0x4, "jtag_gpu"),	/* MS_GPU */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "i2c1"),		/* SDA */
+		  SUNXI_FUNCTION(0x3, "i2s0"),		/* BCLK */
+		  SUNXI_FUNCTION(0x4, "jtag_gpu"),	/* CK_GPU */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "i2s0"),		/* LRCK */
+		  SUNXI_FUNCTION(0x4, "jtag_gpu"),	/* DO_GPU */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 7),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "spdif"),		/* DIN */
+		  SUNXI_FUNCTION(0x3, "i2s0_dout0"),	/* DOUT0 */
+		  SUNXI_FUNCTION(0x4, "i2s0_din1"),	/* DIN1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 8),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "spdif"),		/* DOUT */
+		  SUNXI_FUNCTION(0x3, "i2s0_din0"),	/* DIN0 */
+		  SUNXI_FUNCTION(0x4, "i2s0_dout1"),	/* DOUT1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 9),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart0"),		/* TX */
+		  SUNXI_FUNCTION(0x3, "i2c0"),		/* SCK */
+		  SUNXI_FUNCTION(0x4, "jtag_gpu"),	/* DI_GPU */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 10),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart0"),		/* RX */
+		  SUNXI_FUNCTION(0x3, "i2c0"),		/* SDA */
+		  SUNXI_FUNCTION(0x4, "pwm1"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 10)),
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 0),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* WE */
+		  SUNXI_FUNCTION(0x3, "mmc2"),		/* DS */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* ALE */
+		  SUNXI_FUNCTION(0x3, "mmc2"),		/* RST */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* CLE */
+		  SUNXI_FUNCTION(0x4, "spi0"),		/* MOSI */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* CE1 */
+		  SUNXI_FUNCTION(0x4, "spi0"),		/* CS0 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 4),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* CE0 */
+		  SUNXI_FUNCTION(0x4, "spi0"),		/* MISO */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* RE */
+		  SUNXI_FUNCTION(0x3, "mmc2"),		/* CLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* RB0 */
+		  SUNXI_FUNCTION(0x3, "mmc2"),		/* CMD */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 7),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* RB1 */
+		  SUNXI_FUNCTION(0x4, "spi0"),		/* CS1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 8),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ7 */
+		  SUNXI_FUNCTION(0x3, "mmc2"),		/* D3 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 9),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ6 */
+		  SUNXI_FUNCTION(0x3, "mmc2"),		/* D4 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 10),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ5 */
+		  SUNXI_FUNCTION(0x3, "mmc2"),		/* D0 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 11),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ4 */
+		  SUNXI_FUNCTION(0x3, "mmc2"),		/* D5 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 12),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQS */
+		  SUNXI_FUNCTION(0x4, "spi0"),		/* CLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 13),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ3 */
+		  SUNXI_FUNCTION(0x3, "mmc2"),		/* D1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 14),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ2 */
+		  SUNXI_FUNCTION(0x3, "mmc2"),		/* D6 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 14)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 15),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ1 */
+		  SUNXI_FUNCTION(0x3, "mmc2"),		/* D2 */
+		  SUNXI_FUNCTION(0x4, "spi0"),		/* WP */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 15)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 16),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ0 */
+		  SUNXI_FUNCTION(0x3, "mmc2"),		/* D7 */
+		  SUNXI_FUNCTION(0x4, "spi0"),		/* HOLD */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 16)),
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 0),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D2 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* D0P */
+		  SUNXI_FUNCTION(0x4, "dsi0"),		/* DP0 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D3 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* D0N */
+		  SUNXI_FUNCTION(0x4, "dsi0"),		/* DM0 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D4 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* D1P */
+		  SUNXI_FUNCTION(0x4, "dsi0"),		/* DP1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D5 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* D1N */
+		  SUNXI_FUNCTION(0x4, "dsi0"),		/* DM1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 4),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D6 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* D2P */
+		  SUNXI_FUNCTION(0x4, "dsi0"),		/* CKP */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D7 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* D2N */
+		  SUNXI_FUNCTION(0x4, "dsi0"),		/* CKM */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D10 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* CKP */
+		  SUNXI_FUNCTION(0x4, "dsi0"),		/* DP2 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 7),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D11 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* CKN */
+		  SUNXI_FUNCTION(0x4, "dsi0"),		/* DM2 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 8),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D12 */
+		  SUNXI_FUNCTION(0x4, "dsi0"),		/* DP3 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 9),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D13 */
+		  SUNXI_FUNCTION(0x4, "dsi0"),		/* DM3 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 10),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D14 */
+		  SUNXI_FUNCTION(0x4, "spi1"),		/* CS */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 11),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D15 */
+		  SUNXI_FUNCTION(0x4, "spi1"),		/* CLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 12),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D18 */
+		  SUNXI_FUNCTION(0x4, "spi1"),		/* MOSI */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 13),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D19 */
+		  SUNXI_FUNCTION(0x4, "spi1"),		/* MISO */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 14),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D20 */
+		  SUNXI_FUNCTION(0x4, "uart3"),		/* TX */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 14)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 15),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D21 */
+		  SUNXI_FUNCTION(0x4, "uart3"),		/* RX */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 15)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 16),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D22 */
+		  SUNXI_FUNCTION(0x4, "uart3"),		/* RTS */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 16)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 17),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D23 */
+		  SUNXI_FUNCTION(0x4, "uart3"),		/* CTS */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 17)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 18),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* CLK */
+		  SUNXI_FUNCTION(0x4, "uart4"),		/* TX */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 18)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 19),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* DE */
+		  SUNXI_FUNCTION(0x4, "uart4"),		/* RX */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 19)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 20),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* HSYNC */
+		  SUNXI_FUNCTION(0x3, "pwm2"),
+		  SUNXI_FUNCTION(0x4, "uart4"),		/* RTS */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 20)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 21),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* VSYNC */
+		  SUNXI_FUNCTION(0x3, "pwm3"),
+		  SUNXI_FUNCTION(0x4, "uart4"),		/* CTS */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 21)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 22),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "pwm1"),
+		  SUNXI_FUNCTION(0x4, "i2c0"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 22)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 23),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "pwm0"),
+		  SUNXI_FUNCTION(0x4, "i2c0"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 23)),
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 0),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi"),		/* MCLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "i2c2"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "i2c2"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "i2c3"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 4),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "i2c3"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi"),		/* MCLK */
+		  SUNXI_FUNCTION(0x3, "pll"),		/* LOCK_DBG */
+		  SUNXI_FUNCTION(0x4, "i2s2"),		/* MCLK */
+		  SUNXI_FUNCTION(0x5, "ledc"),		/* LEDC */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "bist0"),		/* RESULT0 */
+		  SUNXI_FUNCTION(0x4, "i2s2"),		/* BCLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 7),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi"),		/* SM_VS */
+		  SUNXI_FUNCTION(0x3, "bist0"),		/* RESULT1 */
+		  SUNXI_FUNCTION(0x4, "i2s2"),		/* LRCK */
+		  SUNXI_FUNCTION(0x5, "tcon0"),		/* TRIG */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3,	7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 8),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "bist0"),		/* RESULT2 */
+		  SUNXI_FUNCTION(0x4, "i2s2"),		/* DOUT0 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 9),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "bist0"),		/* RESULT3 */
+		  SUNXI_FUNCTION(0x4, "i2s2"),		/* DIN0 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 9)),
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 0),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "mmc0"),		/* D1 */
+		  SUNXI_FUNCTION(0x3, "jtag"),		/* MS1 */
+		  SUNXI_FUNCTION(0x4, "jtag_gpu"),	/* MS_GPU */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "mmc0"),		/* D0 */
+		  SUNXI_FUNCTION(0x3, "jtag"),		/* DI1 */
+		  SUNXI_FUNCTION(0x4, "jtag_gpu"),	/* DI_GPU */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "mmc0"),		/* CLK */
+		  SUNXI_FUNCTION(0x3, "uart0"),		/* TX */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "mmc0"),		/* CMD */
+		  SUNXI_FUNCTION(0x3, "jtag"),		/* DO */
+		  SUNXI_FUNCTION(0x4, "jtag_gpu"),	/* DO_GPU */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 4),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "mmc0"),		/* D3 */
+		  SUNXI_FUNCTION(0x3, "uart0"),		/* RX */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "mmc0"),		/* D2 */
+		  SUNXI_FUNCTION(0x3, "jtag"),		/* CK */
+		  SUNXI_FUNCTION(0x4, "jtag_gpu"),	/* CK_GPU */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 6)),
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 0),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "mmc1"),		/* CLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "mmc1"),		/* CMD */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "mmc1"),		/* D0 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "mmc1"),		/* D1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 4),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "mmc1"),		/* D2 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "mmc1"),		/* D3 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart1"),		/* TX */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 7),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart1"),		/* RX */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 8),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart1"),		/* RTS */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 9),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart1"),		/* CTS */
+		  SUNXI_FUNCTION(0x3, "i2s1"),		/* MCLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 10),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "i2s1"),		/* BCLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 11),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "i2s1"),		/* LRCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 12),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "i2s1_dout0"),	/* DOUT0 */
+		  SUNXI_FUNCTION(0x4, "i2s1_din1"),	/* DIN1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 13),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "i2s1_din0"),	/* DIN0 */
+		  SUNXI_FUNCTION(0x4, "i2s1_dout1"),	/* DOUT1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 13)),
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 0),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "i2c0"),		/* SCK */
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* RXD1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "i2c0"),		/* SDA */
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* RXD0 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "i2c1"),		/* SCK */
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* RXCTL */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "i2c1"),		/* SDA */
+		  SUNXI_FUNCTION(0x3, "cir0"),		/* OUT */
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* CLKIN */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 4),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart3"),		/* TX */
+		  SUNXI_FUNCTION(0x3, "spi1"),		/* CS */
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* TXD1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart3"),		/* RX */
+		  SUNXI_FUNCTION(0x3, "spi1"),		/* CLK */
+		  SUNXI_FUNCTION(0x4, "ledc"),
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* TXD0 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart3"),		/* RTS */
+		  SUNXI_FUNCTION(0x3, "spi1"),		/* MOSI */
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* TXCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 7),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart3"),		/* CTS */
+		  SUNXI_FUNCTION(0x3, "spi1"),		/* MISO */
+		  SUNXI_FUNCTION(0x4, "spdif"),		/* OUT */
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* TXCTL */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 8),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "dmic"),		/* CLK */
+		  SUNXI_FUNCTION(0x3, "spi2"),		/* CS */
+		  SUNXI_FUNCTION(0x4, "i2s2"),		/* MCLK */
+		  SUNXI_FUNCTION(0x5, "i2s2_din2"),	/* DIN2 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 9),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "dmic"),		/* DATA0 */
+		  SUNXI_FUNCTION(0x3, "spi2"),		/* CLK */
+		  SUNXI_FUNCTION(0x4, "i2s2"),		/* BCLK */
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* MDC */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 10),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "dmic"),		/* DATA1 */
+		  SUNXI_FUNCTION(0x3, "spi2"),		/* MOSI */
+		  SUNXI_FUNCTION(0x4, "i2s2"),		/* LRCK */
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* MDIO */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 11),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "dmic"),		/* DATA2 */
+		  SUNXI_FUNCTION(0x3, "spi2"),		/* MISO */
+		  SUNXI_FUNCTION(0x4, "i2s2_dout0"),	/* DOUT0 */
+		  SUNXI_FUNCTION(0x5, "i2s2_din1"),	/* DIN1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 12),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "dmic"),		/* DATA3 */
+		  SUNXI_FUNCTION(0x3, "i2c3"),		/* SCK */
+		  SUNXI_FUNCTION(0x4, "i2s2_din0"),	/* DIN0 */
+		  SUNXI_FUNCTION(0x5, "i2s2_dout1"),	/* DOUT1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 13),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "i2c3"),		/* SCK */
+		  SUNXI_FUNCTION(0x4, "i2s3"),		/* MCLK */
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* EPHY */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 14),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x4, "i2s3"),		/* BCLK */
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* RXD3 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 14)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 15),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x4, "i2s3"),		/* LRCK */
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* RXD2 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 15)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 16),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "i2s3_dout0"),	/* DOUT0 */
+		  SUNXI_FUNCTION(0x4, "i2s3_din1"),	/* DIN1 */
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* RXCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 16)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 17),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "i2s3_dout1"),	/* DOUT1 */
+		  SUNXI_FUNCTION(0x4, "i2s3_din0"),	/* DIN0 */
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* TXD3 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 17)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 18),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "cir0"),		/* OUT */
+		  SUNXI_FUNCTION(0x3, "i2s3_dout2"),	/* DOUT2 */
+		  SUNXI_FUNCTION(0x4, "i2s3_din2"),	/* DIN2 */
+		  SUNXI_FUNCTION(0x5, "emac0"),		/* TXD2 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 18)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 19),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "cir0"),		/* IN */
+		  SUNXI_FUNCTION(0x3, "i2s3_dout3"),	/* DOUT3 */
+		  SUNXI_FUNCTION(0x4, "i2s3_din3"),	/* DIN3 */
+		  SUNXI_FUNCTION(0x5, "ledc"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 19)),
+};
+
+static const unsigned int a100_irq_bank_map[] = { 0, 1, 2, 3, 4, 5, 6};
+
+static const struct sunxi_pinctrl_desc a100_pinctrl_data = {
+	.pins = a100_pins,
+	.npins = ARRAY_SIZE(a100_pins),
+	.irq_banks = 7,
+	.irq_bank_map = a100_irq_bank_map,
+	.io_bias_cfg_variant = BIAS_VOLTAGE_PIO_POW_MODE_SEL,
+};
+
+static int a100_pinctrl_probe(struct platform_device *pdev)
+{
+	return sunxi_pinctrl_init(pdev, &a100_pinctrl_data);
+}
+
+static const struct of_device_id a100_pinctrl_match[] = {
+	{ .compatible = "allwinner,sun50i-a100-pinctrl", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, a100_pinctrl_match);
+
+static struct platform_driver a100_pinctrl_driver = {
+	.probe	= a100_pinctrl_probe,
+	.driver	= {
+		.name		= "sun50i-a100-pinctrl",
+		.of_match_table	= a100_pinctrl_match,
+	},
+};
+module_platform_driver(a100_pinctrl_driver);
diff --git a/drivers/pinctrl/sunxi/pinctrl-sun50iw10p1-r.c b/drivers/pinctrl/sunxi/pinctrl-sun50iw10p1-r.c
new file mode 100644
index 000000000..a46b32ba1
--- /dev/null
+++ b/drivers/pinctrl/sunxi/pinctrl-sun50iw10p1-r.c
@@ -0,0 +1,130 @@
+// SPDX-License-Identifier: (GPL-2.0+ or MIT)
+/*
+ * Copyright(c) 2012-2016 Allwinnertech Co., Ltd.
+ * Author: huangshuosheng <huangshuosheng@allwinnertech.com>
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/pinctrl.h>
+
+#include "pinctrl-sunxi.h"
+
+static const struct sunxi_desc_pin sun50iw10p1_r_pins[] = {
+	//Register Name: PL_CFG0
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_twi0"),		/* SCK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 0),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_twi0"),		/* SDA */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 1),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_uart0"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 2),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_uart0"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 3),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_jtag0"),		/* MS */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 4),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_jtag0"),		/* CK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 5),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_jtag0"),		/* DO */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 6),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_jtag0"),		/* DI */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 7),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_twi1"),		/* SCK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 8),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_twi1"),		/* SDA */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 9),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_pwm0"),		/* S_PWM0 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 10),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_cpu0"),		/* CUR_W */
+		SUNXI_FUNCTION(0x3, "s_cir0"),		/* IN */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 11),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+};
+
+static const struct sunxi_pinctrl_desc sun50iw10p1_r_pinctrl_data = {
+	.pins = sun50iw10p1_r_pins,
+	.npins = ARRAY_SIZE(sun50iw10p1_r_pins),
+	.pin_base = SUNXI_PIN_BASE('L'),
+	.irq_banks = 1,
+	.hw_type = SUNXI_PCTL_HW_TYPE_0,
+};
+
+static int sun50iw10p1_r_pinctrl_probe(struct platform_device *pdev)
+{
+#if IS_ENABLED(CONFIG_PINCTRL_SUNXI_DEBUGFS)
+	dev_set_name(&pdev->dev, "r_pio");
+#endif
+	return sunxi_pinctrl_init(pdev, &sun50iw10p1_r_pinctrl_data);
+}
+
+static struct of_device_id sun50iw10p1_r_pinctrl_match[] = {
+	{ .compatible = "allwinner,sun50iw10p1-r-pinctrl", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, sun50iw10p1_r_pinctrl_match);
+
+static struct platform_driver sun50iw10p1_r_pinctrl_driver = {
+	.probe	= sun50iw10p1_r_pinctrl_probe,
+	.driver	= {
+		.name		= "sun50iw10p1-r-pinctrl",
+		.of_match_table	= sun50iw10p1_r_pinctrl_match,
+	},
+};
+
+static int __init sun50iw10p1_r_pio_init(void)
+{
+	return platform_driver_register(&sun50iw10p1_r_pinctrl_driver);
+}
+postcore_initcall(sun50iw10p1_r_pio_init);
+
+MODULE_AUTHOR("Huangshuosheng<huangshuosheng@allwinnertech.com>");
+MODULE_DESCRIPTION("Allwinner sun50iw10p1 R_PIO pinctrl driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/pinctrl/sunxi/pinctrl-sun50iw10p1.c b/drivers/pinctrl/sunxi/pinctrl-sun50iw10p1.c
new file mode 100644
index 000000000..95297ccf2
--- /dev/null
+++ b/drivers/pinctrl/sunxi/pinctrl-sun50iw10p1.c
@@ -0,0 +1,1314 @@
+// SPDX-License-Identifier: (GPL-2.0+ or MIT)
+/*
+ * Copyright(c) 2012-2016 Allwinnertech Co., Ltd.
+ * Author: huangshuosheng <huangshuosheng@allwinnertech.com>
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/pinctrl.h>
+
+#include "pinctrl-sunxi.h"
+
+static const struct sunxi_desc_pin sun50iw10p1_pins[] = {
+	//Register Name: PB_CFG0
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* TX */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* CS */
+		SUNXI_FUNCTION(0x4, "jtag"),	        /*  MS  */
+		SUNXI_FUNCTION(0x5, "test"),     	/* For Test */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 0),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* RX */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* CLK */
+		SUNXI_FUNCTION(0x4, "jtag"),	        /* CK  */
+		SUNXI_FUNCTION(0x5, "test"),     	/* For Test */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 1),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* RTS */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* MOSI */
+		SUNXI_FUNCTION(0x4, "jtag"),	        /* DO  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 2),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* CTS */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* MISO */
+		SUNXI_FUNCTION(0x4, "jtag"),	        /* DI  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 3),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi1"),		/* SCK */
+		SUNXI_FUNCTION(0x3, "h_i2s0"),		/* MCLK */
+		SUNXI_FUNCTION(0x4, "jtag"),	        /* MS_GPU  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 4),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi1"),		/* SDA */
+		SUNXI_FUNCTION(0x3, "h_i2s0"),		/* BCLK */
+		SUNXI_FUNCTION(0x4, "jtag"),	        /* CK_GPU  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 5),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	/* for spdif */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "spdif"),
+		SUNXI_FUNCTION(0x3, "h_i2s0"),		/* LRCK */
+		SUNXI_FUNCTION(0x4, "jtag"),	        /* DO_GPU  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 6),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 7),              /* spdif */
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "spdif"),		/* DIN */
+		SUNXI_FUNCTION(0x3, "h_i2s0"),		/* DOUT0 */
+		SUNXI_FUNCTION(0x4, "h_i2s0"),	        /* DIN1  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 7),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "spdif"),           /* DOUT */
+		SUNXI_FUNCTION(0x3, "h_i2s0"),          /* DIN0 */
+		SUNXI_FUNCTION(0x4, "h_i2s0"),          /* DOUT1  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 8),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart0"),           /* TX */
+		SUNXI_FUNCTION(0x3, "twi0"),            /* SCK */
+		SUNXI_FUNCTION(0x4, "jtag"),           /* DI_GPU  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 9),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 10),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	/* HOLE */
+	//Register Name: PC_CFG0
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* WE */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* DS */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 0),  /* PC_EINT0 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* ALE */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* RST */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 1),  /* PC_EINT1 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* CLE */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* MOSI */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 2),  /* PC_EINT2 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* CE1 */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* CS0 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 3),  /* PC_EINT3 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* CE0 */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* MISO */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 4),  /* PC_EINT4 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* RE */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* CLK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 5),  /* PC_EINT5 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* RB0 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* CMD */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 6),  /* PC_EINT6 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* RB1 */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* CS1 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 7),  /* PC_EINT7 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	//Register Name: PC_CFG1
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ7 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D3 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 8),  /* PC_EINT8 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ6 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D4 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 9),  /* PC_EINT9 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ5 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D0 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 10),  /* PC_EINT10 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ4 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D5 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 11),  /* PC_EINT11 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQS */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* CLK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 12),  /* PC_EINT12 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ3 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D1 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 13),  /* PC_EINT13 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ2 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D6 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 14),  /* PC_EINT14 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ1 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D2 */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* WP */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 15),  /* PC_EINT15 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ0 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D7 */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* HOLD */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 16),  /* PC_EINT16 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+
+	/* HOLE */
+	//Register Name: PD_CFG0
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VP0 */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* DP0 */
+		SUNXI_FUNCTION(0x5, "eink"),		/* D0 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 0),  /* PD_EINT0 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D3 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VN0 */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* DM0 */
+		SUNXI_FUNCTION(0x5, "eink"),		/* D1 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 1),  /* PD_EINT1 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D4 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VP1 */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* DP1 */
+		SUNXI_FUNCTION(0x5, "eink"),		/* D2 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 2),  /* PD_EINT2 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D5 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VN1 */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* DM1 */
+		SUNXI_FUNCTION(0x5, "eink"),		/* D3 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 3),  /* PD_EINT3 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D6 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VP2 */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* CKP */
+		SUNXI_FUNCTION(0x5, "eink"),		/* D4 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 4),  /* PD_EINT4 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D7 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VN2 */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* CKM */
+		SUNXI_FUNCTION(0x5, "eink"),		/* D5 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 5),  /* PD_EINT5 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D10 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VPC */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* DP2 */
+		SUNXI_FUNCTION(0x5, "eink"),		/* D6 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 6),  /* PD_EINT6 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D11 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VNC */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* DM2 */
+		SUNXI_FUNCTION(0x5, "eink"),		/* D7 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 7),  /* PD_EINT7 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	//Register Name: PD_CFG1
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D12 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VP3 */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* DP3 */
+		SUNXI_FUNCTION(0x5, "eink"),		/* D8 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 8),  /* PD_EINT8 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D13 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VN3 */
+		SUNXI_FUNCTION(0x4, "dsi0"), 		/* DM3 */
+		SUNXI_FUNCTION(0x5, "eink"), 		/* D9 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 9),  /* PD_EINT9 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D14 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* VP0 */
+		SUNXI_FUNCTION(0x4, "spi1"), 		/* CS */
+		SUNXI_FUNCTION(0x5, "eink"), 		/* D10 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 10),  /* PD_EINT10 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D11 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* VN0 */
+		SUNXI_FUNCTION(0x4, "spi1"), 		/* CLK */
+		SUNXI_FUNCTION(0x5, "eink"), 		/* D11 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 11),  /* PD_EINT11 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D12 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* VP1 */
+		SUNXI_FUNCTION(0x4, "spi1"), 		/* MOSI */
+		SUNXI_FUNCTION(0x5, "eink"), 		/* D12 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 12),  /* PD_EINT12 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D13 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* VN1 */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* MISO */
+		SUNXI_FUNCTION(0x5, "eink"),		/* D13 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 13),  /* PD_EINT13 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D14 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* VP2 */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* TX */
+		SUNXI_FUNCTION(0x5, "eink"),		/* D14 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 14),  /* PD_EINT14 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D15 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* VN2 */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* RX */
+		SUNXI_FUNCTION(0x5, "eink"),		/* D15 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 15),  /* PD_EINT15 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	//Register Name: PD_CFG2
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D18 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* VPC */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* RTS */
+		SUNXI_FUNCTION(0x5, "eink"),		/* OEH */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 16),  /* PD_EINT16 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D19 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* VNC */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* CTS */
+		SUNXI_FUNCTION(0x5, "eink"),		/* LEH */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 17),  /* PD_EINT17 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D20 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* VP3 */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* TX */
+		SUNXI_FUNCTION(0x5, "eink"),		/* CKH */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 18),  /* PD_EINT18 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 19),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D21 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* VN3 */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* TX */
+		SUNXI_FUNCTION(0x5, "eink"),		/* CKH */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 19),  /* PD_EINT19 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 20),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D22 */
+		SUNXI_FUNCTION(0x3, "pwm2"),		/* PWM */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* RTS */
+		SUNXI_FUNCTION(0x5, "eink"),		/* CKV */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 20),  /* PD_EINT20 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 21),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D23 */
+		SUNXI_FUNCTION(0x3, "pwm3"),		/* PWM */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* CTS */
+		SUNXI_FUNCTION(0x5, "eink"),		/* MODE */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 21),  /* PD_EINT21 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 22),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "pwm1"),		/* PWM */
+		SUNXI_FUNCTION(0x4, "twi0"),		/* SCK */
+		SUNXI_FUNCTION(0x5, "eink"),		/* STV */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 22),  /* PD_EINT22 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 23),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "pwm0"),		/* PWM */
+		SUNXI_FUNCTION(0x4, "twi0"),		/* SDA */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 23),  /* PD_EINT23 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+
+	/* HOLE */
+	//Register Name: PE_CFG0
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "csi_mclk0"),  /*  MCLK  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 0),  /* PE_EINT0 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi2"),  /*  SCK  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 1),  /* PE_EINT1 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi2"),  /*  SDA  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 2),  /* PE_EINT2 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi3"),  /*  SCK  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 3),  /* PE_EINT3 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi3"),  /*  SDA  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 4),  /* PE_EINT4 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "csi_mclk1"),  /*  MCLK  */
+		SUNXI_FUNCTION(0x3, "pll0"),  /* LOCK_DBG   */
+		SUNXI_FUNCTION(0x4, "h_i2s2"),  /*  MCLK  */
+		SUNXI_FUNCTION(0x5, "ledc"),  /*  LEDC  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 5),  /* PE_EINT5 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "bist0"),  /*  RESULT0  */
+		SUNXI_FUNCTION(0x4, "h_i2s2"),  /*  BCLK  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 6),  /* PE_EINT6 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "csi1"),  /*  SM_VS  */
+		SUNXI_FUNCTION(0x3, "bist0"),  /* RESULT1   */
+		SUNXI_FUNCTION(0x4, "h_i2s2"),  /*  LRCK  */
+		SUNXI_FUNCTION(0x5, "tcon0"),  /*  TRIG  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 7),  /* PE_EINT7 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	//Register Name: PE_CFG1
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "bist0"),  /* RESULT2   */
+		SUNXI_FUNCTION(0x4, "h_i2s2"),  /*  DOUT0  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 8),  /* PE_EINT8 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "bist0"),  /* RESULT3   */
+		SUNXI_FUNCTION(0x4, "h_i2s2"),  /*  DIN0  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 9),  /* PE_EINT9 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+
+	/* HOLE */
+	//Register Name: PF_CFG0
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),   /*  D1  */
+		SUNXI_FUNCTION(0x3, "jtag"),   /*  MS1  */
+		SUNXI_FUNCTION(0x4, "jtag_gpu"),   /*  MS_GPU  */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 0),  /*  PF_EINT0  */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* D0 */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* DI1 */
+		SUNXI_FUNCTION(0x4, "jtag_gpu"),		/* DI_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 1),  /*  PF_EINT1  */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* CLK */
+		SUNXI_FUNCTION(0x3, "uart0"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 2),  /*  PF_EINT2  */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* CMD */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* DO1 */
+		SUNXI_FUNCTION(0x4, "jtag_gpu"),		/* DO_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 3),  /*  PF_EINT3  */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* D3 */
+		SUNXI_FUNCTION(0x3, "uart0"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 4),  /*  PF_EINT4  */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* CK1 */
+		SUNXI_FUNCTION(0x4, "jtag_gpu"),		/* CK_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 5),  /*  PF_EINT5  */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 6),  /*  PF_EINT6  */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	/* HOLE */
+	//Register Name: PG_CFG0
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* CLK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 0),  /*  PG_EINT0  */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* CMD */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 1),  /*  PG_EINT1	*/
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* D0 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 2),  /*  PG_EINT2	*/
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* D1 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 3),  /*  PG_EINT3	*/
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* D2 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 4),  /*  PG_EINT4	*/
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* D3 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 5),  /*  PG_EINT5	*/
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),  /* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 6),  /*  PG_EINT6	*/
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 7),  /*  PG_EINT7	*/
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),		/* RTS */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 8),  /*  PG_EINT8	*/
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),		/* CTS */
+		SUNXI_FUNCTION(0x3, "h_i2s1"),		/* MCLK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 9),  /*  PG_EINT9	*/
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "h_i2s1"),		/* BCLK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 10),  /*  PG_EINT10	*/
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "h_i2s1"),		/* LRCK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 11),  /*  PG_EINT11	*/
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "h_i2s1"),		/* DOUT0 */
+		SUNXI_FUNCTION(0x4, "h_i2s1"),		/* DIN1 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 12),  /*  PG_EINT12	*/
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "h_i2s1"),		/* DIN0 */
+		SUNXI_FUNCTION(0x4, "h_i2s1"),		/* DOUT1 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 13),  /*  PG_EINT13	*/
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+
+	/* HOLE */
+	//Register Name: PH_CFG0
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi0"),	/* SCK */
+		SUNXI_FUNCTION(0x5, "gmac0"),	/* RXD1 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 0),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi0"),	/* SDA */
+		SUNXI_FUNCTION(0x5, "gmac0"),	/* RXD0 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 1),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi1"),	/* SCK */
+		SUNXI_FUNCTION(0x3, "cpu"),	/* CUR_W */
+		SUNXI_FUNCTION(0x5, "gmac0"),	/* RXCTL */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 2),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi1"),	/* SDA */
+		SUNXI_FUNCTION(0x3, "ir0"),	/* OUT */
+		SUNXI_FUNCTION(0x5, "gmac0"),	/* CLKIN */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 3),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart3"),	/* TX */
+		SUNXI_FUNCTION(0x3, "spi1"),	/* CS */
+		SUNXI_FUNCTION(0x4, "cpu"),	/* CUR_W */
+		SUNXI_FUNCTION(0x5, "gmac0"),	/* TXD1 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 4),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart3"),		/* RX */
+		SUNXI_FUNCTION(0x3, "spi1"),		/* CLK */
+		SUNXI_FUNCTION(0x4, "ledc"),
+		SUNXI_FUNCTION(0x5, "gmac0"),		/* TXD0 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 5),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart3"),		/* RTS */
+		SUNXI_FUNCTION(0x3, "spi1"),		/* MOSI */
+		SUNXI_FUNCTION(0x4, "spdif"),		/* IN */
+		SUNXI_FUNCTION(0x5, "gmac0"),		/* TXCK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 6),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart3"),		/* CTS */
+		SUNXI_FUNCTION(0x3, "spi1"),		/* MISO */
+		SUNXI_FUNCTION(0x4, "spdif"),		/* OUT */
+		SUNXI_FUNCTION(0x5, "gmac0"),		/* TXCTL */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 7),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	//Register Name: PH_CFG1
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* CLK */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* CS */
+		SUNXI_FUNCTION(0x4, "h_i2s2"),		/* MCLK */
+		SUNXI_FUNCTION(0x5, "h_i2s2"),		/* DIN2 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 8),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* DATA0 */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* CLK */
+		SUNXI_FUNCTION(0x4, "h_i2s2"),		/* BCLK */
+		SUNXI_FUNCTION(0x5, "gmac0"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 9),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* DATA1 */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* MOSI */
+		SUNXI_FUNCTION(0x4, "h_i2s2"),	/* LRCK */
+		SUNXI_FUNCTION(0x5, "gmac0"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 10),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* DATA2 */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* MISO */
+		SUNXI_FUNCTION(0x4, "h_i2s2"),	/* DOUT0 */
+		SUNXI_FUNCTION(0x5, "h_i2s2"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 11),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* DATA3 */
+		SUNXI_FUNCTION(0x3, "twi3"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "h_i2s2"),	/* DIN0 */
+		SUNXI_FUNCTION(0x5, "h_i2s2"),		/* DOUT1 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 12),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "twi3"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "h_i2s3"),	/* MCLK */
+		SUNXI_FUNCTION(0x5, "gmac0"),	/* 25 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 13),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x4, "h_i2s3"),	/* BCLK */
+		SUNXI_FUNCTION(0x5, "gmac0"),	/* RXD3 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 14),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x4, "h_i2s3"),	/* LRCK */
+		SUNXI_FUNCTION(0x5, "gmac0"),	/* RXD2 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 15),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "h_i2s3"),		/* DOUT0 */
+		SUNXI_FUNCTION(0x4, "h_i2s3"),	/* DIN1 */
+		SUNXI_FUNCTION(0x5, "gmac0"),	/* RXCK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 16),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "h_i2s3"),		/* DOUT1 */
+		SUNXI_FUNCTION(0x4, "h_i2s3"),	/* DIN0 */
+		SUNXI_FUNCTION(0x5, "gmac0"),	/* TXD3 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 17),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "cir"),		/* OUT */
+		SUNXI_FUNCTION(0x3, "h_i2s3"),		/* DOUT2 */
+		SUNXI_FUNCTION(0x4, "h_i2s3"),	/* DIN2 */
+		SUNXI_FUNCTION(0x5, "gmac0"),	/* TXD2 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 18),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 19),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "cir"),		/* IN */
+		SUNXI_FUNCTION(0x3, "h_i2s3"),		/* DOUT3 */
+		SUNXI_FUNCTION(0x4, "h_i2s3"),	/* DIN3 */
+		SUNXI_FUNCTION(0x5, "ledc"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 19),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+
+	/* HOLE */
+	//Register Name: PI_CFG0
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi4"),		/* SCK */
+		SUNXI_FUNCTION(0x3, "uart4"),		/* TX */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 0),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi4"),		/* SDA */
+		SUNXI_FUNCTION(0x3, "uart4"),		/* RX */
+		SUNXI_FUNCTION(0x4, "pwm2"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 1),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart5"),		/* TX */
+		SUNXI_FUNCTION(0x3, "spi1"),		/* CS */
+		SUNXI_FUNCTION(0x4, "pwm3"),
+		SUNXI_FUNCTION(0x5, "h_i2s2"),		/* BCLK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 2),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart5"),		/* RX */
+		SUNXI_FUNCTION(0x3, "spi1"),		/* CLK */
+		SUNXI_FUNCTION(0x4, "pwm4"),
+		SUNXI_FUNCTION(0x5, "h_i2s2"),		/* LRCK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 3),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart5"),		/* RTS */
+		SUNXI_FUNCTION(0x3, "spi1"),		/* MOSI */
+		SUNXI_FUNCTION(0x4, "pwm5"),
+		SUNXI_FUNCTION(0x5, "h_i2s2"),		/* DOUT0 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 4),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart5"),		/* CTS */
+		SUNXI_FUNCTION(0x3, "spi1"),		/* MISO */
+		SUNXI_FUNCTION(0x4, "pwm6"),
+		SUNXI_FUNCTION(0x5, "h_i2s2"),		/* DIN0 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 5),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart6"),		/* TX */
+		SUNXI_FUNCTION(0x4, "pwm7"),
+		SUNXI_FUNCTION(0x5, "spi2"),		/* CS */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 6),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart6"),		/* RX */
+		SUNXI_FUNCTION(0x4, "pwm8"),
+		SUNXI_FUNCTION(0x5, "spi2"),		/* CLK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 7),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	//Register Name: PI_CFG1
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi5"),		/* SCK */
+		SUNXI_FUNCTION(0x3, "cir"),		/* IN */
+		SUNXI_FUNCTION(0x4, "pwm9"),
+		SUNXI_FUNCTION(0x5, "spi2"),		/* MOSI */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 8),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi5"),		/* SDA */
+		SUNXI_FUNCTION(0x3, "sdc3"),		/* CLK */
+		SUNXI_FUNCTION(0x4, "pwm10"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 9),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "spdif"),		/* OUT */
+		SUNXI_FUNCTION(0x3, "sdc3"),		/* CMD */
+		SUNXI_FUNCTION(0x4, "pwm11"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 10),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart3"),		/* TX */
+		SUNXI_FUNCTION(0x3, "sdc3"),		/* DO */
+		SUNXI_FUNCTION(0x4, "pwm12"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 11),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart3"),		/* RX */
+		SUNXI_FUNCTION(0x3, "sdc3"),		/* D1 */
+		SUNXI_FUNCTION(0x4, "pwm13"),
+		SUNXI_FUNCTION(0x5, "spi2"),		/* MISO */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 12),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart6"),		/* CTS */
+		SUNXI_FUNCTION(0x3, "sdc3"),		/* D2 */
+		SUNXI_FUNCTION(0x4, "pwm14"),
+		SUNXI_FUNCTION(0x5, "h_i2s2"),		/* MCLK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 13),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart6"),		/* RTS */
+		SUNXI_FUNCTION(0x3, "sdc3"),		/* D3 */
+		SUNXI_FUNCTION(0x4, "pwm15"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 14),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+
+	/* HOLE */
+	//Register Name: PJ_CFG0
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D0 */
+		SUNXI_FUNCTION(0x3, "lvds2"),		/* DOP */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D0 */
+		SUNXI_FUNCTION(0x5, "gmac1"),		/* RXD1 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 0),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D1 */
+		SUNXI_FUNCTION(0x3, "lvds2"),		/* DON */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D1 */
+		SUNXI_FUNCTION(0x5, "gmac1"),		/* RXD0 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 1),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "lvds2"),		/* DIP */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D2 */
+		SUNXI_FUNCTION(0x5, "gmac1"),		/* RXCTL */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 2),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D3 */
+		SUNXI_FUNCTION(0x3, "lvds2"),		/* D1N */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D3 */
+		SUNXI_FUNCTION(0x5, "gmac1"),		/* CLKIN */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 3),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D4 */
+		SUNXI_FUNCTION(0x3, "lvds2"),		/* D2P */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D4 */
+		SUNXI_FUNCTION(0x5, "gmac1"),		/* TXD1 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 4),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D5 */
+		SUNXI_FUNCTION(0x3, "lvds2"),		/* D2N */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D5 */
+		SUNXI_FUNCTION(0x5, "gmac1"),		/* TXD0 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 5),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D6 */
+		SUNXI_FUNCTION(0x3, "lvds2"),		/* CKP */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D6 */
+		SUNXI_FUNCTION(0x5, "gmac1"),		/* TXCK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 6),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D7 */
+		SUNXI_FUNCTION(0x3, "lvds2"),		/* CKN */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D7 */
+		SUNXI_FUNCTION(0x5, "gmac1"),		/* TXCTL */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 7),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D8 */
+		SUNXI_FUNCTION(0x3, "lvds2"),		/* D3P */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D8 */
+		SUNXI_FUNCTION(0x5, "gmac1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 8),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D9 */
+		SUNXI_FUNCTION(0x3, "lvds2"),		/* D3N */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D9 */
+		SUNXI_FUNCTION(0x5, "gmac1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 9),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D10 */
+		SUNXI_FUNCTION(0x3, "lvds3"),		/* D0P */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D10 */
+		SUNXI_FUNCTION(0x5, "gmac1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 10),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D11 */
+		SUNXI_FUNCTION(0x3, "lvds3"),		/* D0N */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D11 */
+		SUNXI_FUNCTION(0x5, "gmac1"),		/* RXD3 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 10),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D12 */
+		SUNXI_FUNCTION(0x3, "lvds3"),		/* D1P */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D12 */
+		SUNXI_FUNCTION(0x5, "gmac1"),		/* RXD2 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 12),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D13 */
+		SUNXI_FUNCTION(0x3, "lvds3"),		/* D1N */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D13 */
+		SUNXI_FUNCTION(0x5, "gmac1"),		/* RXCK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 13),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D14 */
+		SUNXI_FUNCTION(0x3, "lvds3"),		/* D2P */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D14 */
+		SUNXI_FUNCTION(0x5, "gmac1"),		/* TXD3 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 14),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D15 */
+		SUNXI_FUNCTION(0x3, "lvds3"),		/* D2N */
+		SUNXI_FUNCTION(0x4, "eink1"),		/* D15 */
+		SUNXI_FUNCTION(0x5, "gmac1"),		/* TXD2 */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 15),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D16 */
+		SUNXI_FUNCTION(0x3, "lvds3"),		/* CKP */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* CS */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 16),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D17 */
+		SUNXI_FUNCTION(0x3, "lvds3"),		/* CKN */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* CLK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 17),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D18 */
+		SUNXI_FUNCTION(0x3, "lvds3"),		/* D3P */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* MOSI */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 18),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 19),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D19 */
+		SUNXI_FUNCTION(0x3, "lvds3"),		/* D3N */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* MISO */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 19),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 20),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D20 */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* CS */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* RTS */
+		SUNXI_FUNCTION(0x5, "uart2"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 20),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 21),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D21 */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* CLK */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* CTS */
+		SUNXI_FUNCTION(0x5, "uart2"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 21),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 22),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D22 */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* MOSI */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* TX */
+		SUNXI_FUNCTION(0x5, "uart2"),		/* RTS */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 22),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 23),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* D23 */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* MISO */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* RX */
+		SUNXI_FUNCTION(0x5, "uart2"),		/* CTS */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 23),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 24),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* CLK */
+		SUNXI_FUNCTION(0x3, "twi4"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 24),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 25),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* DE */
+		SUNXI_FUNCTION(0x3, "twi4"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 25),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 26),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* HSYNC */
+		SUNXI_FUNCTION(0x3, "twi5"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* RTS */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 26),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(J, 27),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd1"),		/* VSYNC */
+		SUNXI_FUNCTION(0x3, "twi5"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* CTS */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 8, 27),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+};
+
+static const unsigned int sun50iw10p1_irq_bank_map[] = {
+	SUNXI_BANK_OFFSET('B', 'A'),
+	SUNXI_BANK_OFFSET('C', 'A'),
+	SUNXI_BANK_OFFSET('D', 'A'),
+	SUNXI_BANK_OFFSET('E', 'A'),
+	SUNXI_BANK_OFFSET('F', 'A'),
+	SUNXI_BANK_OFFSET('G', 'A'),
+	SUNXI_BANK_OFFSET('H', 'A'),
+	SUNXI_BANK_OFFSET('I', 'A'),
+	SUNXI_BANK_OFFSET('J', 'A'),
+};
+
+static const struct sunxi_pinctrl_desc sun50iw10p1_pinctrl_data = {
+	.pins = sun50iw10p1_pins,
+	.npins = ARRAY_SIZE(sun50iw10p1_pins),
+	.irq_banks = ARRAY_SIZE(sun50iw10p1_irq_bank_map),
+	.irq_bank_map = sun50iw10p1_irq_bank_map,
+	.io_bias_cfg_variant = BIAS_VOLTAGE_PIO_POW_MODE_CTL,
+	.pf_power_source_switch = true,
+	.hw_type = SUNXI_PCTL_HW_TYPE_0,
+};
+
+static void *mem;
+static int mem_size;
+
+static int sun50iw10p1_pinctrl_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res)
+		return -EINVAL;
+	mem_size = resource_size(res);
+
+	mem = devm_kzalloc(&pdev->dev, mem_size, GFP_KERNEL);
+	if (!mem)
+		return -ENOMEM;
+
+#if IS_ENABLED(CONFIG_PINCTRL_SUNXI_DEBUGFS)
+	dev_set_name(&pdev->dev, "pio");
+#endif
+
+	return sunxi_pinctrl_init(pdev, &sun50iw10p1_pinctrl_data);
+}
+
+static int __maybe_unused sun50iw10p1_pinctrl_suspend_noirq(struct device *dev)
+{
+	struct sunxi_pinctrl *pctl = dev_get_drvdata(dev);
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&pctl->lock, flags);
+	memcpy(mem, pctl->membase, mem_size);
+	raw_spin_unlock_irqrestore(&pctl->lock, flags);
+
+	return 0;
+}
+
+static int __maybe_unused sun50iw10p1_pinctrl_resume_noirq(struct device *dev)
+{
+	struct sunxi_pinctrl *pctl = dev_get_drvdata(dev);
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&pctl->lock, flags);
+	memcpy(pctl->membase, mem, mem_size);
+	raw_spin_unlock_irqrestore(&pctl->lock, flags);
+
+	return 0;
+}
+
+static struct of_device_id sun50iw10p1_pinctrl_match[] = {
+	{ .compatible = "allwinner,sun50iw10p1-pinctrl", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, sun50iw10p1_pinctrl_match);
+
+static const struct dev_pm_ops sun50iw10p1_pinctrl_pm_ops = {
+	.suspend_noirq = sun50iw10p1_pinctrl_suspend_noirq,
+	.resume_noirq = sun50iw10p1_pinctrl_resume_noirq,
+};
+
+static struct platform_driver sun50iw10p1_pinctrl_driver = {
+	.probe	= sun50iw10p1_pinctrl_probe,
+	.driver	= {
+		.name		= "sun50iw10p1-pinctrl",
+		.pm = &sun50iw10p1_pinctrl_pm_ops,
+		.of_match_table	= sun50iw10p1_pinctrl_match,
+	},
+};
+
+static int __init sun50iw10p1_pio_init(void)
+{
+	return platform_driver_register(&sun50iw10p1_pinctrl_driver);
+}
+postcore_initcall(sun50iw10p1_pio_init);
+
+MODULE_AUTHOR("Huangshuosheng<huangshuosheng@allwinnertech.com>");
+MODULE_DESCRIPTION("Allwinner sun50iw10p1 pio pinctrl driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/pinctrl/sunxi/pinctrl-sun50iw12-r.c b/drivers/pinctrl/sunxi/pinctrl-sun50iw12-r.c
new file mode 100644
index 000000000..f67b756e7
--- /dev/null
+++ b/drivers/pinctrl/sunxi/pinctrl-sun50iw12-r.c
@@ -0,0 +1,110 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2020 frank@allwinnertech.com
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/pinctrl.h>
+
+#include "pinctrl-sunxi.h"
+
+static const struct sunxi_desc_pin sun50iw12_r_pins[] = {
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_i2c0"),		/* SCK */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_i2c0"),		/* SDA */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_uart0"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_uart0"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_jtag0"),		/* MS */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_jtag0"),		/* CK */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_jtag0"),		/* DO */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_jtag0"),		/* DI */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_i2c1"),		/* SCK */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_i2c1"),		/* SDA */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_pwm"),		/* S_PWM0 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_cpu"),		/* CUR_W */
+		SUNXI_FUNCTION(0x3, "s_cir"),		/* IN */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 11)),
+};
+
+static const struct sunxi_pinctrl_desc sun50iw12_r_pinctrl_data = {
+	.pins = sun50iw12_r_pins,
+	.npins = ARRAY_SIZE(sun50iw12_r_pins),
+	.pin_base = SUNXI_PIN_BASE('L'),
+	.irq_banks = 1,
+	.hw_type = SUNXI_PCTL_HW_TYPE_1,
+};
+
+static int sun50iw12_r_pinctrl_probe(struct platform_device *pdev)
+{
+#if IS_ENABLED(CONFIG_PINCTRL_SUNXI_DEBUGFS)
+	dev_set_name(&pdev->dev, "r_pio");
+#endif
+	return sunxi_pinctrl_init(pdev, &sun50iw12_r_pinctrl_data);
+}
+
+static struct of_device_id sun50iw12_r_pinctrl_match[] = {
+	{ .compatible = "allwinner,sun50iw12-r-pinctrl", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, sun50iw12_r_pinctrl_match);
+
+static struct platform_driver sun50iw12_r_pinctrl_driver = {
+	.probe	= sun50iw12_r_pinctrl_probe,
+	.driver	= {
+		.name		= "sun50iw12-r-pinctrl",
+		.of_match_table	= sun50iw12_r_pinctrl_match,
+	},
+};
+module_platform_driver(sun50iw12_r_pinctrl_driver);
+
+MODULE_DESCRIPTION("Allwinner sun50iw12 R_PIO pinctrl driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/pinctrl/sunxi/pinctrl-sun50iw12.c b/drivers/pinctrl/sunxi/pinctrl-sun50iw12.c
new file mode 100644
index 000000000..e0bf54f09
--- /dev/null
+++ b/drivers/pinctrl/sunxi/pinctrl-sun50iw12.c
@@ -0,0 +1,967 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2020 frank@allwinnertech.com
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/pinctrl.h>
+
+#include "pinctrl-sunxi.h"
+
+static const struct sunxi_desc_pin sun50iw12_pins[] = {
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* TX */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* CS */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* MS */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* CLK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* CK */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RTS */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* MOSI */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DO */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* CTS */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* MISO */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DI */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* SCK */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* MCLK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* MS_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* SDA */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* BCLK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* CK_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* SDA */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* LRCK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DO_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* IN */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* DOUT */
+		SUNXI_FUNCTION(0x4, "i2s0"),		/* DIN */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* OUT */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* DIN */
+		SUNXI_FUNCTION(0x4, "i2s0"),		/* DOUT */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart0"),		/* TX */
+		SUNXI_FUNCTION(0x3, "i2c0"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DI_CPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "i2c0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* TX */
+		SUNXI_FUNCTION(0x3, "i2c0"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DI_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 14)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 15)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 16)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 17)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 18)),
+	/* Hole */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* TX */
+		SUNXI_FUNCTION(0x3, "s_twi0"),		/* CS */
+		SUNXI_FUNCTION(0x4, "twi0"),		/* MS */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* RX */
+		SUNXI_FUNCTION(0x3, "s_twi0"),		/* CLK */
+		SUNXI_FUNCTION(0x4, "twi0"),		/* CK */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* RTS */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* MOSI */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DO */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* CTS */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* NISO */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DI */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi1"),		/* SCK */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* MCLK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* MS_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi1"),		/* SDA */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* BCLK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* CK_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* LRCK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DO_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "spdif"),		/* IN */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* DOUT */
+		SUNXI_FUNCTION(0x4, "i2s0"),		/* DIN */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "spdif"),		/* OUT */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* DIN */
+		SUNXI_FUNCTION(0x4, "i2s0"),		/* DOUT */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart0"),		/* TX */
+		SUNXI_FUNCTION(0x3, "i2c0"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DI_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "i2c0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "spdif"),		/* OUT */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* DIN */
+		SUNXI_FUNCTION(0x4, "i2s0"),		/* DOUT */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart0"),		/* TX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DI_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "i2c0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 21),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_cir0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "i2c0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 13)),
+	/* Hole */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* WE */
+		SUNXI_FUNCTION(0x3, "mmc2"),		/* DS */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* ALE */
+		SUNXI_FUNCTION(0x3, "mmc2"),		/* RST */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* CLE */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* MOSI */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* CE1 */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* CS */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* CE0 */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* MISO */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* RE */
+		SUNXI_FUNCTION(0x3, "mmc2"),		/* CLK */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* RE */
+		SUNXI_FUNCTION(0x3, "mmc2"),		/* CMD */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* RB1 */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* CS */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ7 */
+		SUNXI_FUNCTION(0x3, "mmc2"),		/* D3 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ6 */
+		SUNXI_FUNCTION(0x3, "mmc2"),		/* D4 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ5 */
+		SUNXI_FUNCTION(0x3, "mmc2"),		/* D0 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ4 */
+		SUNXI_FUNCTION(0x3, "mmc2"),		/* D5 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQS */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* CLK */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ3 */
+		SUNXI_FUNCTION(0x3, "mmc2"),		/* D1 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ2 */
+		SUNXI_FUNCTION(0x3, "mmc2"),		/* D6 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 14)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ1 */
+		SUNXI_FUNCTION(0x3, "mmc2"),		/* D2 */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* WP */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 15)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ0 */
+		SUNXI_FUNCTION(0x3, "mmc2"),		/* D7 */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* HOLD */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 16)),
+	/* Hole */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* D0P */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* DP0 */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D0 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D3 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* D0N */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* DM0 */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D1 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D4 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* D1P */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* DP1 */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D2 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D5 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* D1N */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* DM1 */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D3 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D6 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* D2P */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* CKP */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D4 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D7 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* D2N */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* CKM */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D5 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D10 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* CKP / PLL_TEST */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* P2 */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D6 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D11 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* CKN / PLLTEST */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* DM2 */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D7 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D12 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* D3P */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* DP3 */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D8 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* TX */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* CS */
+		SUNXI_FUNCTION(0x4, "dsi0"),		/* MS */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D9 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D14 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* D0P */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* CS */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D10 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D15 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* D0N */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* CLK */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D11 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D18 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* D1P */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* MOSI */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D12 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D19 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* D1N */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* MISO */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D13 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D20 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* D2P */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* TX */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D14 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 14)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D21 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* D2N */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* RX */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* D15 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 15)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D22 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* CKP */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* RTS */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* OEH */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 16)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D23 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* CKN */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* CTS */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* LEH */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 17)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* CLK */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* D3P */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* TX */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* CKH */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 18)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 19),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* DE */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* D3N */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* RX */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* STH */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 19)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 20),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* HSYNC */
+		SUNXI_FUNCTION(0x3, "pwm2"),
+		SUNXI_FUNCTION(0x4, "uart4"),		/* RTS */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* CKV */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 20)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 21),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* VSYNC */
+		SUNXI_FUNCTION(0x3, "pwm3"),
+		SUNXI_FUNCTION(0x4, "uart4"),		/* CTS */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* MODE */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 21)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 22),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "pwm1"),
+		SUNXI_FUNCTION(0x4, "i2c0"),		/* SCK */
+		SUNXI_FUNCTION(0x5, "eink0"),		/* STV */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 22)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 23),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "pwm0"),
+		SUNXI_FUNCTION(0x4, "i2c0"),		/* SDA */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 23)),
+	/* Hole */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* D1 */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* MS */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* MS_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* D0 */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* DI */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DI_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* CLK */
+		SUNXI_FUNCTION(0x3, "uart0"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* CMD */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* DO */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DO_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* D3 */
+		SUNXI_FUNCTION(0x3, "uart0"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* CK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* CK_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* D1 */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* MS */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* MS_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* D0 */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* DI */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DI_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* CLK */
+		SUNXI_FUNCTION(0x3, "uart0"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* CMD */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* DO */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DO_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* D3 */
+		SUNXI_FUNCTION(0x3, "uart0"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* CK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* CK_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 14)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 15)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* D1 */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* MS */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* MS_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 16)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* D0 */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* DI */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DI_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 17)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* CLK */
+		SUNXI_FUNCTION(0x3, "uart0"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 18)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 19),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* CMD */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* DO */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DO_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 19)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 20),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* D3 */
+		SUNXI_FUNCTION(0x3, "uart0"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 20)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 21),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* CK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* CK_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 21)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 22),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 22)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 23),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 23)),
+	/* Hole */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc1"),		/* CLK */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc1"),		/* CMD */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc1"),		/* D0 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc1"),		/* D1 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc1"),		/* D2 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "mmc1"),		/* D3 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),		/* RTS */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),		/* TX */
+		SUNXI_FUNCTION(0x3, "i2s1"),		/* MCLK */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "i2s1"),		/* BCLK */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "i2s1"),		/* LRCK */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "i2s1"),		/* DOUT */
+		SUNXI_FUNCTION(0x4, "i2s1"),		/* DIN */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "i2s1"),		/* DON */
+		SUNXI_FUNCTION(0x4, "i2s1"),		/* DOUT */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "i2s1"),		/* DIN */
+		SUNXI_FUNCTION(0x4, "i2s1"),		/* DOUT */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 14)),
+	/* Hole */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "i2c0"),		/* SCK */
+		SUNXI_FUNCTION(0x5, "emac"),		/* RXD */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "i2c0"),		/* SDA */
+		SUNXI_FUNCTION(0x5, "emac"),		/* RXD */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "i2c1"),		/* SCK */
+		SUNXI_FUNCTION(0x3, "cpu"),		/* CUR_W */
+		SUNXI_FUNCTION(0x5, "emac"),		/* RXTCL/CRS_DV */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "i2c1"),		/* SDA */
+		SUNXI_FUNCTION(0x3, "cir"),		/* OUT */
+		SUNXI_FUNCTION(0x5, "emac"),		/* CLKIN/RXER */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart3"),		/* RX */
+		SUNXI_FUNCTION(0x3, "spi1"),		/* CS */
+		SUNXI_FUNCTION(0x4, "cpu"),		/* CUR_W */
+		SUNXI_FUNCTION(0x5, "emac"),		/* TXD1 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart3"),		/* RX */
+		SUNXI_FUNCTION(0x3, "spi1"),		/* CLK */
+		SUNXI_FUNCTION(0x4, "ldec"),
+		SUNXI_FUNCTION(0x5, "emac"),		/* TXD */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart3"),		/* RTS */
+		SUNXI_FUNCTION(0x3, "spi1"),		/* MOSI */
+		SUNXI_FUNCTION(0x4, "spdif"),		/* IN */
+		SUNXI_FUNCTION(0x5, "emac"),		/* TXCK */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart3"),		/* CTS */
+		SUNXI_FUNCTION(0x3, "spi1"),		/* MISO */
+		SUNXI_FUNCTION(0x4, "spdif"),		/* OUT */
+		SUNXI_FUNCTION(0x5, "emac"),		/* TXCTL/EN */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* CLK */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* CS */
+		SUNXI_FUNCTION(0x4, "i2s2"),		/* MCLK */
+		SUNXI_FUNCTION(0x5, "i2s2"),		/* DIN */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dimc"),		/* DATA0 */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* CLK */
+		SUNXI_FUNCTION(0x4, "i2s2"),		/* BCLK */
+		SUNXI_FUNCTION(0x5, "mdc"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* DATA1 */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* MOSI */
+		SUNXI_FUNCTION(0x4, "i2s2"),		/* LRCK */
+		SUNXI_FUNCTION(0x5, "mdio"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* DATA2 */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* MISO */
+		SUNXI_FUNCTION(0x4, "i2s2"),		/* DOUT */
+		SUNXI_FUNCTION(0x5, "i2s2"),		/* DIN */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* DATA3 */
+		SUNXI_FUNCTION(0x3, "i2c3"),		/* SCK */
+		SUNXI_FUNCTION(0x5, "i2s2"),		/* DOUT */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "i2c3"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "i2s3"),		/* MCLK */
+		SUNXI_FUNCTION(0x5, "emac"),		/* 25 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x4, "i2s3"),		/* BCLK */
+		SUNXI_FUNCTION(0x5, "emac"),		/* RXD3 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 14)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x4, "i2s3"),		/* LRCK */
+		SUNXI_FUNCTION(0x5, "emac"),		/* RXD2 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 15)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "cir"),		/* IN */
+		SUNXI_FUNCTION(0x3, "i2s3"),		/* DOUT */
+		SUNXI_FUNCTION(0x4, "i2s3"),		/* DIN */
+		SUNXI_FUNCTION(0x5, "ledc"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 16)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "i2s3"),		/* DOUT */
+		SUNXI_FUNCTION(0x4, "i2s3"),		/* DIN */
+		SUNXI_FUNCTION(0x5, "emac"),		/* TXD3 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 17)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "cir"),		/* OUT */
+		SUNXI_FUNCTION(0x3, "i2s3"),		/* DOUT */
+		SUNXI_FUNCTION(0x4, "i2s3"),		/* DIN */
+		SUNXI_FUNCTION(0x5, "emac"),		/* TXD2 */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 18)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 19),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "cir"),		/* IN */
+		SUNXI_FUNCTION(0x3, "i2s3"),		/* DOUT */
+		SUNXI_FUNCTION(0x4, "i2s3"),		/* DIN */
+		SUNXI_FUNCTION(0x5, "ledc"),
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 19)),
+};
+
+static const unsigned int sun50iw12_irq_bank_map[] = {
+	SUNXI_BANK_OFFSET('A', 'A'),
+	SUNXI_BANK_OFFSET('B', 'A'),
+	SUNXI_BANK_OFFSET('C', 'A'),
+	SUNXI_BANK_OFFSET('D', 'A'),
+	SUNXI_BANK_OFFSET('F', 'A'),
+	SUNXI_BANK_OFFSET('G', 'A'),
+	SUNXI_BANK_OFFSET('H', 'A'),
+};
+
+static const struct sunxi_pinctrl_desc sun50iw12_pinctrl_data = {
+	.pins = sun50iw12_pins,
+	.npins = ARRAY_SIZE(sun50iw12_pins),
+	.irq_banks = ARRAY_SIZE(sun50iw12_irq_bank_map),
+	.irq_bank_map = sun50iw12_irq_bank_map,
+	.io_bias_cfg_variant = BIAS_VOLTAGE_PIO_POW_MODE_CTL,
+	.pf_power_source_switch = true,
+	.hw_type = SUNXI_PCTL_HW_TYPE_1,
+};
+
+static int sun50iw12_pinctrl_probe(struct platform_device *pdev)
+{
+#if IS_ENABLED(CONFIG_PINCTRL_SUNXI_DEBUGFS)
+	dev_set_name(&pdev->dev, "pio");
+#endif
+	return sunxi_pinctrl_init(pdev, &sun50iw12_pinctrl_data);
+}
+
+static struct of_device_id sun50iw12_pinctrl_match[] = {
+	{ .compatible = "allwinner,sun50iw12-pinctrl", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, sun50iw12_pinctrl_match);
+
+static struct platform_driver sun50iw12_pinctrl_driver = {
+	.probe	= sun50iw12_pinctrl_probe,
+	.driver	= {
+		.name		= "sun50iw12-pinctrl",
+		.of_match_table	= sun50iw12_pinctrl_match,
+	},
+};
+module_platform_driver(sun50iw12_pinctrl_driver);
+
+MODULE_DESCRIPTION("Allwinner sun50iw12 pio pinctrl driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/pinctrl/sunxi/pinctrl-sun50iw9-r.c b/drivers/pinctrl/sunxi/pinctrl-sun50iw9-r.c
new file mode 100644
index 000000000..11584317d
--- /dev/null
+++ b/drivers/pinctrl/sunxi/pinctrl-sun50iw9-r.c
@@ -0,0 +1,57 @@
+// SPDX-License-Identifier: (GPL-2.0+ or MIT)
+/*
+ * Copyright (c) 2020 frank@allwinnertech.com
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/pinctrl.h>
+#include "pinctrl-sunxi.h"
+
+static const struct sunxi_desc_pin sun50iw9_r_pins[] = {
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "s_twi0")),		/* SCK */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "s_twi0")),		/* SDA */
+};
+
+static const struct sunxi_pinctrl_desc sun50iw9_r_pinctrl_data = {
+	.pins = sun50iw9_r_pins,
+	.npins = ARRAY_SIZE(sun50iw9_r_pins),
+	.pin_base = SUNXI_PIN_BASE('L'),
+	.hw_type = SUNXI_PCTL_HW_TYPE_0,
+};
+
+static int sun50iw9_r_pinctrl_probe(struct platform_device *pdev)
+{
+	return sunxi_pinctrl_init(pdev, &sun50iw9_r_pinctrl_data);
+}
+
+static struct of_device_id sun50iw9_r_pinctrl_match[] = {
+	{ .compatible = "allwinner,sun50iw9-r-pinctrl", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, sun50iw9_r_pinctrl_match);
+
+static struct platform_driver sun50iw9_r_pinctrl_driver = {
+	.probe	= sun50iw9_r_pinctrl_probe,
+	.driver	= {
+		.name		= "sun50iw9-r-pinctrl",
+		.of_match_table	= sun50iw9_r_pinctrl_match,
+	},
+};
+
+static int __init sun50iw9_r_pio_init(void)
+{
+	return platform_driver_register(&sun50iw9_r_pinctrl_driver);
+}
+postcore_initcall(sun50iw9_r_pio_init);
+
+MODULE_DESCRIPTION("Allwinner sun50iw9 R_PIO pinctrl driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/pinctrl/sunxi/pinctrl-sun50iw9.c b/drivers/pinctrl/sunxi/pinctrl-sun50iw9.c
new file mode 100644
index 000000000..4971e4fdf
--- /dev/null
+++ b/drivers/pinctrl/sunxi/pinctrl-sun50iw9.c
@@ -0,0 +1,991 @@
+// SPDX-License-Identifier: (GPL-2.0+ or MIT)
+/*
+ * Copyright (c) 2020 frank@allwinnertech.com
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/pinctrl.h>
+
+#include "pinctrl-sunxi.h"
+
+static const struct sunxi_desc_pin sun50iw9_pins[] = {
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 0),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "gmac1"),		/* RXD1 */
+		  SUNXI_FUNCTION(0x4, "twi0"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "gmac1"),		/* RXD0 */
+		  SUNXI_FUNCTION(0x4, "twi0"),		/* SDA */
+		  SUNXI_FUNCTION(0x5, "Vdevice"),	/* XXX For Test */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "gmac1"),		/* CRTS_DV */
+		  SUNXI_FUNCTION(0x4, "twi1"),		/* SCK */
+		  SUNXI_FUNCTION(0x5, "Vdevice"),	/* XXX For Test */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "gmac1"),		/* RXER */
+		  SUNXI_FUNCTION(0x4, "twi1"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 4),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "gmac1"),		/* TXD1*/
+		  SUNXI_FUNCTION(0x4, "ac_adcy"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "gmac1"),		/* TXD0 */
+		  SUNXI_FUNCTION(0x3, "i2s0"),		/* DOUT0 */
+		  SUNXI_FUNCTION(0x4, "ac_adcx"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "gmac1"),		/* TXCK */
+		  SUNXI_FUNCTION(0x3, "i2s0"),		/* MCLK */
+		  SUNXI_FUNCTION(0x4, "ac_mclk"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 7),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "gmac1"),		/* TXEN */
+		  SUNXI_FUNCTION(0x3, "i2s0"),		/* BCLK */
+		  SUNXI_FUNCTION(0x4, "ac_sync"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 8),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "gmac1"),		/* MDC */
+		  SUNXI_FUNCTION(0x3, "i2s0"),		/* LRCK */
+		  SUNXI_FUNCTION(0x4, "ac_adcl"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 9),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "gmac1"),		/* MDIO */
+		  SUNXI_FUNCTION(0x3, "i2s0"),		/* DIN0 */
+		  SUNXI_FUNCTION(0x4, "ac_adcr"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 10),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "twi3"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 11),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "twi3"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 12),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "pwm5"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 12)),
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 0),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* WE */
+		  SUNXI_FUNCTION(0x3, "sdc2"),		/* DS */
+		  SUNXI_FUNCTION(0x4, "spi0"),		/* CLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* ALE */
+		  SUNXI_FUNCTION(0x3, "sdc2"),		/* RST */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* CLE */
+		  SUNXI_FUNCTION(0x4, "spi0"),		/* MOSI */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* CE1 */
+		  SUNXI_FUNCTION(0x4, "spi0"),		/* CS0 */
+		  SUNXI_FUNCTION(0x5, "boot"),		/* SEL1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 4),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* CE0 */
+		  SUNXI_FUNCTION(0x4, "spi0"),		/* MISO */
+		  SUNXI_FUNCTION(0x5, "boot"),		/* SEL2 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* RE */
+		  SUNXI_FUNCTION(0x3, "sdc2"),		/* CLK */
+		  SUNXI_FUNCTION(0x5, "boot"),		/* SEL3 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* RB0 */
+		  SUNXI_FUNCTION(0x3, "sdc2"),		/* CMD */
+		  SUNXI_FUNCTION(0x5, "boot"),		/* SEL4 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 7),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* RB1 */
+		  SUNXI_FUNCTION(0x4, "spi0"),		/* CS1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 8),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ7 */
+		  SUNXI_FUNCTION(0x3, "sdc2"),		/* D3 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 9),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ6 */
+		  SUNXI_FUNCTION(0x3, "sdc2"),		/* D4 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 10),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ5 */
+		  SUNXI_FUNCTION(0x3, "sdc2"),		/* D0 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 11),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ4 */
+		  SUNXI_FUNCTION(0x3, "sdc2"),		/* D5 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 12),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQS */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 13),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ3 */
+		  SUNXI_FUNCTION(0x3, "sdc2"),		/* D1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 14),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ2 */
+		  SUNXI_FUNCTION(0x3, "sdc2"),		/* D6 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 14)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 15),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ1 */
+		  SUNXI_FUNCTION(0x3, "sdc2"),		/* D2 */
+		  SUNXI_FUNCTION(0x4, "spi0"),		/* WP */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 15)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 16),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "nand0"),		/* DQ0 */
+		  SUNXI_FUNCTION(0x3, "sdc2"),		/* D7 */
+		  SUNXI_FUNCTION(0x4, "spi0"),		/* HOLD */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 16)),
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 0),
+		 SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D0 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* VP0 */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* CLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D1 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* VN0 */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* ERR */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D2 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* VP1 */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* SYNC */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D3 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* VN1 */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* DVLD */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 4),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D4 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* VP2 */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* D0 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D5 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* VN2 */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* D1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D6 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* VPC */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* D2 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 7),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D7 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* VNC */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* D3 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 8),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D8 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* VP3 */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* D4 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 9),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D9 */
+		  SUNXI_FUNCTION(0x3, "lvds0"),		/* VN3 */
+		  SUNXI_FUNCTION(0x4, "ts0"), 		/* D5 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 10),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D10 */
+		  SUNXI_FUNCTION(0x3, "lvds1"),		/* VP0 */
+		  SUNXI_FUNCTION(0x4, "ts0"), 		/* D6 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 11),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D11 */
+		  SUNXI_FUNCTION(0x3, "lvds1"),		/* VN0 */
+		  SUNXI_FUNCTION(0x4, "ts0"), 		/* D7 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 12),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D12 */
+		  SUNXI_FUNCTION(0x3, "lvds1"),		/* VP1 */
+		  SUNXI_FUNCTION(0x4, "sim0"), 		/* VPPEN */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 13),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D13 */
+		  SUNXI_FUNCTION(0x3, "lvds1"),		/* VN1 */
+		  SUNXI_FUNCTION(0x4, "sim0"),		/* VPPPP */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 14),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D14 */
+		  SUNXI_FUNCTION(0x3, "lvds1"),		/* VP2 */
+		  SUNXI_FUNCTION(0x4, "sim0"),		/* PWREN */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 14)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 15),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D15 */
+		  SUNXI_FUNCTION(0x3, "lvds1"),		/* VN2 */
+		  SUNXI_FUNCTION(0x4, "sim0"),		/* CLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 15)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 16),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D16 */
+		  SUNXI_FUNCTION(0x3, "lvds1"),		/* VPC */
+		  SUNXI_FUNCTION(0x4, "sim0"),		/* DATA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 16)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 17),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D17 */
+		  SUNXI_FUNCTION(0x3, "lvds1"),		/* VNC */
+		  SUNXI_FUNCTION(0x4, "sim0"),		/* RST */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 17)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 18),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D18 */
+		  SUNXI_FUNCTION(0x3, "lvds1"),		/* VP3 */
+		  SUNXI_FUNCTION(0x4, "sim0"),		/* DET */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 18)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 19),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D19 */
+		  SUNXI_FUNCTION(0x3, "lvds1"),		/* VN3 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 19)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 20),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D20 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 20)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 21),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D21 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 21)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 22),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D22 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 22)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 23),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* D23 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 23)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 24),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* CLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 24)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 25),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* DE */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 25)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 26),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* HSYNC */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 26)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 27),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "lcd0"),		/* VSYNC */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 27)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 28),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "pwm0"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 28)),
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 0),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* CLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi_mclk1"),	/* MCLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* HSYNC */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* VSYNC */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 3)),
+	SUNXI_PIN (SUNXI_PINCTRL_PIN(E, 4),
+		   SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D0 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D2 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 7),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D3 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 8),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D4 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 9),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D5 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 10),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D6 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 11),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D7 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 12),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D8 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 13),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D9 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 14),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D10 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 14)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 15),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D11 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 15)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 16),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D12 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 16)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 17),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D13 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 17)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 18),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D14 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 18)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 19),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi1"),		/* D15 */
+		  SUNXI_FUNCTION(0x3, "jtag"),		/* MS */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 19)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 20),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi_cci1"),	/* SCK */
+		  SUNXI_FUNCTION(0x3, "jtag"),		/* CK */
+		  SUNXI_FUNCTION(0x5, "twi2"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 20)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 21),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "csi_cci1"),	/* SDA */
+		  SUNXI_FUNCTION(0x3, "jtag"),		/* DO */
+		  SUNXI_FUNCTION(0x5, "twi2"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 21)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 22),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "ncsi_fsin0"),	/* FSIN0 */
+		  SUNXI_FUNCTION(0x3, "jtag"),		/* DI */
+		  SUNXI_FUNCTION(0x4, "TCON"),		/* TRIG0 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 22)),
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 0),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "sdc0"),		/* D1 */
+		  SUNXI_FUNCTION(0x3, "jtag"),		/* MS1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "sdc0"),		/* D0 */
+		  SUNXI_FUNCTION(0x3, "jtag"),		/* DI1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "sdc0"),		/* CLK */
+		  SUNXI_FUNCTION(0x3, "uart0"),		/* TX */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "sdc0"),		/* CMD */
+		  SUNXI_FUNCTION(0x3, "jtag"),		/* DO1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 4),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "sdc0"),		/* D3 */
+		  SUNXI_FUNCTION(0x3, "uart0"),		/* RX */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "sdc0"),		/* D2 */
+		  SUNXI_FUNCTION(0x3, "jtag"),		/* CK1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "jtag"),		/* SEL */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 6)),
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 0),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "sdc1"),		/* CLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "sdc1"),		/* CMD */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "sdc1"),		/* D0 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "sdc1"),		/* D1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 4),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "sdc1"),		/* D2 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "sdc1"),		/* D3 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart1"),		/* TX */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 7),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart1"),		/* RX */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 8),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart1"),		/* RTS */
+		  SUNXI_FUNCTION(0x3, "pll0"),		/* STA_DB */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 9),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart1"),		/* CTS */
+		  SUNXI_FUNCTION(0x3, "pll0"),		/* TEST_GPIO */
+		  SUNXI_FUNCTION(0x5, "ac"),		/* ADCY */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 10),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "i2s2"),		/* MCLK */
+		  SUNXI_FUNCTION(0x3, "x32kfout"),
+		  SUNXI_FUNCTION(0x5, "ac"),		/* MCLK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 11),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "i2s2"),		/* BCLK */
+		  SUNXI_FUNCTION(0x5, "ac"),		/* SYNC */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 12),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "i2s2"),		/* LRLK */
+		  SUNXI_FUNCTION(0x4, "bist0"),		/* RESULT1 */
+		  SUNXI_FUNCTION(0x5, "ac"),		/* ADCL */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 13),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "i2s2_dout0"),	/* DOUT0 */
+		  SUNXI_FUNCTION(0x3, "i2s2_din1"),	/* DIN1 */
+		  SUNXI_FUNCTION(0x4, "bist0"),		/* RESULT2 */
+		  SUNXI_FUNCTION(0x5, "ac"),		/* ADCR */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 14),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "i2s2_din0"),	/* DIN0 */
+		  SUNXI_FUNCTION(0x3, "i2s2_dout1"),	/* DOUT1 */
+		  SUNXI_FUNCTION(0x4, "bist0"),		/* RESULT3 */
+		  SUNXI_FUNCTION(0x5, "ac"),		/* ADCX */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 14)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 15),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart2"),		/* TX */
+		  SUNXI_FUNCTION(0x5, "twi4"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 15)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 16),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart2"),		/* RX */
+		  SUNXI_FUNCTION(0x5, "twi4"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 16)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 17),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart2"),		/* RTS */
+		  SUNXI_FUNCTION(0x3, "csi_cci0"),	/* SCK */
+		  SUNXI_FUNCTION(0x5, "twi3"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 17)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 18),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart2"),		/* CTS */
+		  SUNXI_FUNCTION(0x3, "csi_cci0"),	/* SDA */
+		  SUNXI_FUNCTION(0x5, "twi3"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 18)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 19),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "csi_mclk0"),	/* MCLK */
+		  SUNXI_FUNCTION(0x4, "pwm1"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 5, 19)),
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 0),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart0"),		/* TX */
+		  SUNXI_FUNCTION(0x3, "can0"),		/* TX */
+		  SUNXI_FUNCTION(0x4, "pwm3"),
+		  SUNXI_FUNCTION(0x5, "twi1"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart0"),		/* RX */
+		  SUNXI_FUNCTION(0x3, "can0"),		/* RX */
+		  SUNXI_FUNCTION(0x4, "pwm4"),
+		  SUNXI_FUNCTION(0x5, "twi1"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart5"),		/* TX */
+		  SUNXI_FUNCTION(0x3, "spdif"),		/* CLK */
+		  SUNXI_FUNCTION(0x4, "pwm2"),
+		  SUNXI_FUNCTION(0x5, "twi2"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart5"),		/* RX */
+		  SUNXI_FUNCTION(0x3, "spdif"),		/* IN */
+		  SUNXI_FUNCTION(0x4, "pwm1"),
+		 SUNXI_FUNCTION(0x5, "twi2"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 4),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "spdif"),		/* OUT */
+		  SUNXI_FUNCTION(0x5, "twi3"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart2"),		/* TX */
+		  SUNXI_FUNCTION(0x3, "i2s3"),		/* MCLK */
+		  SUNXI_FUNCTION(0x4, "spi1"),		/* CS0 */
+		  SUNXI_FUNCTION(0x5, "twi3"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart2"),		/* RX */
+		  SUNXI_FUNCTION(0x3, "i2s3"),		/* BCLK */
+		  SUNXI_FUNCTION(0x4, "spi1"),		/* CLK */
+		  SUNXI_FUNCTION(0x5, "twi4"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 7),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart2"),		/* RTS */
+		  SUNXI_FUNCTION(0x3, "i2s3"),		/* LRLK */
+		  SUNXI_FUNCTION(0x4, "spi1"),		/* MOSI */
+		  SUNXI_FUNCTION(0x5, "twi4"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 8),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "uart2"),		/* CTS */
+		  SUNXI_FUNCTION(0x3, "i2s3_dout0"),	/* DOUT0 */
+		  SUNXI_FUNCTION(0x4, "spi1"),		/* MISO */
+		  SUNXI_FUNCTION(0x5, "i2s3_din1"),	/* DIN1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 9),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "i2s3_din0"),	/* DIN0 */
+		  SUNXI_FUNCTION(0x4, "spi1"),		/* CS1 */
+		  SUNXI_FUNCTION(0x5, "i2s3_dout1"),	/* DOUT1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 10),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x3, "ir"),		/* RX */
+		  SUNXI_FUNCTION(0x4, "tcon"),		/* TRIG1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 6, 10)),
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 0),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),		/* RXD3 / RMII_NULL */
+		  SUNXI_FUNCTION(0x3, "dmic"),		/* CLK */
+		  SUNXI_FUNCTION(0x4, "i2s0"),		/* MCLK */
+		  SUNXI_FUNCTION(0x5, "hdmi"),		/* SCL */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 1),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),		/* RXD2 / RMII_NULL */
+		  SUNXI_FUNCTION(0x3, "dmic"),		/* DATA0 */
+		  SUNXI_FUNCTION(0x4, "i2s0"),		/* BCLK */
+		  SUNXI_FUNCTION(0x5, "hdmi"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 2),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),		/* RXD1 / RMII_RXD1 */
+		  SUNXI_FUNCTION(0x3, "dmic"),		/* DATA1 */
+		  SUNXI_FUNCTION(0x4, "i2s0"),		/* LRLK */
+		  SUNXI_FUNCTION(0x5, "hdmi"),		/* CEC */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 3),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),		/* RXD0 / RMII_RXD0 */
+		  SUNXI_FUNCTION(0x3, "dmic"),		/* DATA2 */
+		  SUNXI_FUNCTION(0x4, "i2s0_dout0"),	/* DOUT0 */
+		  SUNXI_FUNCTION(0x5, "i2s0_din1"),	/* DIN1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 4),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),		/* RXCK / RMII_NULL */
+		  SUNXI_FUNCTION(0x3, "dmic"),		/* DATA3 */
+		  SUNXI_FUNCTION(0x4, "i2s0_din0"),	/* DIN0 */
+		  SUNXI_FUNCTION(0x5, "i2s0_dout1"),	/* DOUT1 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 5),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),		/* RXCT / RMII_CRS_DV */
+		  SUNXI_FUNCTION(0x3, "uart2"),		/* TX */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* CLK */
+		  SUNXI_FUNCTION(0x5, "twi0"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 6),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),		/* NULL / RMII_RXER */
+		  SUNXI_FUNCTION(0x3, "uart2"),		/* RX */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* ERR */
+		  SUNXI_FUNCTION(0x5, "twi0"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 7),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),		/* TXD3 / RMII_NULL */
+		  SUNXI_FUNCTION(0x3, "uart2"),		/* RTS */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* SYNC */
+		  SUNXI_FUNCTION(0x5, "twi1"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 8),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),		/* TXD2 / RMII_NULL */
+		  SUNXI_FUNCTION(0x3, "uart2"),		/* RTS */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* DVLD */
+		  SUNXI_FUNCTION(0x5, "twi1"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 9),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),		/* TXD1 / RMII_TXD1 */
+		  SUNXI_FUNCTION(0x3, "uart3"),		/* TX */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* D0 */
+		  SUNXI_FUNCTION(0x5, "twi2"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 10),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),		/* TXD0 / RMII_TXD0 */
+		  SUNXI_FUNCTION(0x3, "uart3"),		/* RX */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* D1 */
+		  SUNXI_FUNCTION(0x5, "twi2"),		/* SDA */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 11),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),		/* TXCK / RMII_TXCK */
+		  SUNXI_FUNCTION(0x3, "uart3"),		/* RTS */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* D2 */
+		  SUNXI_FUNCTION(0x5, "pwm1"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 12),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),		/* TXCTL / RMII_TXEN */
+		  SUNXI_FUNCTION(0x3, "uart3"),		/* CTS */
+		  SUNXI_FUNCTION(0x4, "twi3"),		/* SDA */
+		  SUNXI_FUNCTION(0x5, "pwm2"),		/* SCK */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 13),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),		/* CLKIN / RMII_NULL */
+		  SUNXI_FUNCTION(0x3, "uart4"),		/* TX */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* D4 */
+		  SUNXI_FUNCTION(0x5, "pwm3"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 14),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),
+		  SUNXI_FUNCTION(0x3, "uart4"),		/* RX */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* D5 */
+		  SUNXI_FUNCTION(0x5, "pwm4"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 14)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 15),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "emac0"),
+		  SUNXI_FUNCTION(0x3, "uart4"),		/* RTS */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* D6 */
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 15)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(I, 16),
+		  SUNXI_FUNCTION(0x0, "gpio_in"),
+		  SUNXI_FUNCTION(0x1, "gpio_out"),
+		  SUNXI_FUNCTION(0x2, "ephy_25m"),
+		  SUNXI_FUNCTION(0x3, "uart4"),		/* CTS */
+		  SUNXI_FUNCTION(0x4, "ts0"),		/* D7 */
+		  SUNXI_FUNCTION(0x5, "x32kfout"),
+		  SUNXI_FUNCTION_IRQ_BANK(0x6, 7, 16)),
+};
+
+static const unsigned int sun50iw9_irq_bank_map[] = {
+	SUNXI_BANK_OFFSET('A', 'A'),
+	SUNXI_BANK_OFFSET('C', 'A'),
+	SUNXI_BANK_OFFSET('D', 'A'),
+	SUNXI_BANK_OFFSET('E', 'A'),
+	SUNXI_BANK_OFFSET('F', 'A'),
+	SUNXI_BANK_OFFSET('G', 'A'),
+	SUNXI_BANK_OFFSET('H', 'A'),
+	SUNXI_BANK_OFFSET('I', 'A'),
+};
+
+static const struct sunxi_pinctrl_desc sun50iw9_pinctrl_data = {
+	.pins = sun50iw9_pins,
+	.npins = ARRAY_SIZE(sun50iw9_pins),
+	.irq_banks = ARRAY_SIZE(sun50iw9_irq_bank_map),
+	.irq_bank_map = sun50iw9_irq_bank_map,
+	.io_bias_cfg_variant = BIAS_VOLTAGE_PIO_POW_MODE_CTL,
+	.pf_power_source_switch = true,
+	.hw_type = SUNXI_PCTL_HW_TYPE_0,
+};
+
+static void *mem;
+static int mem_size;
+
+static int sun50iw9_pinctrl_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res)
+		return -EINVAL;
+	mem_size = resource_size(res);
+
+	mem = devm_kzalloc(&pdev->dev, mem_size, GFP_KERNEL);
+	if (!mem)
+		return -ENOMEM;
+
+	return sunxi_pinctrl_init(pdev, &sun50iw9_pinctrl_data);
+}
+
+static int __maybe_unused sun50iw9_pinctrl_suspend_noirq(struct device *dev)
+{
+	struct sunxi_pinctrl *pctl = dev_get_drvdata(dev);
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&pctl->lock, flags);
+	memcpy(mem, pctl->membase, mem_size);
+	raw_spin_unlock_irqrestore(&pctl->lock, flags);
+
+	return 0;
+}
+
+static int __maybe_unused sun50iw9_pinctrl_resume_noirq(struct device *dev)
+{
+	struct sunxi_pinctrl *pctl = dev_get_drvdata(dev);
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&pctl->lock, flags);
+	memcpy(pctl->membase, mem, mem_size);
+	raw_spin_unlock_irqrestore(&pctl->lock, flags);
+
+	return 0;
+}
+
+static struct of_device_id sun50iw9_pinctrl_match[] = {
+	{ .compatible = "allwinner,sun50iw9-pinctrl", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, sun50iw9_pinctrl_match);
+
+static const struct dev_pm_ops sun50iw9_pinctrl_pm_ops = {
+	.suspend_noirq = sun50iw9_pinctrl_suspend_noirq,
+	.resume_noirq = sun50iw9_pinctrl_resume_noirq,
+};
+
+static struct platform_driver sun50iw9_pinctrl_driver = {
+	.probe	= sun50iw9_pinctrl_probe,
+	.driver	= {
+		.name		= "sun50iw9-pinctrl",
+		.pm = &sun50iw9_pinctrl_pm_ops,
+		.of_match_table	= sun50iw9_pinctrl_match,
+	},
+};
+
+static int __init sun50iw9_pio_init(void)
+{
+	return platform_driver_register(&sun50iw9_pinctrl_driver);
+}
+postcore_initcall(sun50iw9_pio_init);
+
+MODULE_DESCRIPTION("Allwinner sun50iw9 pio pinctrl driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/pinctrl/sunxi/pinctrl-sun55iw3-r.c b/drivers/pinctrl/sunxi/pinctrl-sun55iw3-r.c
new file mode 100644
index 000000000..2441a396e
--- /dev/null
+++ b/drivers/pinctrl/sunxi/pinctrl-sun55iw3-r.c
@@ -0,0 +1,58 @@
+// SPDX-License-Identifier: (GPL-2.0+ or MIT)
+/*
+ * Copyright (c) 2021 liujuan1@allwinnertech.com
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/pinctrl.h>
+#include "pinctrl-sunxi.h"
+
+static const struct sunxi_desc_pin sun55iw3_r_pins[] = {
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "s_twi0")),		/* SCK */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "s_twi0")),		/* SDA */
+};
+
+static const struct sunxi_pinctrl_desc sun55iw3_r_pinctrl_data = {
+	.pins = sun55iw3_r_pins,
+	.npins = ARRAY_SIZE(sun55iw3_r_pins),
+	.pin_base = SUNXI_PIN_BASE('L'),
+	.hw_type = SUNXI_PCTL_HW_TYPE_0,
+};
+
+static int sun55iw3_r_pinctrl_probe(struct platform_device *pdev)
+{
+	return sunxi_pinctrl_init(pdev, &sun55iw3_r_pinctrl_data);
+}
+
+static struct of_device_id sun55iw3_r_pinctrl_match[] = {
+	{ .compatible = "allwinner,sun55iw3-r-pinctrl", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, sun55iw3_r_pinctrl_match);
+
+static struct platform_driver sun55iw3_r_pinctrl_driver = {
+	.probe	= sun55iw3_r_pinctrl_probe,
+	.driver	= {
+		.name		= "sun55iw3-r-pinctrl",
+		.of_match_table	= sun55iw3_r_pinctrl_match,
+	},
+};
+
+static int __init sun55iw3_r_pio_init(void)
+{
+	return platform_driver_register(&sun55iw3_r_pinctrl_driver);
+}
+postcore_initcall(sun55iw3_r_pio_init);
+
+MODULE_DESCRIPTION("Allwinner sun55iw3 R_PIO pinctrl driver");
+MODULE_LICENSE("GPL");
+MODULE_VERSION("1.0.0");
diff --git a/drivers/pinctrl/sunxi/pinctrl-sun55iw3.c b/drivers/pinctrl/sunxi/pinctrl-sun55iw3.c
new file mode 100644
index 000000000..0c7add445
--- /dev/null
+++ b/drivers/pinctrl/sunxi/pinctrl-sun55iw3.c
@@ -0,0 +1,968 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2021 liujuan1@allwinnertech.com
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/pinctrl.h>
+#include <linux/io.h>
+
+#include "pinctrl-sunxi.h"
+
+static const struct sunxi_desc_pin sun55iw3_pins[] = {
+#if IS_ENABLED(CONFIG_FPGA_V4_PLATFORM) || IS_ENABLED(CONFIG_FPGA_V7_PLATFORM)
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_rxd_di[0] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 0),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_rxd_di[1] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 1),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_rxd_di[2] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 2),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_rxd_di[3] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 3),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_txd_do[3] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 4),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_txd_do[2] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 5),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_txd_do[1] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 6),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_txd_do[0] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 7),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_clkrx_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 8),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_rxdv_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 10),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_mdc_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 11),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_md_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 12),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_txen_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 13),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_clktx_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 14),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "//gmac0"),       /* //gmac0_txer_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 17),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_clktx_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 18),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 28),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_txd_do[4] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 28),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 29),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_txd_do[5] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 29),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 30),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_txd_do[6] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 30),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 31),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "gmac0"),         /* gmac0_txd_do[7] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 0, 31),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	/* bank B */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x3, "cpus_twi0"),     /* cpus_twi0_scl_di */
+		SUNXI_FUNCTION(0x4, "twi0"),          /* twi0_scl_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 0),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x3, "cpus_twi0"),     /* cpus_twi0_sda_di */
+		SUNXI_FUNCTION(0x4, "twi0"),          /* twi0_sda_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 1),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "twi1"),          /* twi1_scl_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 4),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "twi1"),          /* twi1_sda_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 5),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "spdif"),         /* spdif_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 6),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "spdif"),         /* spdif_di */
+		SUNXI_FUNCTION(0x2, "//spdif"),       /* //spdif_mclk */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 7),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "uart0"),         /* uart0_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 8),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "uart0"),         /* uart0_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 9),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "uart1"),         /* uart1_do */
+		SUNXI_FUNCTION(0x2, "cpus_uart0"),    /* cpus_uart0_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 10),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "uart1"),         /* uart1_di */
+		SUNXI_FUNCTION(0x2, "cpus_uart0"),    /* cpus_uart0_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 11),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 19),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "i2s0"),          /* i2s0_sd_di[1] */
+		SUNXI_FUNCTION(0x2, "i2s2"),          /* i2s2_sd_di [1] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 19),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 22),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "i2s0"),          /* i2s0_sd_di[0] */
+		SUNXI_FUNCTION(0x2, "i2s1"),          /* i2s1_sd_di */
+		SUNXI_FUNCTION(0x2, "i2s2"),          /* i2s2_sd_di [0] */
+		SUNXI_FUNCTION(0x2, "i2s3"),          /* i2s3_sd_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 22),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 23),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "i2s0"),          /* i2s0_bclk_do */
+		SUNXI_FUNCTION(0x3, "i2s1"),          /* i2s1_bclk_do */
+		SUNXI_FUNCTION(0x4, "i2s2"),          /* i2s2_bclk_do */
+		SUNXI_FUNCTION(0x5, "i2s3"),          /* i2s3_bclk_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 23),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 24),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "i2s0"),          /* i2s0_lrc_do */
+		SUNXI_FUNCTION(0x3, "i2s1"),          /* i2s1_lrc_do */
+		SUNXI_FUNCTION(0x4, "i2s2"),          /* i2s2_lrc_do */
+		SUNXI_FUNCTION(0x5, "i2s3"),          /* i2s3_lrc_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 24),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 25),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "i2s0"),          /* i2s0_sd_do[0] */
+		SUNXI_FUNCTION(0x4, "i2s2"),          /* i2s2_sd_do[0] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 25),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 26),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "i2s0"),          /* i2s0_sd_do[1] */
+		SUNXI_FUNCTION(0x4, "i2s2"),          /* i2s2_sd_do[1] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 26),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 27),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "i2s0"),          /* i2s0_sd_do[2] */
+		SUNXI_FUNCTION(0x4, "i2s2"),          /* i2s2_sd_do[2] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 27),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 28),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "i2s0"),          /* i2s0_sd_do[3] */
+		SUNXI_FUNCTION(0x4, "i2s2"),          /* i2s2_sd_do[3] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 28),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 29),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "i2s0"),          /* i2s0_mclk_do */
+		SUNXI_FUNCTION(0x3, "i2s1"),          /* i2s1_mclk_do */
+		SUNXI_FUNCTION(0x4, "i2s2"),          /* i2s2_mclk_do */
+		SUNXI_FUNCTION(0x5, "i2s3"),          /* i2s3_mclk_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 29),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 30),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "twi2"),          /* twi2_scl_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 30),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 31),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "twi2"),          /* twi2_sda_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 1, 31),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	/* bank C */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_wen_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 0),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_ale_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 1),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_cle_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 2),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_cen_do[1] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 3),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_cen_do[0] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 4),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_ren_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 5),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_rb_di[0] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 6),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_rb_di[1] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 7),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_dq_do[0] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 8),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_dq_do[1] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 9),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_dq_do[2] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 10),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_dq_do[3] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 11),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_dq_do[4] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 12),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_dq_do[5] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 13),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_dq_do[6] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 14),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_dq_do[7] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 15),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_wpn_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 16),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_re_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 17),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_dqsn_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 18),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 19),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ndfc0"),         /* ndfc0_dqs_oe */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 2, 19),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	/* bank D */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[0] */
+		SUNXI_FUNCTION(0x3, "lvds00"),        /* lvds00_in[0] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 0),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[1] */
+		SUNXI_FUNCTION(0x3, "lvds00"),        /* lvds00_in[1] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 1),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[2] */
+		SUNXI_FUNCTION(0x3, "lvds00"),        /* lvds00_in[2] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 2),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[3] */
+		SUNXI_FUNCTION(0x3, "lvds00"),        /* lvds00_in[3] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 3),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[4] */
+		SUNXI_FUNCTION(0x3, "lvds00"),        /* lvds00_in[4] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 4),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[5] */
+		SUNXI_FUNCTION(0x3, "lvds01"),        /* lvds01_in[0] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 5),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[6] */
+		SUNXI_FUNCTION(0x3, "lvds01"),        /* lvds01_in[1] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 6),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[7] */
+		SUNXI_FUNCTION(0x3, "lvds01"),        /* lvds01_in[2] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 7),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[8] */
+		SUNXI_FUNCTION(0x3, "lvds01"),        /* lvds01_in[3] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 8),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[9] */
+		SUNXI_FUNCTION(0x3, "lvds01"),        /* lvds01_in[4] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 9),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[10] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 10),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[11] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 11),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[12] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 12),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[13] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 13),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[14] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 14),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[15] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 15),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[16] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 16),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[17] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 17),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[18] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 18),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 19),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[19] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 19),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 20),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[20] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 20),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 21),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[21] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 21),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 22),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[22] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 22),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 23),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[23] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 23),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 24),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[24] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 24),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 25),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[25] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 25),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 26),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[26] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 26),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 27),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dpss"),          /* dpss_rgb0_do[27] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 3, 27),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	/* bank E */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ts00"),          /* ts00_clk */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 0),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ts00"),          /* ts00_error */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 1),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ts00"),          /* ts00_psyn */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 2),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ts00"),          /* ts00_dvld */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 3),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ts00"),          /* ts00_data[0] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 4),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ts00"),          /* ts00_data[1] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 5),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ts00"),          /* ts00_data[2] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 6),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ts00"),          /* ts00_data[3] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 7),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ts00"),          /* ts00_data[4] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 8),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ts00"),          /* ts00_data[5] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 9),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ts00"),          /* ts00_data[6] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 10),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "ts00"),          /* ts00_data[7] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 4, 11),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	/* bank F */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd0"),           /* sd0_cdat_di[0] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 0),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd0"),           /* sd0_cdat_di[1] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 1),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd0"),           /* sd0_cdat_di[2] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 2),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd0"),           /* sd0_cdat_di[3] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 3),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd0"),           /* sd0_ccmd_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 4),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd0"),           /* sd0_cclk_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 5),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd0"),           /* sd0_cdat_di[6] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 6),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd0"),           /* sd0_cdat_di[7] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 7),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dmic"),          /* dmic_clk_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 9),   /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "spif"),          /* spif_dqs_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 11),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd2"),           /* sd2_cdat_do[0] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 16),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd2"),           /* sd2_cdat_do[1] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 17),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd2"),           /* sd2_cdat_do[2] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 18),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 19),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd2"),           /* sd2_cdat_do[3] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 19),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 20),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd2"),           /* sd2_cdat_do[4] */
+		SUNXI_FUNCTION(0x3, "spif"),          /* spif_dq4_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 20),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 21),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd2"),           /* sd2_cdat_do[5] */
+		SUNXI_FUNCTION(0x3, "spif"),          /* spif_dq5_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 21),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 22),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd2"),           /* sd2_cdat_do[6] */
+		SUNXI_FUNCTION(0x3, "spif"),          /* spif_dq6_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 22),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 23),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd2"),           /* sd2_cdat_do[7] */
+		SUNXI_FUNCTION(0x3, "spif"),          /* spif_dq7_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 23),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 24),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd2"),           /* sd2_ccmd_di */
+		SUNXI_FUNCTION(0x3, "spif"),          /* spif_mosi_do */
+		SUNXI_FUNCTION(0x5, "spi0"),          /* spi0_mosi_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 24),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 25),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "sd2"),           /* sd2_cclk_do */
+		SUNXI_FUNCTION(0x3, "spif"),          /* spif_ss_do[0]片选 */
+		SUNXI_FUNCTION(0x5, "spi0"),          /* spi0_ss_do[0] */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 25),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 26),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x3, "spif"),          /* spif_hold_do */
+		SUNXI_FUNCTION(0x5, "spi0"),          /* spi0_hold_do/di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 26),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 28),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dmic"),          /* dmic_d0_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 28),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 29),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x3, "spif"),          /* spif_miso_do */
+		SUNXI_FUNCTION(0x5, "spi0"),          /* spi0_miso_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 29),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 30),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x3, "spif"),          /* spif_wp_do */
+		SUNXI_FUNCTION(0x5, "spi0"),          /* spi0_wp_do/di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 30),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 31),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x3, "spif"),          /* spif_sck_do */
+		SUNXI_FUNCTION(0x5, "spi0"),          /* spi0_sck_do */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 5, 31),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	/* bank G */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 26),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dmic"),          /* dmic_d3_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 26),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 28),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dmic"),          /* dmic_d2_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 28),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 30),
+		SUNXI_FUNCTION(0x0, "gpio_in"),       /* gpio_in */
+		SUNXI_FUNCTION(0x1, "gpio_out"),      /* gpio_out */
+		SUNXI_FUNCTION(0x2, "dmic"),          /* dmic_d1_di */
+		SUNXI_FUNCTION_IRQ_BANK(0xe, 6, 30),  /* eint */
+		SUNXI_FUNCTION(0xf, "io_disabled")),  /* io_disabled */
+#else
+#endif
+};
+
+static const unsigned int sun55iw3_irq_bank_map[] = {
+	SUNXI_BANK_OFFSET('B', 'A'),
+	SUNXI_BANK_OFFSET('C', 'A'),
+	SUNXI_BANK_OFFSET('D', 'A'),
+	SUNXI_BANK_OFFSET('E', 'A'),
+	SUNXI_BANK_OFFSET('F', 'A'),
+	SUNXI_BANK_OFFSET('G', 'A'),
+};
+
+static const struct sunxi_pinctrl_desc sun55iw3_pinctrl_data = {
+	.pins = sun55iw3_pins,
+	.npins = ARRAY_SIZE(sun55iw3_pins),
+	.irq_banks = ARRAY_SIZE(sun55iw3_irq_bank_map),
+	.irq_bank_map = sun55iw3_irq_bank_map,
+	.io_bias_cfg_variant = BIAS_VOLTAGE_PIO_POW_MODE_CTL,
+	.pf_power_source_switch = true,
+	.hw_type = SUNXI_PCTL_HW_TYPE_1,
+};
+
+/* PINCTRL power management code */
+#if IS_ENABLED(CONFIG_PM_SLEEP)
+
+static void *mem;
+static int mem_size;
+
+static int pinctrl_pm_alloc_mem(struct platform_device *pdev)
+{
+	struct resource *res;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res)
+		return -EINVAL;
+	mem_size = resource_size(res);
+
+	mem = devm_kzalloc(&pdev->dev, mem_size, GFP_KERNEL);
+	if (!mem)
+		return -ENOMEM;
+	return 0;
+}
+
+static int sun55iw3_pinctrl_suspend_noirq(struct device *dev)
+{
+	struct sunxi_pinctrl *pctl = dev_get_drvdata(dev);
+	unsigned long flags;
+
+	dev_info(dev, "pinctrl suspend\n");
+
+	raw_spin_lock_irqsave(&pctl->lock, flags);
+	memcpy_fromio(mem, pctl->membase, mem_size);
+	raw_spin_unlock_irqrestore(&pctl->lock, flags);
+
+	return 0;
+}
+
+static int sun55iw3_pinctrl_resume_noirq(struct device *dev)
+{
+	struct sunxi_pinctrl *pctl = dev_get_drvdata(dev);
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&pctl->lock, flags);
+	memcpy_toio(pctl->membase, mem, mem_size);
+	raw_spin_unlock_irqrestore(&pctl->lock, flags);
+
+	dev_info(dev, "pinctrl resume\n");
+
+	return 0;
+}
+
+static const struct dev_pm_ops sun55iw3_pinctrl_pm_ops = {
+	.suspend_noirq = sun55iw3_pinctrl_suspend_noirq,
+	.resume_noirq = sun55iw3_pinctrl_resume_noirq,
+};
+#define PINCTRL_PM_OPS	(&sun55iw3_pinctrl_pm_ops)
+
+#else
+static int pinctrl_pm_alloc_mem(struct platform_device *pdev)
+{
+	return 0;
+}
+#define PINCTRL_PM_OPS	NULL
+#endif
+
+static int sun55iw3_pinctrl_probe(struct platform_device *pdev)
+{
+	int ret;
+	ret = pinctrl_pm_alloc_mem(pdev);
+	if (ret) {
+		dev_err(&pdev->dev, "alloc pm mem err\n");
+		return ret;
+	}
+#if IS_ENABLED(CONFIG_PINCTRL_SUNXI_DEBUGFS)
+	dev_set_name(&pdev->dev, "pio");
+#endif
+	return sunxi_pinctrl_init(pdev, &sun55iw3_pinctrl_data);
+}
+
+static struct of_device_id sun55iw3_pinctrl_match[] = {
+	{ .compatible = "allwinner,sun55iw3-pinctrl", },
+	{ .compatible = "allwinner,sun20iw1-pinctrl", },
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, sun55iw3_pinctrl_match);
+
+static struct platform_driver sun55iw3_pinctrl_driver = {
+	.probe	= sun55iw3_pinctrl_probe,
+	.driver	= {
+		.name		= "sun55iw3-pinctrl",
+		.pm		= PINCTRL_PM_OPS,
+		.of_match_table	= sun55iw3_pinctrl_match,
+	},
+};
+
+static int __init sun55iw3_pio_init(void)
+{
+	return platform_driver_register(&sun55iw3_pinctrl_driver);
+}
+fs_initcall(sun55iw3_pio_init);
+
+MODULE_DESCRIPTION("Allwinner sun55iw3 pio pinctrl driver");
+MODULE_AUTHOR("<liujuan1@allwinnertech>");
+MODULE_LICENSE("GPL");
+MODULE_VERSION("1.0.0");
+
diff --git a/drivers/pinctrl/sunxi/pinctrl-sun8iw15p1-r.c b/drivers/pinctrl/sunxi/pinctrl-sun8iw15p1-r.c
new file mode 100644
index 000000000..9b069bbc8
--- /dev/null
+++ b/drivers/pinctrl/sunxi/pinctrl-sun8iw15p1-r.c
@@ -0,0 +1,145 @@
+/*
+ * Allwinner sun8iw15p1 SoCs R_PIO pinctrl driver.
+ *
+ * Copyright(c) 2017-2020 Allwinnertech Co., Ltd.
+ * Author: zhouhuacai <zhouhuacai@allwinnertech.com>
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2. This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/pinctrl.h>
+
+#include "pinctrl-sunxi.h"
+
+static const struct sunxi_desc_pin sun8iw15p1_r_pins[] = {
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_rsb0"),		/* SCK */
+		SUNXI_FUNCTION(0x3, "s_twi0"),		/* SCK */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_rsb0"),		/* SDA */
+		SUNXI_FUNCTION(0x3, "s_twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_uart0"),		/* TX */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_uart0"),		/* RX */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_jtag0"),		/* MS */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_jtag0"),		/* CK */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_jtag0"),		/* DO */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_jtag0"),		/* DI */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_twi1"),		/* SCK */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_twi1"),		/* SDA */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_pwm0"),		/* PWM0 */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_cpu_cur_w"),		/* */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 12)),
+};
+
+static const struct sunxi_pinctrl_desc sun8iw15p1_r_pinctrl_data = {
+	.pins = sun8iw15p1_r_pins,
+	.npins = ARRAY_SIZE(sun8iw15p1_r_pins),
+	.pin_base = SUNXI_PIN_BASE('L'),
+	.irq_banks = 1,
+	.hw_type = SUNXI_PCTL_HW_TYPE_0,
+};
+
+static int sun8iw15p1_r_pinctrl_probe(struct platform_device *pdev)
+{
+	return sunxi_pinctrl_init(pdev, &sun8iw15p1_r_pinctrl_data);
+}
+
+static const struct of_device_id sun8iw15p1_r_pinctrl_match[] = {
+	{ .compatible = "allwinner,sun8iw15p1-r-pinctrl", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, sun8iw15p1_r_pinctrl_match);
+
+static struct platform_driver sun8iw15p1_r_pinctrl_driver = {
+	.probe	= sun8iw15p1_r_pinctrl_probe,
+	.driver	= {
+		.name		= "sun8iw15p1-r-pinctrl",
+		.owner		= THIS_MODULE,
+		.of_match_table	= sun8iw15p1_r_pinctrl_match,
+	},
+};
+
+static int __init sun8iw15p1_r_pio_init(void)
+{
+	int ret;
+
+	ret = platform_driver_register(&sun8iw15p1_r_pinctrl_driver);
+	if (IS_ERR_VALUE(ret)) {
+		pr_debug("register sun50i r-pio controller failed\n");
+		return -EINVAL;
+	}
+	return 0;
+}
+postcore_initcall(sun8iw15p1_r_pio_init);
+
+MODULE_AUTHOR("zhuxianbin<zhuxianbin@allwinnertech.com>");
+MODULE_DESCRIPTION("Allwinner sun8iw15p1 R_PIO pinctrl driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/pinctrl/sunxi/pinctrl-sun8iw15p1.c b/drivers/pinctrl/sunxi/pinctrl-sun8iw15p1.c
new file mode 100644
index 000000000..9fbd28a4a
--- /dev/null
+++ b/drivers/pinctrl/sunxi/pinctrl-sun8iw15p1.c
@@ -0,0 +1,859 @@
+/*
+* Allwinner sun8iw15p1 SoCs pinctrl driver.
+*
+* Copyright(c) 2017-2020 Allwinnertech Co., Ltd.
+* Author: zhouhuacai <zhouhuacai@allwinnertech.com>
+*
+* This file is licensed under the terms of the GNU General Public
+* License version 2.  This program is licensed "as is" without any
+* warranty of any kind, whether express or implied.
+*/
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/pinctrl.h>
+
+#include "pinctrl-sunxi.h"
+
+static const struct sunxi_desc_pin sun8iw15p1_pins[] = {
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* TX */
+		SUNXI_FUNCTION(0x4, "jtag0"),		/* MS0 */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 0)),	/* PB_EINT0 */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* RX */
+		SUNXI_FUNCTION(0x4, "jtag0"),		/* CK0 */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 1)),	/* PB_EINT1 */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* RTS */
+		SUNXI_FUNCTION(0x4, "jtag0"),		/* DO0 */
+		SUNXI_FUNCTION(0x5, "test"),
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 2)),	/* PB_EINT2 */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* CTS */
+		SUNXI_FUNCTION(0x4, "jtag0"),		/* DI0 */
+		SUNXI_FUNCTION(0x5, "test"),		/* test */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 3)),	/* PB_EINT3 */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "aif2"),		/* SYNC */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* LRCK */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 4)),	/* PB_EINT4 */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "aif2"),		/* BCLK */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* BCLK */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 5)),	/* PB_EINT5 */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "aif2"),		/* DOUT */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* DOUT */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 6)),	/* PB_EINT6 */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "aif2"),		/* DIN */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* DIN */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 7)),	/* PB_EINT7 */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* MCLK */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 8)),	/* PB_EINT8 */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x4, "uart0"),		/* TX */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 9)),	/* PB_EINT9 */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "pwm1"),		/* PMW1 */
+		SUNXI_FUNCTION(0x3, "cpu_cur_w"),
+		SUNXI_FUNCTION(0x4, "uart0"),		/* RX */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 10)),	/* PB_EINT10 */
+
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* WE */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* DS */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* CLK */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* ALE */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* RST */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* CLE */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* MOSI */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* CE1 */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* CS0 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* CE0 */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* MISO */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* RE */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* CLK */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* RB0 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* CMD */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* RB1 */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* CS1 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ7 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D3 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ6 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D4 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ5 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D0 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ4 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D5 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQS */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ3 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D1 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ2 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D6 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ1 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D2 */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* WP */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "nand0"),		/* DQ0 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D7 */
+		SUNXI_FUNCTION(0x4, "spi0"),		/* HOLD */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+
+#if defined(CONFIG_FPGA_V4_PLATFORM)
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 28),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "lvds0"),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 29),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "lvds0"),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 30),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "lvds0"),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 31),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "lvds0"),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VP0 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D3 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VN0 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D4 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VP1 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D5 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VN1 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D6 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VP2 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D7 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VN2 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D10 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VPC */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D11 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VNC */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D12 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VP3 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D13 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VN3 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D14 */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* CS */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D15 */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* CLK */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D18 */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* MOSI */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D19 */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* MISO */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D20 */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* TX */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D21 */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* RX */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D22 */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* RTS */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D23 */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* CTS */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* CLK */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* TX */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 19),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* DE */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* RX*/
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 20),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* HSYNC */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* RTS */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 21),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* VSYNC */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* CTS */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 22),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),
+		SUNXI_FUNCTION(0x3, "lvds0"),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 23),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),
+		SUNXI_FUNCTION(0x3, "lvds0"),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 24),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),
+		SUNXI_FUNCTION(0x3, "lvds0"),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 25),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),
+		SUNXI_FUNCTION(0x3, "lvds0"),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 26),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),
+		SUNXI_FUNCTION(0x3, "lvds0"),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 27),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),
+		SUNXI_FUNCTION(0x3, "lvds0"),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+#else
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VP0 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D3 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VN0 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D4 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VP1 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D5 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VN1 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D6 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VP2 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D7 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VN2 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D10 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VPC */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D11 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VNC */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D12 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VP3 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D13 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* VN3 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D14 */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* CS */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D15 */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* CLK */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D18 */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* MOSI */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D19 */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* MISO */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D20 */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* TX */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D21 */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* RX */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D22 */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* RTS */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D23 */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* CTS */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* CLK */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* TX */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 19),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* DE/STH */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* RX*/
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 20),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* HSYNC/CKV */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* RTS */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 21),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* VSYNC/MODE */
+		SUNXI_FUNCTION(0x4, "uart4"),		/* CTS */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 22),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "eink"),		/* STV */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 23),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "pwm0"),
+		SUNXI_FUNCTION(0x7, "io_disable")),
+
+#endif
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "csi_mck0"),		/* MCLK */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "csi_cci0"),		/* SCK */
+		SUNXI_FUNCTION(0x3, "twi2"),		/* SCK */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "csi_cci0"),		/* SDA */
+		SUNXI_FUNCTION(0x3, "twi2"),		/* SDA */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "bist0"),		/* BIST_RESULT0 */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "bist1"),	 	/*BIST_RESULT1  */
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x7, "io_disabled")),
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* D1 */
+		SUNXI_FUNCTION(0x3, "jtag0"),		/* MS1 */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* D0 */
+		SUNXI_FUNCTION(0x3, "jtag0"),		/* DI1 */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* CLK */
+		SUNXI_FUNCTION(0x3, "uart0"),		/* TX */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* CMD */
+		SUNXI_FUNCTION(0x3, "jtag0"),		/* DO1 */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* D3 */
+		SUNXI_FUNCTION(0x3, "uart0"),		/* RX */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "jtag0"),		/* CK1 */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 1, 6)),
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* CLK */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* CMD */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* D0 */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* D1 */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* D2 */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* D3 */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),		/* TX */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),		/* RX */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),		/* RTS */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),		/* CTS */
+		SUNXI_FUNCTION(0x3, "i2s1"),		/* MCLK */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "aif3"),		/* SYNC */
+		SUNXI_FUNCTION(0x3, "i2s1"),		/* LRCK */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "aif3"),		/* BCLK */
+		SUNXI_FUNCTION(0x3, "i2s1"),		/* BCLK */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "aif3"),		/* DOUT */
+		SUNXI_FUNCTION(0x3, "i2s1"),		/* DOUT */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "aif3"),		/* DIN */
+		SUNXI_FUNCTION(0x3, "i2s1"),		/* DIN */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 2, 13)),
+
+	/* HOLE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi0"),		/* SCK */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi1"),		/* SCK */
+		SUNXI_FUNCTION(0x3, "cpu_cur_w"),	/**/
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi1"),		/* SDA */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart3"),		/* TX */
+		SUNXI_FUNCTION(0x3, "spi1"),		/* CS */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart3"),		/* RX */
+		SUNXI_FUNCTION(0x3, "spi1"),		/* CLK */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart3"),		/* RTS */
+		SUNXI_FUNCTION(0x3, "spi1"),		/* MOSI */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart3"),		/* CTS */
+		SUNXI_FUNCTION(0x3, "spi1"),		/* MISO */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* DATA3 */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* DATA2 */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* DATA1 */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* DATA0 */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(H, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* CLK */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 3, 12)),
+};
+
+static const unsigned int sun8iw15p1_irq_bank_map[] = {
+	SUNXI_BANK_OFFSET('B', 'A'),
+	SUNXI_BANK_OFFSET('F', 'A'),
+	SUNXI_BANK_OFFSET('G', 'A'),
+	SUNXI_BANK_OFFSET('H', 'A'),
+};
+
+static const struct sunxi_pinctrl_desc sun8iw15p1_pinctrl_data = {
+	.pins = sun8iw15p1_pins,
+	.npins = ARRAY_SIZE(sun8iw15p1_pins),
+	.irq_banks = ARRAY_SIZE(sun8iw15p1_irq_bank_map),
+	.irq_bank_map = sun8iw15p1_irq_bank_map,
+	.io_bias_cfg_variant = BIAS_VOLTAGE_PIO_POW_MODE_SEL,
+	.hw_type = SUNXI_PCTL_HW_TYPE_0,
+};
+
+static int sun8iw15p1_pinctrl_probe(struct platform_device *pdev)
+{
+	return sunxi_pinctrl_init(pdev, &sun8iw15p1_pinctrl_data);
+}
+
+static const struct of_device_id sun8iw15p1_pinctrl_match[] = {
+	{ .compatible = "allwinner,sun8iw15p1-pinctrl", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, sun8iw15p1_pinctrl_match);
+
+static struct platform_driver sun8iw15p1_pinctrl_driver = {
+	.probe	= sun8iw15p1_pinctrl_probe,
+	.driver	= {
+		.name		= "sun8iw15p1-pinctrl",
+		.owner		= THIS_MODULE,
+		.of_match_table	= sun8iw15p1_pinctrl_match,
+	},
+};
+
+static int __init sun8iw15p1_pio_init(void)
+{
+	int ret;
+
+	ret = platform_driver_register(&sun8iw15p1_pinctrl_driver);
+	if (IS_ERR_VALUE(ret)) {
+		pr_err("register sun8iw15p1 pio controller failed\n");
+		return -EINVAL;
+	}
+	return 0;
+}
+postcore_initcall(sun8iw15p1_pio_init);
+
+MODULE_AUTHOR("zhuxianbin<zhuxianbin@allwinnertech.com>");
+MODULE_DESCRIPTION("Allwinner sun8iw15p1 pio pinctrl driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/pinctrl/sunxi/pinctrl-sun8iw20.c b/drivers/pinctrl/sunxi/pinctrl-sun8iw20.c
new file mode 100644
index 000000000..0fcdc8f1e
--- /dev/null
+++ b/drivers/pinctrl/sunxi/pinctrl-sun8iw20.c
@@ -0,0 +1,1307 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2020 wuyan@allwinnertech.com
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/pinctrl.h>
+#include <linux/io.h>
+
+#include "pinctrl-sunxi.h"
+
+/* PB:8pins，PC:8pins，PD:23pins，PE:18pins，PF:7pins, PG:16pins */
+static const struct sunxi_desc_pin sun8iw20_pins[] = {
+#if IS_ENABLED(CONFIG_FPGA_V4_PLATFORM) || IS_ENABLED(CONFIG_FPGA_V7_PLATFORM)
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* TX */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* CS */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* MS */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* CLK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* CK */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RTS */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* MOSI */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DO */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* CTS */
+		SUNXI_FUNCTION(0x3, "spi2"),		/* MISO */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DI */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* SCK */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* MCLK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* MS_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* SDA */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* BCLK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* CK_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 5)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* SDA */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* LRCK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DO_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 6)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* IN */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* DOUT */
+		SUNXI_FUNCTION(0x4, "i2s0"),		/* DIN */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 7)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* OUT */
+		SUNXI_FUNCTION(0x3, "i2s0"),		/* DIN */
+		SUNXI_FUNCTION(0x4, "i2s0"),		/* DOUT */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 8)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart0"),		/* TX */
+		SUNXI_FUNCTION(0x3, "i2c0"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DI_CPU */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 9)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "i2c0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 10)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* TX */
+		SUNXI_FUNCTION(0x3, "i2c0"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "jtag"),		/* DI_GPU */
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 11)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 12)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 13)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 14)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 15)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 16)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 17)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 18)),/* Test GPIO */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 28),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 28)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 29),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 29)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 30),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 30)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(A, 31),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "gmac0"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 31)),/* Test GPIO */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x4, "twi0"),
+		SUNXI_FUNCTION(0x7, "test"),		/* For Test */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 1, 0),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x4, "twi0"),
+		SUNXI_FUNCTION(0x7, "test"),		/* For Test */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 1, 1),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	/* UART0 */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart0")),		/* TX */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart0")),		/* RX */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 21),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_cir0")),		/* IR RX */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x5, "ir1")),		/* IR TX */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 23),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "pwm0"),
+		SUNXI_FUNCTION(0x4, "i2c0")),		/* SDA */
+	/* Audio DMIC */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 9),		/* DMIC MCLK */
+		SUNXI_FUNCTION(0x2, "dmic"),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 28),		/* DMIC DATA0 */
+		SUNXI_FUNCTION(0x2, "dmic"),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 24),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x5, "spi0"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 24)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 25),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x5, "spi0"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 25)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 29),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x5, "spi0"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 29)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 31),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x5, "spi0"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 4, 31)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 30),		/* DMIC DATA1 */
+		SUNXI_FUNCTION(0x2, "dmic"),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 28),		/* DMIC DATA2 */
+		SUNXI_FUNCTION(0x2, "dmic"),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 26),		/* DMIC DATA3 */
+		SUNXI_FUNCTION(0x2, "dmic"),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	/* Audio DAUDIO */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 29),		/* I2S MCLK */
+		SUNXI_FUNCTION(0x2, "i2s0"),
+		SUNXI_FUNCTION(0x3, "i2s1"),
+		SUNXI_FUNCTION(0x4, "i2s2"),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 23),		/* I2S BCLK */
+		SUNXI_FUNCTION(0x2, "i2s0"),
+		SUNXI_FUNCTION(0x3, "i2s1"),
+		SUNXI_FUNCTION(0x4, "i2s2"),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 24),		/* I2S LRCK */
+		SUNXI_FUNCTION(0x2, "i2s0"),
+		SUNXI_FUNCTION(0x3, "i2s1"),
+		SUNXI_FUNCTION(0x4, "i2s2"),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 25),		/* I2S DOUT0 */
+		SUNXI_FUNCTION(0x2, "i2s0"),
+		SUNXI_FUNCTION(0x3, "i2s1"),
+		SUNXI_FUNCTION(0x4, "i2s2"),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 26),		/* I2S DOUT1 */
+		SUNXI_FUNCTION(0x2, "i2s0"),
+		SUNXI_FUNCTION(0x3, "i2s1"),
+		SUNXI_FUNCTION(0x4, "i2s2"),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 27),		/* I2S DOUT2 */
+		SUNXI_FUNCTION(0x2, "i2s0"),
+		SUNXI_FUNCTION(0x3, "i2s1"),
+		SUNXI_FUNCTION(0x4, "i2s2"),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 28),		/* I2S DOUT3 */
+		SUNXI_FUNCTION(0x2, "i2s0"),
+		SUNXI_FUNCTION(0x3, "i2s1"),
+		SUNXI_FUNCTION(0x4, "i2s2"),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 22),		/* I2S0 DIN */
+		SUNXI_FUNCTION(0x2, "i2s0"),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	/* Audio SPDIF */
+#if 0
+	/* SPDIF IN shouldn't config this pin for aw1859 fpga board but used at aw1860 fpga board */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 7),	/* SPDIF MCLK & SPDIF IN */
+		SUNXI_FUNCTION(0x2, "spdif"),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+#endif
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 6),		/* SPDIF OUT */
+		SUNXI_FUNCTION(0x2, "spdif"),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+#else /* IC */
+	/* PB */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "pwm3"),
+		SUNXI_FUNCTION(0x3, "ir"),		/* TX */
+		SUNXI_FUNCTION(0x4, "twi2"),		/* SCK */
+		SUNXI_FUNCTION(0x5, "spi1"),		/* WP */
+		SUNXI_FUNCTION(0x6, "uart0"),		/* TX */
+		SUNXI_FUNCTION(0x7, "uart2"),		/* TX */
+		SUNXI_FUNCTION(0x8, "spdif"),		/* OUT */
+		SUNXI_FUNCTION(0x9, "test"),		/* FOR TEST */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 0, 0),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "pwm4"),
+		SUNXI_FUNCTION(0x3, "i2s2_dout"),	/* DOUT3 */
+		SUNXI_FUNCTION(0x4, "twi2"),		/* SDA */
+		SUNXI_FUNCTION(0x5, "i2s2_din"),	/* DIN3 */
+		SUNXI_FUNCTION(0x6, "uart0"),		/* RX */
+		SUNXI_FUNCTION(0x7, "uart2"),		/* RX */
+		SUNXI_FUNCTION(0x8, "ir"),		/* RX */
+		SUNXI_FUNCTION(0x9, "test"),		/* FOR TEST */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 0, 1),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D0 */
+		SUNXI_FUNCTION(0x3, "i2s2_dout"),	/* DOUT2 */
+		SUNXI_FUNCTION(0x4, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x5, "i2s2_din"),	/* DIN2 */
+		SUNXI_FUNCTION(0x6, "lcd0"),		/* D18 */
+		SUNXI_FUNCTION(0x7, "uart4"),		/* TX */
+		SUNXI_FUNCTION(0x8, "can0"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 0, 2),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D1 */
+		SUNXI_FUNCTION(0x3, "i2s2_dout"),	/* DOUT1 */
+		SUNXI_FUNCTION(0x4, "twi0"),		/* SCK */
+		SUNXI_FUNCTION(0x5, "i2s2_din"),	/* DIN0 */
+		SUNXI_FUNCTION(0x6, "lcd0"),		/* D19 */
+		SUNXI_FUNCTION(0x7, "uart4"),		/* RX */
+		SUNXI_FUNCTION(0x8, "can0"),		/* RX0 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 0, 3),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D8 */
+		SUNXI_FUNCTION(0x3, "i2s2_dout"),	/* DOUT0 */
+		SUNXI_FUNCTION(0x4, "twi1"),		/* SCK */
+		SUNXI_FUNCTION(0x5, "i2s2_din"),	/* DIN1 */
+		SUNXI_FUNCTION(0x6, "lcd0"),		/* D20 */
+		SUNXI_FUNCTION(0x7, "uart5"),		/* TX */
+		SUNXI_FUNCTION(0x8, "can1"),		/* TX0 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 0, 4),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D9 */
+		SUNXI_FUNCTION(0x3, "i2s2"),		/* BCLK */
+		SUNXI_FUNCTION(0x4, "twi1"),		/* SDA */
+		SUNXI_FUNCTION(0x5, "pwm0"),
+		SUNXI_FUNCTION(0x6, "lcd0"),		/* D21 */
+		SUNXI_FUNCTION(0x7, "uart5"),		/* RX */
+		SUNXI_FUNCTION(0x8, "can1"),		/* RX0 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 0, 5),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D16 */
+		SUNXI_FUNCTION(0x3, "i2s2"),		/* LRCK */
+		SUNXI_FUNCTION(0x4, "twi3"),		/* SCK */
+		SUNXI_FUNCTION(0x5, "pwm1"),
+		SUNXI_FUNCTION(0x6, "lcd0"),		/* D22 */
+		SUNXI_FUNCTION(0x7, "uart3"),		/* TX */
+		SUNXI_FUNCTION(0x8, "bist0"),		/* BIST_RESULT0 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 0, 6),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D17 */
+		SUNXI_FUNCTION(0x3, "i2s2"),		/* MCLK */
+		SUNXI_FUNCTION(0x4, "twi3"),		/* SDA */
+		SUNXI_FUNCTION(0x5, "ir"),		/* RX */
+		SUNXI_FUNCTION(0x6, "lcd0"),		/* D23 */
+		SUNXI_FUNCTION(0x7, "uart3"),		/* RX */
+		SUNXI_FUNCTION(0x8, "bist1"),		/* BIST_RESULT1 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 0, 7),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* DATA3 */
+		SUNXI_FUNCTION(0x3, "pwm5"),		/* pwm5 */
+		SUNXI_FUNCTION(0x4, "twi2"),		/* SCK */
+		SUNXI_FUNCTION(0x5, "spi1"),		/* HOLD */
+		SUNXI_FUNCTION(0x6, "uart0"),		/* TX */
+		SUNXI_FUNCTION(0x7, "uart1"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 0, 8),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* DATA2 */
+		SUNXI_FUNCTION(0x3, "pwm6"),		/* PWM6 */
+		SUNXI_FUNCTION(0x4, "twi2"),		/* SDA */
+		SUNXI_FUNCTION(0x5, "spi1"),		/* MISO */
+		SUNXI_FUNCTION(0x6, "uart0"),		/* RX */
+		SUNXI_FUNCTION(0x7, "uart1"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 0, 9),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* DATA1 */
+		SUNXI_FUNCTION(0x3, "pwm7"),		/* PWM7 */
+		SUNXI_FUNCTION(0x4, "twi0"),		/* SCK */
+		SUNXI_FUNCTION(0x5, "spi1"),		/* MOSI */
+		SUNXI_FUNCTION(0x6, "clk_fanout0"),
+		SUNXI_FUNCTION(0x7, "uart1"),		/* RTS */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 0, 10),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* DATA0 */
+		SUNXI_FUNCTION(0x3, "pwm2"),		/* PWM2 */
+		SUNXI_FUNCTION(0x4, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x5, "spi1"),		/* CLK */
+		SUNXI_FUNCTION(0x6, "clk_fanout1"),
+		SUNXI_FUNCTION(0x7, "uart1"),		/* CTS */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 0, 11),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(B, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "dmic"),		/* CLK */
+		SUNXI_FUNCTION(0x3, "pwm0"),		/* pwm0 */
+		SUNXI_FUNCTION(0x4, "spdif"),		/* IN */
+		SUNXI_FUNCTION(0x5, "spi1"),		/* CS0 */
+		SUNXI_FUNCTION(0x6, "clk_fanout2"),
+		SUNXI_FUNCTION(0x7, "ir"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 0, 12),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	/* PC */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* TX */
+		SUNXI_FUNCTION(0x3, "twi2"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "ledc"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 1, 0),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi2"),		/* SDA */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 1, 1),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "spi0"),		/* CLK */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* CLK */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 1, 2),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "spi0"),		/* CS0 */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* CMD */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 1, 3),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "spi0"),		/* MOSI */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D2 */
+		SUNXI_FUNCTION(0x4, "boot"),		/* SEL0 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 1, 4),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "spi0"),		/* MISO */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D1 */
+		SUNXI_FUNCTION(0x4, "boot"),		/* SEL1 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 1, 5),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "spi0"),		/* WP */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D0 */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* TX */
+		SUNXI_FUNCTION(0x5, "twi3"),		/* SCK */
+		SUNXI_FUNCTION(0x6, "pll"),		/* pll_test_gpio */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 1, 6),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(C, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "spi0"),		/* HOLD */
+		SUNXI_FUNCTION(0x3, "sdc2"),		/* D3 */
+		SUNXI_FUNCTION(0x4, "uart3"),		/* RX */
+		SUNXI_FUNCTION(0x5, "twi3"),		/* SDA */
+		SUNXI_FUNCTION(0x6, "tcon"),		/* TRIG0 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 1, 7),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	/* PD */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* V0P */
+		SUNXI_FUNCTION(0x4, "dsi"),		/* D0P */
+		SUNXI_FUNCTION(0x5, "twi0"),		/* SCK */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 0),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D3 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* V0N */
+		SUNXI_FUNCTION(0x4, "dsi"),		/* D0N */
+		SUNXI_FUNCTION(0x5, "uart2"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 1),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D4 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* V1P */
+		SUNXI_FUNCTION(0x4, "dsi"),		/* D1P */
+		SUNXI_FUNCTION(0x5, "uart2"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 2),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D5 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* V1P */
+		SUNXI_FUNCTION(0x4, "dsi"),		/* D1P */
+		SUNXI_FUNCTION(0x5, "uart2"),		/* RTS */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 3),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D6 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* V2P */
+		SUNXI_FUNCTION(0x4, "dsi"),		/* CKP */
+		SUNXI_FUNCTION(0x5, "uart2"),		/* CTS */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 4),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D7 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* V2N */
+		SUNXI_FUNCTION(0x4, "dsi"),		/* CKN */
+		SUNXI_FUNCTION(0x5, "uart5"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 5),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D10 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* CKP */
+		SUNXI_FUNCTION(0x4, "dsi"),		/* D2P */
+		SUNXI_FUNCTION(0x5, "uart5"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 6),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D11 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* CKN */
+		SUNXI_FUNCTION(0x4, "dsi"),		/* D2N */
+		SUNXI_FUNCTION(0x5, "uart4"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 7),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D12 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* V3P */
+		SUNXI_FUNCTION(0x4, "dsi"),		/* D3P */
+		SUNXI_FUNCTION(0x5, "uart4"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 8),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D13 */
+		SUNXI_FUNCTION(0x3, "lvds0"),		/* V3N */
+		SUNXI_FUNCTION(0x4, "dsi"),		/* D3N */
+		SUNXI_FUNCTION(0x5, "pwm6"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 9),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D14 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* V0P */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* CS0 */
+		SUNXI_FUNCTION(0x5, "uart3"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 10),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D15 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* V0N */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* CLK */
+		SUNXI_FUNCTION(0x5, "uart3"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 11),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D18 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* V1P */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* MOSI */
+		SUNXI_FUNCTION(0x5, "twi0"),		/* SDA */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 12),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D19 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* V1N */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* MISO */
+		SUNXI_FUNCTION(0x5, "uart3"),		/* RTS */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 13),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D20 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* V2P */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* HOLD */
+		SUNXI_FUNCTION(0x5, "uart3"),		/* CTS */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 14),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D21 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* V2N */
+		SUNXI_FUNCTION(0x4, "spi1"),		/* WP */
+		SUNXI_FUNCTION(0x5, "ir"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 15),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D22 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* SKP */
+		SUNXI_FUNCTION(0x4, "dmic"),		/* DATA3 */
+		SUNXI_FUNCTION(0x5, "pwm0"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 16),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* D23 */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* SKN */
+		SUNXI_FUNCTION(0x4, "dmic"),		/* DATA2 */
+		SUNXI_FUNCTION(0x5, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 17),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* CLK */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* V3P */
+		SUNXI_FUNCTION(0x4, "dmic"),		/* DATA1 */
+		SUNXI_FUNCTION(0x5, "pwm2"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 18),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 19),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* DE */
+		SUNXI_FUNCTION(0x3, "lvds1"),		/* V3N */
+		SUNXI_FUNCTION(0x4, "dmic"),		/* DATA0 */
+		SUNXI_FUNCTION(0x5, "pwm3"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 19),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 20),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* HSYNC */
+		SUNXI_FUNCTION(0x3, "twi2"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "dmic"),		/* CLK */
+		SUNXI_FUNCTION(0x5, "pwm4"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 20),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 21),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "lcd0"),		/* VSYNC */
+		SUNXI_FUNCTION(0x3, "twi2"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "uart1"),		/* TX */
+		SUNXI_FUNCTION(0x5, "pwm5"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 21),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(D, 22),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "spdif"),		/* OUT */
+		SUNXI_FUNCTION(0x3, "ir"),		/* RX */
+		SUNXI_FUNCTION(0x4, "uart1"),		/* RX */
+		SUNXI_FUNCTION(0x5, "pwm7"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 2, 22),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	/* PE */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "ncsi0"),		/* HSYNC */
+		SUNXI_FUNCTION(0x3, "uart2"),		/* RTS */
+		SUNXI_FUNCTION(0x4, "twi1"),		/* SCK */
+		SUNXI_FUNCTION(0x5, "lcd0"),		/* HSYNC */
+		SUNXI_FUNCTION(0x8, "gmac0"),		/* RXCTL/CRS_DV */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 0),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "ncsi0"),		/* VSYNC */
+		SUNXI_FUNCTION(0x3, "uart2"),		/* CTS */
+		SUNXI_FUNCTION(0x4, "twi1"),		/* SDA */
+		SUNXI_FUNCTION(0x5, "lcd0"),		/* VSYNC */
+		SUNXI_FUNCTION(0x8, "gmac0"),		/* RXD0/RXD0 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 1),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "ncsi0"),		/* PCLK */
+		SUNXI_FUNCTION(0x3, "uart2"),		/* TX */
+		SUNXI_FUNCTION(0x4, "twi0"),		/* SCK */
+		SUNXI_FUNCTION(0x5, "clk_fanout0"),
+		SUNXI_FUNCTION(0x6, "uart0"),		/* TX */
+		SUNXI_FUNCTION(0x8, "gmac0"),		/* RXD1/RXD1 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 2),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "csi0"),		/* MCLK */
+		SUNXI_FUNCTION(0x3, "uart2"),		/* RX */
+		SUNXI_FUNCTION(0x4, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x5, "clk_fanout1"),
+		SUNXI_FUNCTION(0x6, "uart0"),		/* RX */
+		SUNXI_FUNCTION(0x8, "gmac0"),		/* TXCK/TXCK */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 3),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "ncsi0"),		/* D0 */
+		SUNXI_FUNCTION(0x3, "uart4"),		/* TX */
+		SUNXI_FUNCTION(0x4, "twi2"),		/* SCK */
+		SUNXI_FUNCTION(0x5, "clk_fanout2"),
+		SUNXI_FUNCTION(0x6, "d_jtag"),	/* MS */
+		SUNXI_FUNCTION(0x7, "r_jtag"),	/* MS */
+		SUNXI_FUNCTION(0x8, "gmac0"),		/* TXD0/TXD0 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 4),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "ncsi0"),		/* D1 */
+		SUNXI_FUNCTION(0x3, "uart4"),		/* RX */
+		SUNXI_FUNCTION(0x4, "twi2"),		/* SDA */
+		SUNXI_FUNCTION(0x5, "ledc"),
+		SUNXI_FUNCTION(0x6, "d_jtag"),	/* D1 */
+		SUNXI_FUNCTION(0x7, "r_jtag"),	/* D1 */
+		SUNXI_FUNCTION(0x8, "gmac0"),		/* TXD1/TXD1 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 5),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "ncsi0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "uart5"),		/* TX */
+		SUNXI_FUNCTION(0x4, "twi3"),		/* SCK */
+		SUNXI_FUNCTION(0x5, "spdif"),		/* IN */
+		SUNXI_FUNCTION(0x6, "d_jtag"),	/* D0 */
+		SUNXI_FUNCTION(0x7, "r_jtag"),	/* D0 */
+		SUNXI_FUNCTION(0x8, "gmac0"),		/* TXCTL/TXEN */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 6),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "ncsi0"),		/* D3 */
+		SUNXI_FUNCTION(0x3, "uart5"),		/* RX */
+		SUNXI_FUNCTION(0x4, "twi3"),		/* SDA */
+		SUNXI_FUNCTION(0x5, "spdif"),		/* OUT */
+		SUNXI_FUNCTION(0x6, "d_jtag"),	/* CK */
+		SUNXI_FUNCTION(0x7, "r_jtag"),	/* CK */
+		SUNXI_FUNCTION(0x8, "gmac0"),		/* CK */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 7),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "ncsi0"),		/* D4 */
+		SUNXI_FUNCTION(0x3, "uart1"),		/* RTS */
+		SUNXI_FUNCTION(0x4, "pwm2"),
+		SUNXI_FUNCTION(0x5, "uart3"),		/* TX */
+		SUNXI_FUNCTION(0x6, "jtag"),		/* MS */
+		SUNXI_FUNCTION(0x8, "gmac0"),		/* MS */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 8),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "ncsi0"),		/* D5 */
+		SUNXI_FUNCTION(0x3, "uart1"),		/* CTS */
+		SUNXI_FUNCTION(0x4, "pwm3"),
+		SUNXI_FUNCTION(0x5, "uart3"),		/* RX */
+		SUNXI_FUNCTION(0x6, "jtag"),		/* D1 */
+		SUNXI_FUNCTION(0x8, "gmac0"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 9),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "ncsi0"),		/* D6 */
+		SUNXI_FUNCTION(0x3, "uart1"),		/* TX */
+		SUNXI_FUNCTION(0x4, "pwm4"),
+		SUNXI_FUNCTION(0x5, "ir"),		/* RX */
+		SUNXI_FUNCTION(0x6, "jtag"),		/* D0 */
+		SUNXI_FUNCTION(0x8, "gmac0"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 10),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "ncsi0"),		/* D7 */
+		SUNXI_FUNCTION(0x3, "uart1"),		/* RX */
+		SUNXI_FUNCTION(0x4, "i2s0_dout"),	/* DOUT3 */
+		SUNXI_FUNCTION(0x5, "i2s0_din"),	/* DIN3 */
+		SUNXI_FUNCTION(0x6, "jtag"),		/* CK */
+		SUNXI_FUNCTION(0x8, "gmac0"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 11),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi2"),		/* SCK */
+		SUNXI_FUNCTION(0x3, "ncsi0"),		/* FIELD */
+		SUNXI_FUNCTION(0x4, "i2s0_dout"),	/* DOUT2 */
+		SUNXI_FUNCTION(0x5, "i2s0_din"),	/* DIN2 */
+		SUNXI_FUNCTION(0x8, "gmac0"),		/* TXD3/NULL */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 12),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi2"),		/* SDA */
+		SUNXI_FUNCTION(0x3, "pwm5"),
+		SUNXI_FUNCTION(0x4, "i2s0_dout"),	/* DOUT0 */
+		SUNXI_FUNCTION(0x5, "i2s0_din"),	/* DIN1 */
+		SUNXI_FUNCTION(0x8, "gmac0"),		/* RXD3/MULL */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 13),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi1"),		/* SCK */
+		SUNXI_FUNCTION(0x3, "d_jtag"),	/* MS */
+		SUNXI_FUNCTION(0x4, "i2s0_dout"),	/* DOUT1 */
+		SUNXI_FUNCTION(0x5, "i2s0_din"),		/* DIN0 */
+		SUNXI_FUNCTION(0x6, "dmic"),		/* DATA2 */
+		SUNXI_FUNCTION(0x8, "gmac0"),		/* RXD3/MULL */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 14),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi1"),		/* SDA */
+		SUNXI_FUNCTION(0x3, "d_jtag"),	/* D1 */
+		SUNXI_FUNCTION(0x4, "pwm6"),
+		SUNXI_FUNCTION(0x5, "i2s0"),		/* LRCK */
+		SUNXI_FUNCTION(0x6, "dmic"),		/* DATA1 */
+		SUNXI_FUNCTION(0x8, "gmac0"),		/* RXCK/NULL */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 15),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi3"),		/* SCK */
+		SUNXI_FUNCTION(0x3, "d_jtag"),	/* D0 */
+		SUNXI_FUNCTION(0x4, "pwm7"),
+		SUNXI_FUNCTION(0x5, "i2s0"),		/* BCLK */
+		SUNXI_FUNCTION(0x6, "dmic"),		/* DATA0 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 16),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(E, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "twi3"),		/* SDA */
+		SUNXI_FUNCTION(0x3, "d_jtag"),	/* CK */
+		SUNXI_FUNCTION(0x4, "ir"),		/* TX */
+		SUNXI_FUNCTION(0x5, "i2s0"),		/* MCLK */
+		SUNXI_FUNCTION(0x6, "dmic"),		/* CLK */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 3, 17),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	/* PF */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* D1 */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* MS */
+		SUNXI_FUNCTION(0x4, "r_jtag"),		/* MS */
+		SUNXI_FUNCTION(0x5, "i2s2_dout"),	/* DOUT1 */
+		SUNXI_FUNCTION(0x6, "i2s2_din"),	/* DIN0 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 4, 0),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* D0 */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* DI */
+		SUNXI_FUNCTION(0x4, "r_jtag"),		/* DI */
+		SUNXI_FUNCTION(0x5, "i2s2_dout"),	/* DOUT0 */
+		SUNXI_FUNCTION(0x6, "i2s2_din"),	/* DIN1 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 4, 1),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* CLK */
+		SUNXI_FUNCTION(0x3, "uart0"),		/* TX */
+		SUNXI_FUNCTION(0x4, "twi0"),		/* SCK */
+		SUNXI_FUNCTION(0x5, "ledc"),
+		SUNXI_FUNCTION(0x6, "spdif"),		/* IN */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 4, 2),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* CMD */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* DO */
+		SUNXI_FUNCTION(0x4, "r_jtag"),		/* DO */
+		SUNXI_FUNCTION(0x5, "i2s2"),		/* BCLK */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 4, 3),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* D3 */
+		SUNXI_FUNCTION(0x3, "uart0"),		/* RX */
+		SUNXI_FUNCTION(0x4, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x5, "pwm6"),
+		SUNXI_FUNCTION(0x6, "ir"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 4, 4),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc0"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "jtag"),		/* CK */
+		SUNXI_FUNCTION(0x4, "r_jtag"),		/* CK */
+		SUNXI_FUNCTION(0x5, "i2s2"),		/* LRCK */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 4, 5),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(F, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x3, "spdif"),		/* OUT */
+		SUNXI_FUNCTION(0x4, "ir"),		/* RX */
+		SUNXI_FUNCTION(0x5, "i2s2"),		/* MCLK */
+		SUNXI_FUNCTION(0x6, "pwm5"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 4, 6),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	/* PG */
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* CLK */
+		SUNXI_FUNCTION(0x3, "uart3"),		/* TX */
+		SUNXI_FUNCTION(0x4, "gmac0"),		/* RXCTRL/CRS_DV */
+		SUNXI_FUNCTION(0x5, "pwm7"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 0),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* CMD */
+		SUNXI_FUNCTION(0x3, "uart3"),		/* RX */
+		SUNXI_FUNCTION(0x4, "gmac0"),		/* RXD0/RXD0 */
+		SUNXI_FUNCTION(0x5, "pwm6"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 1),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* D0 */
+		SUNXI_FUNCTION(0x3, "uart3"),		/* RTS */
+		SUNXI_FUNCTION(0x4, "gmac0"),		/* RXD1/RXD1 */
+		SUNXI_FUNCTION(0x5, "uart4"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 2),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* D1 */
+		SUNXI_FUNCTION(0x3, "uart3"),		/* CTS */
+		SUNXI_FUNCTION(0x4, "gmac0"),		/* RGMII_TXCK / RMII_TXCK */
+		SUNXI_FUNCTION(0x5, "uart4"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 3),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* D2 */
+		SUNXI_FUNCTION(0x3, "uart5"),		/* TX */
+		SUNXI_FUNCTION(0x4, "gmac0"),		/* TXD0/TXD0 */
+		SUNXI_FUNCTION(0x5, "pwm5"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 4),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "sdc1"),		/* D3 */
+		SUNXI_FUNCTION(0x3, "uart5"),		/* RX */
+		SUNXI_FUNCTION(0x4, "gmac0"),		/* TXD1/TXD1 */
+		SUNXI_FUNCTION(0x5, "pwm4"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 5),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 6),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),		/* TX */
+		SUNXI_FUNCTION(0x3, "twi2"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "gmac0"),		/* TXD2/NULL */
+		SUNXI_FUNCTION(0x5, "pwm1"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 6),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 7),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi2"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "gmac0"),		/* TXD3/NULL */
+		SUNXI_FUNCTION(0x5, "spdif"),		/* IN */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 7),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 8),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),		/* RTS */
+		SUNXI_FUNCTION(0x3, "twi1"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "gmac0"),		/* RXD2/NULL */
+		SUNXI_FUNCTION(0x5, "uart3"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 8),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 9),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart1"),		/* CTS */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "gmac0"),		/* RXD3/NULL */
+		SUNXI_FUNCTION(0x5, "uart3"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 9),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 10),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "pwm3"),
+		SUNXI_FUNCTION(0x3, "twi3"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "gmac0"),		/* RXCK/NULL */
+		SUNXI_FUNCTION(0x5, "clk_fanout0"),
+		SUNXI_FUNCTION(0x6, "ir"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 10),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 11),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "i2s1"),		/* MCLK */
+		SUNXI_FUNCTION(0x3, "twi3"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "gmac0"),
+		SUNXI_FUNCTION(0x5, "clk_fanout1"),
+		SUNXI_FUNCTION(0x6, "tcon"),		/* TRIG0 */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 11),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 12),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "i2s1"),		/* LRCK */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "gmac0"),		/* TXCTL/TXEN */
+		SUNXI_FUNCTION(0x5, "fanout2"),
+		SUNXI_FUNCTION(0x6, "pwm0"),
+		SUNXI_FUNCTION(0x7, "uart1"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 12),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 13),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "i2s1"),		/* BCLK */
+		SUNXI_FUNCTION(0x3, "twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "gmac0"),		/* CLKIN/RXER */
+		SUNXI_FUNCTION(0x5, "pwm2"),
+		SUNXI_FUNCTION(0x6, "ledc"),
+		SUNXI_FUNCTION(0x7, "uart1"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 13),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 14),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "i2s1_din"),	/* DIN0 */
+		SUNXI_FUNCTION(0x3, "twi2"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "gmac0"),
+		SUNXI_FUNCTION(0x5, "i2s1_dout"),	/* DOUT1 */
+		SUNXI_FUNCTION(0x6, "spi0"),		/* WP */
+		SUNXI_FUNCTION(0x7, "uart1"),		/* RTS */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 14),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 15),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "i2s1_dout"),	/* DOUT0 */
+		SUNXI_FUNCTION(0x3, "twi2"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "gmac0"),
+		SUNXI_FUNCTION(0x5, "i2s1_din"),	/* DIN1 */
+		SUNXI_FUNCTION(0x6, "spi0"),		/* HOLD */
+		SUNXI_FUNCTION(0x7, "uart1"),		/* CTS */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 15),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 16),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "ir"),		/* RX */
+		SUNXI_FUNCTION(0x3, "tcon"),		/* TRIG0 */
+		SUNXI_FUNCTION(0x4, "pwm5"),
+		SUNXI_FUNCTION(0x5, "clk_fanout2"),
+		SUNXI_FUNCTION(0x6, "spdif"),		/* IN */
+		SUNXI_FUNCTION(0x7, "ledc"),
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 16),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 17),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* TX */
+		SUNXI_FUNCTION(0x3, "twi3"),		/* SCK */
+		SUNXI_FUNCTION(0x4, "pwm7"),
+		SUNXI_FUNCTION(0x5, "clk_fanout0"),
+		SUNXI_FUNCTION(0x6, "ir"),		/* TX */
+		SUNXI_FUNCTION(0x7, "uart0"),		/* TX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 17),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(G, 18),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "uart2"),		/* RX */
+		SUNXI_FUNCTION(0x3, "twi3"),		/* SDA */
+		SUNXI_FUNCTION(0x4, "pwm6"),
+		SUNXI_FUNCTION(0x5, "clk_fanout1"),
+		SUNXI_FUNCTION(0x6, "spdif"),		/* OUT */
+		SUNXI_FUNCTION(0x7, "uart0"),		/* RX */
+		SUNXI_FUNCTION_IRQ_BANK(0xE, 5, 18),
+		SUNXI_FUNCTION(0xF, "io_disabled")),
+#endif
+};
+
+static const unsigned int sun8iw20_irq_bank_map[] = {
+	SUNXI_BANK_OFFSET('B', 'A'),
+	SUNXI_BANK_OFFSET('C', 'A'),
+	SUNXI_BANK_OFFSET('D', 'A'),
+	SUNXI_BANK_OFFSET('E', 'A'),
+	SUNXI_BANK_OFFSET('F', 'A'),
+	SUNXI_BANK_OFFSET('G', 'A'),
+};
+
+static const struct sunxi_pinctrl_desc sun8iw20_pinctrl_data = {
+	.pins = sun8iw20_pins,
+	.npins = ARRAY_SIZE(sun8iw20_pins),
+	.irq_banks = ARRAY_SIZE(sun8iw20_irq_bank_map),
+	.irq_bank_map = sun8iw20_irq_bank_map,
+	.io_bias_cfg_variant = BIAS_VOLTAGE_PIO_POW_MODE_CTL,
+	.pf_power_source_switch = true,
+	.hw_type = SUNXI_PCTL_HW_TYPE_1,
+};
+
+/* PINCTRL power management code */
+#if IS_ENABLED(CONFIG_PM_SLEEP)
+
+static void *mem;
+static int mem_size;
+
+static int pinctrl_pm_alloc_mem(struct platform_device *pdev)
+{
+	struct resource *res;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res)
+		return -EINVAL;
+	mem_size = resource_size(res);
+
+	mem = devm_kzalloc(&pdev->dev, mem_size, GFP_KERNEL);
+	if (!mem)
+		return -ENOMEM;
+	return 0;
+}
+
+static int sun8iw20_pinctrl_suspend_noirq(struct device *dev)
+{
+	struct sunxi_pinctrl *pctl = dev_get_drvdata(dev);
+	unsigned long flags;
+
+	dev_info(dev, "pinctrl suspend\n");
+
+	raw_spin_lock_irqsave(&pctl->lock, flags);
+	memcpy_fromio(mem, pctl->membase, mem_size);
+	raw_spin_unlock_irqrestore(&pctl->lock, flags);
+
+	return 0;
+}
+
+static int sun8iw20_pinctrl_resume_noirq(struct device *dev)
+{
+	struct sunxi_pinctrl *pctl = dev_get_drvdata(dev);
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&pctl->lock, flags);
+	memcpy_toio(pctl->membase, mem, mem_size);
+	raw_spin_unlock_irqrestore(&pctl->lock, flags);
+
+	dev_info(dev, "pinctrl resume\n");
+
+	return 0;
+}
+
+static const struct dev_pm_ops sun8iw20_pinctrl_pm_ops = {
+	.suspend_noirq = sun8iw20_pinctrl_suspend_noirq,
+	.resume_noirq = sun8iw20_pinctrl_resume_noirq,
+};
+#define PINCTRL_PM_OPS	(&sun8iw20_pinctrl_pm_ops)
+
+#else
+static int pinctrl_pm_alloc_mem(struct platform_device *pdev)
+{
+	return 0;
+}
+#define PINCTRL_PM_OPS	NULL
+#endif
+
+static int sun8iw20_pinctrl_probe(struct platform_device *pdev)
+{
+	int ret;
+	ret = pinctrl_pm_alloc_mem(pdev);
+	if (ret) {
+		dev_err(&pdev->dev, "alloc pm mem err\n");
+		return ret;
+	}
+#if IS_ENABLED(CONFIG_PINCTRL_SUNXI_DEBUGFS)
+	dev_set_name(&pdev->dev, "pio");
+#endif
+	return sunxi_pinctrl_init(pdev, &sun8iw20_pinctrl_data);
+}
+
+static struct of_device_id sun8iw20_pinctrl_match[] = {
+	{ .compatible = "allwinner,sun8iw20-pinctrl", },
+	{ .compatible = "allwinner,sun20iw1-pinctrl", },
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, sun8iw20_pinctrl_match);
+
+static struct platform_driver sun8iw20_pinctrl_driver = {
+	.probe	= sun8iw20_pinctrl_probe,
+	.driver	= {
+		.name		= "sun8iw20-pinctrl",
+		.pm		= PINCTRL_PM_OPS,
+		.of_match_table	= sun8iw20_pinctrl_match,
+	},
+};
+
+static int __init sun8iw20_pio_init(void)
+{
+	return platform_driver_register(&sun8iw20_pinctrl_driver);
+}
+/*
+ * TODO: To ensure the load time of the pinctrl is after the
+ * subsys_initcall("regulator_fixed_voltage_init" will use it)
+ */
+fs_initcall(sun8iw20_pio_init);
+
+MODULE_DESCRIPTION("Allwinner sun8iw20 pio pinctrl driver");
+MODULE_AUTHOR("Martin <wuyan@allwinnertech>");
+MODULE_LICENSE("GPL");
+MODULE_VERSION("1.0.1");
diff --git a/drivers/pinctrl/sunxi/pinctrl-sunxi-test.c b/drivers/pinctrl/sunxi/pinctrl-sunxi-test.c
new file mode 100644
index 000000000..be951b5c3
--- /dev/null
+++ b/drivers/pinctrl/sunxi/pinctrl-sunxi-test.c
@@ -0,0 +1,1780 @@
+/*
+ * Allwinner SoCs pinctrl driver.
+ *
+ * Copyright (C) 2013 Shaorui Huang
+ *
+ * Shaorui Huang<huangshr@allwinnertech.com>
+ * 2013-06-10  add sunxi pinctrl testing case.
+ *
+ * WimHuang<huangwei@allwinnertech.com>
+ * 2015-07-20  transplant it from linux-3.4 to linux-3.10.
+ *
+ * Martin <wuyan@allwinnertech.com>
+ * 2020-05-20  support linux-5.4
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#include <linux/io.h>
+#include <linux/clk.h>
+#include <linux/gpio.h>
+#include <linux/interrupt.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/string.h>
+#include <linux/ctype.h>
+#include <linux/sunxi-gpio.h>
+#include <linux/pinctrl/pinctrl-sunxi.h>
+#include <linux/pm_wakeirq.h>
+
+#include "../core.h"
+
+#define SUNXI_DEV_NAME_MAX_LEN		20
+#define SUNXI_FUNC_NAME_MAX_LEN		80
+
+/* sunxi pinctrl driver in linux-5.4 does not support pin_config_get()/pin_config_set() any more */
+/* @TODO: Remove the related code, or find an alternative API */
+#define SUPPORT_PIN_CONFIG_API		0
+
+struct sunxi_pctrltest_data {
+	char dev_name[SUNXI_DEV_NAME_MAX_LEN];
+	char exec[SUNXI_FUNC_NAME_MAX_LEN];  /* the command from user space */
+	struct completion irq_done;
+	int result;
+	int gpio_index;
+	int funcs;
+	int pull;
+	int data;
+	int dlevel;
+	int irq;
+};
+
+struct pinctrl_case {
+	const char *name;
+	int (*func)(void);
+};
+
+/*
+ * struct sunxi_gpio_config - gpio config info
+ * @name:      gpio name
+ * @mul_sel:   multi sel val: 0 - input, 1 - output.
+ * @pull:      pull val: 0 - pull up/down disable, 1 - pull up
+ * @drive:     driver level val: 0 - level 0, 1 - level 1
+ * @data:      data val: 0 - low, 1 - high, only valid when mul_sel is input/output
+ */
+struct sunxi_gpio_config {
+	const char *name;
+	u32 mulsel;
+	u32 pull;
+	u32 drive;
+	u32 data;
+};
+
+static struct sunxi_pctrltest_data *sunxi_ptest_data;
+
+static int dt_node_to_gpio(struct device_node *np_cfg,
+			   struct sunxi_gpio_config **gpio_list,
+			   unsigned *gpio_count)
+{
+	struct property *prop = NULL;
+	const char *name = NULL;
+	int val;
+	int i = 0;
+
+	*gpio_count = of_property_count_strings(np_cfg, "allwinner,pins");
+	if (*gpio_count < 0) {
+		pr_warn("missing allwinner,pins property in node %s\n",
+			 np_cfg->name);
+		return -EINVAL;
+	}
+
+	*gpio_list = kmalloc_array(*gpio_count, sizeof(struct sunxi_gpio_config), GFP_KERNEL);
+	if (!*gpio_list) {
+		pr_warn("No enougt memory for gpio_list\n");
+		return -ENOMEM;
+	}
+
+	of_property_for_each_string(np_cfg, "allwinner,pins", prop, name) {
+		(*gpio_list)[i].name = name;
+
+		if (of_property_read_u32(np_cfg, "allwinner,muxsel", &val)) {
+			pr_warn("missing allwinner,mux property in node %s\n",
+				np_cfg->name);
+			return -EINVAL;
+		}
+		(*gpio_list)[i].mulsel = val;
+
+		if (of_property_read_u32(np_cfg, "allwinner,drive", &val)) {
+			pr_warn("missing allwinner,dirve property in node %s\n",
+				np_cfg->name);
+			return -EINVAL;
+		}
+		(*gpio_list)[i].drive = val;
+
+		if (of_property_read_u32(np_cfg, "allwinner,pull", &val)) {
+			pr_warn("missing allwinner,pull property in node %s\n",
+				np_cfg->name);
+			return -EINVAL;
+		}
+		(*gpio_list)[i].pull = val;
+
+		if (of_property_read_u32(np_cfg, "allwinner,data", &val)) {
+			pr_warn("missing allwinner,data property in node %s\n",
+				np_cfg->name);
+			val = 0;
+		}
+		(*gpio_list)[i].data = val;
+
+		i++;
+	}
+
+	return 0;
+}
+
+static int dt_get_gpio_list(struct device_node *np,
+			   struct sunxi_gpio_config **gpio_list,
+			   unsigned *gpio_count)
+{
+	struct property *prop;
+	int size;
+	const __be32 *list;
+	struct device_node *np_cfg;
+	phandle phandle;
+	int ret;
+	int i;
+
+	/* only need pin whose state is default */
+	prop = of_find_property(np, "pinctrl-0", &size);
+	if (!prop) {
+		pr_warn("missing pinctrl-0 property in node %s\n", np->name);
+		return -EINVAL;
+	}
+	list = prop->value;
+	size /= sizeof(*list);
+
+	/* For every referenced pin configuration node in it */
+	for (i = 0; i < size; i++) {
+		phandle = be32_to_cpup(list++);
+
+		/* Look up the pin configuration node */
+		np_cfg = of_find_node_by_phandle(phandle);
+		if (!np_cfg) {
+			pr_warn("prop %s index 0 invalid phandle\n", prop->name);
+			return -EINVAL;
+		}
+
+		/* Parse the node */
+		ret = dt_node_to_gpio(np_cfg, gpio_list, gpio_count);
+		if (ret < 0)
+			return -EINVAL;
+	}
+
+	return 0;
+}
+
+static irqreturn_t sunxi_pinctrl_irq_handler_demo3(int irq, void *dev_id)
+{
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("%s: demo3 for test pinctrl repeat eint api.\n", __func__);
+	pr_warn("-----------------------------------------------\n");
+	return IRQ_HANDLED;
+}
+
+static int pctrltest_request_all_resource(void)
+{
+	struct device *dev;
+	struct device_node *node;
+	struct pinctrl *pinctrl;
+	struct sunxi_gpio_config *gpio_list = NULL;
+	__maybe_unused struct sunxi_gpio_config *gpio_cfg;
+	unsigned gpio_count = 0;
+	__maybe_unused unsigned gpio_index;
+	__maybe_unused unsigned long config;
+	int ret;
+
+	dev = bus_find_device_by_name(&platform_bus_type, NULL, sunxi_ptest_data->dev_name);
+	if (!dev) {
+		pr_warn("find device [%s] failed...\n", sunxi_ptest_data->dev_name);
+		return -EINVAL;
+	}
+
+	node = of_find_node_by_type(NULL, dev_name(dev));
+	if (!node) {
+		pr_warn("find node for device [%s] failed...\n", dev_name(dev));
+		return -EINVAL;
+	}
+	dev->of_node = node;
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("device[%s] all pin resource we want to request\n", dev_name(dev));
+	pr_warn("-----------------------------------------------\n");
+
+	pr_warn("step1: request pin all resource.\n");
+	pinctrl = devm_pinctrl_get_select_default(dev);
+	if (IS_ERR_OR_NULL(pinctrl)) {
+		pr_warn("request pinctrl handle for device [%s] failed...\n", dev_name(dev));
+		return -EINVAL;
+	}
+
+	pr_warn("step2: get device[%s] pin count.\n", dev_name(dev));
+	ret = dt_get_gpio_list(node, &gpio_list, &gpio_count);
+	if (ret < 0 || gpio_count == 0) {
+		pr_warn(" devices own 0 pin resource or look for main key failed!\n");
+		return -EINVAL;
+	}
+#if SUPPORT_PIN_CONFIG_API
+	pr_warn("step3: get device[%s] pin configure and check.\n", dev_name(dev));
+	for (gpio_index = 0; gpio_index < gpio_count; gpio_index++) {
+		gpio_cfg = &gpio_list[gpio_index];
+
+		// check function config
+		config = SUNXI_PINCFG_PACK(SUNXI_PINCFG_TYPE_FUNC, 0xFFFFFF);
+		pin_config_get(SUNXI_PINCTRL, gpio_cfg->name, &config);
+		if (gpio_cfg->mulsel != SUNXI_PINCFG_UNPACK_VALUE(config)) {
+			pr_warn("failed! mul value isn't equal as dt.\n");
+			return -EINVAL;
+		}
+
+		// check pull config
+		if (gpio_cfg->pull != GPIO_PULL_DEFAULT) {
+			config = SUNXI_PINCFG_PACK(SUNXI_PINCFG_TYPE_PUD, 0xFFFFFF);
+			pin_config_get(SUNXI_PINCTRL, gpio_cfg->name, &config);
+			if (gpio_cfg->pull != SUNXI_PINCFG_UNPACK_VALUE(config)) {
+				pr_warn("failed! pull value isn't equal as dt.\n");
+				return -EINVAL;
+			}
+		}
+
+		// check dlevel config
+		if (gpio_cfg->drive != GPIO_DRVLVL_DEFAULT) {
+			config = SUNXI_PINCFG_PACK(SUNXI_PINCFG_TYPE_DRV, 0XFFFF);
+			pin_config_get(SUNXI_PINCTRL, gpio_cfg->name, &config);
+			if (gpio_cfg->drive != SUNXI_PINCFG_UNPACK_VALUE(config)) {
+				pr_warn("failed! dlevel value isn't equal as dt.\n");
+				return -EINVAL;
+			}
+		}
+
+		// check data config
+		if (gpio_cfg->data != GPIO_DATA_DEFAULT) {
+			config = SUNXI_PINCFG_PACK(SUNXI_PINCFG_TYPE_DAT, 0XFFFF);
+			pin_config_get(SUNXI_PINCTRL, gpio_cfg->name, &config);
+			if (gpio_cfg->data != SUNXI_PINCFG_UNPACK_VALUE(config)) {
+				pr_warn("failed! pin data value isn't equal as dt.\n");
+				return -EINVAL;
+			}
+		}
+	}
+#endif
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pinctrl request all resource success!\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int pctrltest_re_request_all_resource(void)
+{
+	struct device *dev;
+	struct device_node *node;
+	struct pinctrl *pinctrl_1;
+	struct pinctrl *pinctrl_2;
+
+	dev = bus_find_device_by_name(&platform_bus_type, NULL, sunxi_ptest_data->dev_name);
+	if (!dev) {
+		pr_warn("find device [%s] failed...\n", sunxi_ptest_data->dev_name);
+		return -EINVAL;
+	}
+
+	node = of_find_node_by_type(NULL, dev_name(dev));
+	if (!node) {
+		pr_warn("find node for device [%s] failed...\n", dev_name(dev));
+		return -EINVAL;
+	}
+	dev->of_node = node;
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("device[%s] all pin resource we want to repeat request\n", dev_name(dev));
+	pr_warn("-----------------------------------------------\n");
+
+	pr_warn("step1: first time request pin all resource.\n");
+	// request all resource
+	pinctrl_1 = devm_pinctrl_get_select_default(dev);
+	if (IS_ERR_OR_NULL(pinctrl_1)) {
+		pr_warn("request pinctrl handle for device [%s] failed!\n", dev_name(dev));
+		return -EINVAL;
+	}
+
+	// repeat request
+	pr_warn("step2: secondary request pin all resource.\n");
+	pinctrl_2 = devm_pinctrl_get_select_default(dev);
+	if (IS_ERR_OR_NULL(pinctrl_2)) {
+		pr_warn("repeat request device[%s] all pin resource failed\n", dev_name(dev));
+		return -EINVAL;
+	}
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pinctrl repeat request all resource success.\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int pctrltest_request_gpio(void)
+{
+	int req_status;
+	int gpio_index;
+	char pin_name[SUNXI_PIN_NAME_MAX_LEN];
+
+	gpio_index = sunxi_ptest_data->gpio_index;
+	sunxi_gpio_to_name(gpio_index, pin_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("gpio name is : %s	gpio index is : %d\n", pin_name, gpio_index);
+	pr_warn("-----------------------------------------------\n");
+	pinctrl_gpio_free(gpio_index);
+
+	/* request signal pin as gpio*/
+	pr_warn("step1: pinctrl request gpio[%s]\n", pin_name);
+	req_status = pinctrl_gpio_request(gpio_index);
+	if (req_status != 0) {
+		pr_warn("pinctrl request gpio failed! return value %d\n", req_status);
+		return -EINVAL;
+	}
+	pr_warn("       pinctrl request gpio[%s] success\n", pin_name);
+	pinctrl_gpio_free(gpio_index);
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pinctrl request gpio api success!\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int pctrltest_free_gpio(void)
+{
+	int req_status;
+	int gpio_index;
+	char pin_name[SUNXI_PIN_NAME_MAX_LEN];
+
+	gpio_index = sunxi_ptest_data->gpio_index;
+	sunxi_gpio_to_name(gpio_index, pin_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("gpio name is : %s	gpio index is : %d\n", pin_name, gpio_index);
+	pr_warn("-----------------------------------------------\n");
+	pinctrl_gpio_free(gpio_index);
+
+	/*request signal pin as gpio*/
+	pr_warn("step1: pinctrl request gpio[%s]\n", pin_name);
+	req_status = pinctrl_gpio_request(gpio_index);
+	if (req_status != 0) {
+		pr_warn("pinctrl request gpio failed !return value %d\n", req_status);
+		return -EINVAL;
+	}
+	pr_warn("       pinctrl request gpio[%s]success\n", pin_name);
+
+	pr_warn("step2: pinctrl free gpio[%s]\n", pin_name);
+	pinctrl_gpio_free(gpio_index);
+
+	pr_warn("step3: pinctrl request the same gpio[%s] again..\n", pin_name);
+	req_status = pinctrl_gpio_request(gpio_index);
+	if (req_status != 0) {
+		pr_warn("pinctrl request gpio failed !return value %d\n", req_status);
+		return -EINVAL;
+	}
+	pr_warn("       pinctrl request gpio[%s] again success.\n", pin_name);
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pinctrl free gpio api success!\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	pinctrl_gpio_free(gpio_index);
+	return 0;
+}
+
+static int pctrltest_lookup_state(void)
+{
+	struct device *dev;
+	struct pinctrl *pinctrl;
+	struct pinctrl_state *state;
+	char device_name[SUNXI_DEV_NAME_MAX_LEN];
+
+	dev = bus_find_device_by_name(&platform_bus_type, NULL, sunxi_ptest_data->dev_name);
+	if (!dev) {
+		pr_warn("find device [%s] failed...\n", sunxi_ptest_data->dev_name);
+		return -EINVAL;
+	}
+
+	dev_set_name(dev, sunxi_ptest_data->dev_name);
+	strcpy(device_name, sunxi_ptest_data->dev_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("device[%s] test lookup state api\n", dev_name(dev));
+	pr_warn("-----------------------------------------------\n");
+
+	pr_warn("step1: get pinctrl handle.\n");
+	pinctrl = pinctrl_get(dev);
+	if (IS_ERR_OR_NULL(pinctrl)) {
+		pr_warn("get pinctrl handle [%s] failed...,return value %ld\n",
+			device_name, PTR_ERR(pinctrl));
+		return -EINVAL;
+	}
+
+	pr_warn("step2: printk pinctrl current state.\n");
+	pr_warn("       device: %s current state: %s\n", dev_name(pinctrl->dev),
+		pinctrl->state ? pinctrl->state->name : "none");
+
+	pr_warn("step3: pinctrl lookup state(default state name: default).\n");
+	state = pinctrl_lookup_state(pinctrl, "default");
+	if (IS_ERR(state)) {
+		pr_warn("can not find state: default.\n");
+		return -EINVAL;
+	}
+
+	pr_warn("step4: check the state we lookup if the one needed.\n");
+	if (strcmp(state->name, "default")) {
+		pr_warn("find state,but isn't the one we need.\n");
+		return -EINVAL;
+	}
+	pinctrl_put(pinctrl);
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pinctrl look up state api success!\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int pctrltest_select_state(void)
+{
+	struct device *dev;
+	struct pinctrl *pinctrl;
+	struct pinctrl_state *state;
+	char device_name[SUNXI_DEV_NAME_MAX_LEN];
+	int req_status;
+
+	dev = bus_find_device_by_name(&platform_bus_type, NULL, sunxi_ptest_data->dev_name);
+	if (!dev) {
+		pr_warn("find device [%s] failed...\n", sunxi_ptest_data->dev_name);
+		return -EINVAL;
+	}
+
+	dev_set_name(dev, sunxi_ptest_data->dev_name);
+	strcpy(device_name, sunxi_ptest_data->dev_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("device[%s] test select state api\n", dev_name(dev));
+	pr_warn("-----------------------------------------------\n");
+
+	pr_warn("step1: get pinctrl handle.\n");
+	pinctrl = pinctrl_get(dev);
+	if (IS_ERR_OR_NULL(pinctrl)) {
+		pr_warn("get pinctrl handle [%s] failed..., return value %ld\n",
+			device_name, PTR_ERR(pinctrl));
+		return -EINVAL;
+	}
+
+	pr_warn("step2: printk pinctrl current state.\n");
+	pr_warn("       device: %s current state: %s\n", dev_name(pinctrl->dev),
+		pinctrl->state ? pinctrl->state->name : "none");
+
+	pr_warn("step3: pinctrl lookup state(default state name: default).\n");
+	state = pinctrl_lookup_state(pinctrl, "default");
+	if (IS_ERR(state)) {
+		pinctrl_put(pinctrl);
+		pr_warn("can not find state: default.\n");
+		return -EINVAL;
+	}
+
+	pr_warn("step4: check the state we lookup if the one needed.\n");
+	if (strcmp(state->name, "default")) {
+		pinctrl_put(pinctrl);
+		pr_warn("find state,but isn't the one we need.\n");
+		return -EINVAL;
+	}
+
+	pr_warn("step5: select state for pinctrl handle.\n");
+	req_status = pinctrl_select_state(pinctrl, state);
+	if (req_status < 0) {
+		pinctrl_put(pinctrl);
+		pr_warn("pinctrl select state failed. return value %d.\n", req_status);
+	}
+
+	pinctrl_put(pinctrl);
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pinctrl select state api success!\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int pctrltest_select_sleep_state(void)
+{
+	struct device *dev;
+	struct pinctrl *pinctrl;
+	struct pinctrl_state *state;
+	char device_name[SUNXI_DEV_NAME_MAX_LEN];
+	int req_status;
+
+	dev = bus_find_device_by_name(&platform_bus_type, NULL, sunxi_ptest_data->dev_name);
+	if (!dev) {
+		pr_warn("find device [%s] failed...\n", sunxi_ptest_data->dev_name);
+		return -EINVAL;
+	}
+
+	dev_set_name(dev, sunxi_ptest_data->dev_name);
+	strcpy(device_name, sunxi_ptest_data->dev_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("device[%s] test select state api\n", dev_name(dev));
+	pr_warn("-----------------------------------------------\n");
+
+	pr_warn("step1: get pinctrl handle.\n");
+	pinctrl = pinctrl_get(dev);
+	if (IS_ERR_OR_NULL(pinctrl)) {
+		pr_warn("get pinctrl handle [%s] failed..., return value %ld\n",
+			device_name, PTR_ERR(pinctrl));
+		return -EINVAL;
+	}
+
+	pr_warn("step2: printk pinctrl current state.\n");
+	pr_warn("       device: %s current state: %s\n", dev_name(pinctrl->dev),
+		pinctrl->state ? pinctrl->state->name : "none");
+
+	pr_warn("step3: pinctrl lookup state sleep.\n");
+	state = pinctrl_lookup_state(pinctrl, "sleep");
+	if (IS_ERR(state)) {
+		pinctrl_put(pinctrl);
+		pr_warn("can not find state: sleep.\n");
+		return -EINVAL;
+	}
+
+	pr_warn("step4: check the state we lookup if the one needed.\n");
+	if (strcmp(state->name, "sleep")) {
+		pinctrl_put(pinctrl);
+		pr_warn("find state,but isn't the one we need.\n");
+		return -EINVAL;
+	}
+
+	pr_warn("step5: select state for pinctrl handle.\n");
+	req_status = pinctrl_select_state(pinctrl, state);
+	if (req_status < 0) {
+		pinctrl_put(pinctrl);
+		pr_warn("pinctrl select state failed. return value %d.\n", req_status);
+	}
+
+	pinctrl_put(pinctrl);
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pinctrl select sleep state api success!\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int pctrltest_get(void)
+{
+	struct device *dev;
+	struct pinctrl *pinctrl;
+	struct pinctrl_state *state;
+	struct pinctrl_setting *setting;
+	char device_name[SUNXI_DEV_NAME_MAX_LEN];
+
+	dev = bus_find_device_by_name(&platform_bus_type, NULL, sunxi_ptest_data->dev_name);
+	if (!dev) {
+		pr_warn("find device [%s] failed...\n", sunxi_ptest_data->dev_name);
+		return -EINVAL;
+	}
+
+	dev_set_name(dev, sunxi_ptest_data->dev_name);
+	strcpy(device_name, sunxi_ptest_data->dev_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("device[%s] test pinctrl get api\n", dev_name(dev));
+	pr_warn("-----------------------------------------------\n");
+
+	pr_warn("step1: get pinctrl handle.\n");
+	pinctrl = pinctrl_get(dev);
+	if (IS_ERR_OR_NULL(pinctrl)) {
+		pr_warn("get pinctrl handle [%s] failed..., return value %ld\n",
+			dev_name(dev), PTR_ERR(pinctrl));
+		return -EINVAL;
+	}
+
+	pr_warn("step2: check pinctrl handle we have getted.\n");
+	if (dev_name(dev) != dev_name(pinctrl->dev)) {
+		pinctrl_put(pinctrl);
+		pr_warn("check: pinctrl handle isn't that one we want\n ");
+		return -EINVAL;
+	}
+
+	pr_warn("step3: get current statep.\n");
+	pr_warn("       device: %s current state: %s\n", dev_name(pinctrl->dev),
+		 pinctrl->state ? pinctrl->state->name : "none");
+	list_for_each_entry(state, &pinctrl->states, node) {
+		pr_warn("state: %s\n", state->name);
+		list_for_each_entry(setting, &state->settings, node) {
+			struct pinctrl_dev *pctldev = setting->pctldev;
+
+			pr_warn("      setting type: %d   pin controller %s\n",
+				setting->type, pinctrl_dev_get_name(pctldev));
+		}
+	}
+	pinctrl_put(pinctrl);
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pinctrl get api success!\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int pctrltest_put(void)
+{
+	struct device *dev;
+	struct pinctrl *pinctrl;
+	struct pinctrl_state *state;
+	struct pinctrl_setting *setting;
+	char device_name[SUNXI_DEV_NAME_MAX_LEN];
+
+	dev = bus_find_device_by_name(&platform_bus_type, NULL, sunxi_ptest_data->dev_name);
+	if (!dev) {
+		pr_warn("find device [%s] failed...\n", sunxi_ptest_data->dev_name);
+		return -EINVAL;
+	}
+
+	dev_set_name(dev, sunxi_ptest_data->dev_name);
+	strcpy(device_name, sunxi_ptest_data->dev_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("device[%s] test pinctrl put api\n", dev_name(dev));
+	pr_warn("-----------------------------------------------\n");
+
+	pr_warn("step1: get pinctrl handle.\n");
+	pinctrl = pinctrl_get(dev);
+	if (IS_ERR_OR_NULL(pinctrl)) {
+		pr_warn("get pinctrl handle [%s] failed...,return value %ld\n",
+			device_name, PTR_ERR(pinctrl));
+		return -EINVAL;
+	}
+
+	pr_warn("step2: check pinctrl handle we have getted.\n");
+	if (dev_name(dev) != dev_name(pinctrl->dev)) {
+		pinctrl_put(pinctrl);
+		pr_warn("check: pinctrl handle isn't that one we want\n");
+		return -EINVAL;
+	}
+
+	pr_warn("step3: get current statep.\n");
+	pr_warn("       device: %s current state: %s\n", dev_name(pinctrl->dev),
+		pinctrl->state ? pinctrl->state->name : "none");
+	list_for_each_entry(state, &pinctrl->states, node) {
+		pr_warn("state: %s\n", state->name);
+		list_for_each_entry(setting, &state->settings, node) {
+			struct pinctrl_dev *pctldev = setting->pctldev;
+
+			pr_warn("    setting type: %d   pin controller %s\n",
+				setting->type, pinctrl_dev_get_name(pctldev));
+		}
+	}
+
+	pr_warn("step4: free pinctrl handle we have getted.\n");
+	pinctrl_put(pinctrl);
+
+	pr_warn("step5: then repeat get. if get success, previous free operate success.\n");
+	pinctrl = pinctrl_get(dev);
+	if (IS_ERR_OR_NULL(pinctrl)) {
+		pr_warn("       after free, we repeat get pinctrl handle [%s] failed..., return value %ld\n",
+			device_name, PTR_ERR(pinctrl));
+		return -EINVAL;
+	}
+	pinctrl_put(pinctrl);
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pinctrl put api success!\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int pctrltest_devm_get_and_put(void)
+{
+	struct device *dev;
+	struct pinctrl *pinctrl;
+	struct pinctrl_state *state;
+	struct pinctrl_setting *setting;
+	char device_name[SUNXI_DEV_NAME_MAX_LEN];
+
+	dev = bus_find_device_by_name(&platform_bus_type, NULL, sunxi_ptest_data->dev_name);
+	if (!dev) {
+		pr_warn("find device [%s] failed...\n", sunxi_ptest_data->dev_name);
+		return -EINVAL;
+	}
+
+	dev_set_name(dev, sunxi_ptest_data->dev_name);
+	strcpy(device_name, sunxi_ptest_data->dev_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("device[%s] test pinctrl devm get and put api\n", dev_name(dev));
+	pr_warn("-----------------------------------------------\n");
+
+	pr_warn("step1: devm get pinctrl handle.\n");
+	pinctrl = devm_pinctrl_get(dev);
+	if (IS_ERR(pinctrl)) {
+		pr_warn("get pinctrl handle [%s] failed..., return value %ld\n",
+			device_name, PTR_ERR(pinctrl));
+		return -EINVAL;
+	}
+
+	pr_warn("step2: check pinctrl handle we have getted.\n");
+	if (dev_name(dev) != dev_name(pinctrl->dev)) {
+		devm_pinctrl_put(pinctrl);
+		pr_warn("check: pinctrl handle isn't that one we want\n ");
+		return -EINVAL;
+	}
+
+	pr_warn("step3: get current statep.\n");
+	pr_warn("       device: %s current state: %s\n", dev_name(pinctrl->dev),
+		pinctrl->state ? pinctrl->state->name : "none");
+	list_for_each_entry(state, &pinctrl->states, node) {
+		pr_warn("state: %s\n", state->name);
+		list_for_each_entry(setting, &state->settings, node) {
+			struct pinctrl_dev *pctldev = setting->pctldev;
+
+			pr_warn("      setting type: %d   pin controller %s\n",
+				setting->type, pinctrl_dev_get_name(pctldev));
+		}
+	}
+
+	pr_warn("step4: devm free pinctrl handle we have getted.\n");
+	devm_pinctrl_put(pinctrl);
+
+	pr_warn("step5: then repeat get. if get success, previous free operate success.\n");
+	pinctrl = devm_pinctrl_get(dev);
+	if (IS_ERR(pinctrl)) {
+		pr_warn("       after free,we repeat get pinctrl handle [%s] failed..., return value %ld\n",
+			device_name, PTR_ERR(pinctrl));
+		return -EINVAL;
+	}
+	devm_pinctrl_put(pinctrl);
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pinctrl devm get and put api success!\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int pctrltest_function_set(void)
+{
+	unsigned long config_set = 0;
+	char pin_name[SUNXI_PIN_NAME_MAX_LEN];
+	int func = 0;
+	int ret = 0;
+	unsigned gpio = sunxi_ptest_data->gpio_index;
+
+	func = sunxi_ptest_data->funcs;
+	sunxi_gpio_to_name(sunxi_ptest_data->gpio_index, pin_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("pin function we want to set:\n");
+	pr_warn(" gpio name: %s	    gpio index: %d       gpio function: %d\n",
+		pin_name, gpio, func);
+	pr_warn("-----------------------------------------------\n");
+
+
+	pr_warn("step1: set [%s] function value to %d\n", pin_name, func);
+	config_set = pinconf_to_config_packed(SUNXI_PINCFG_TYPE_FUNC, func);
+	ret = pinctrl_gpio_set_config(gpio, config_set);
+	if (ret < 0) {
+		pr_warn("test pinctrl function set fail\n");
+		return -EINVAL;
+	}
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pinctrl function set success !\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int pctrltest_data_set(void)
+{
+	__maybe_unused unsigned long config_set;
+	__maybe_unused unsigned long config_get;
+	char pin_name[SUNXI_PIN_NAME_MAX_LEN];
+	int data;
+
+	data = sunxi_ptest_data->data;
+	sunxi_gpio_to_name(sunxi_ptest_data->gpio_index, pin_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("pin data we want to set:\n");
+	pr_warn(" gpio name: %s	    gpio index: %d       gpio data: %d\n",
+		pin_name, sunxi_ptest_data->gpio_index, data);
+	pr_warn("-----------------------------------------------\n");
+#if SUPPORT_PIN_CONFIG_API
+	/*check if pin data setting right */
+	pr_warn("step1: get [%s] data value.\n", pin_name);
+	config_get = SUNXI_PINCFG_PACK(SUNXI_PINCFG_TYPE_DAT, 0XFFFF);
+	pin_config_get(SUNXI_PINCTRL, pin_name, &config_get);
+	pr_warn("       [%s] data value: %ld\n", pin_name, SUNXI_PINCFG_UNPACK_VALUE(config_get));
+
+	pr_warn("step2: set [%s] data value to %d\n", pin_name, data);
+	config_set = SUNXI_PINCFG_PACK(SUNXI_PINCFG_TYPE_DAT, data);
+	pin_config_set(SUNXI_PINCTRL, pin_name, config_set);
+
+	pr_warn("step3: get [%s] data value and check.\n", pin_name);
+	config_get = SUNXI_PINCFG_PACK(SUNXI_PINCFG_TYPE_DAT, 0XFFFF);
+	pin_config_get(SUNXI_PINCTRL, pin_name, &config_get);
+	if (data != SUNXI_PINCFG_UNPACK_VALUE(config_get)) {
+		pr_warn("test pin config for dlevel setting failed !\n");
+		return -EINVAL;
+	}
+#endif
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pinctrl data set success!\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int pctrltest_pull_set(void)
+{
+	unsigned long config_set = 0;
+	char pin_name[SUNXI_PIN_NAME_MAX_LEN];
+	int pull = 0;
+	int ret = 0;
+	unsigned gpio = sunxi_ptest_data->gpio_index;
+
+	pull = sunxi_ptest_data->pull;
+	sunxi_gpio_to_name(sunxi_ptest_data->gpio_index, pin_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("pin data we want to set:\n");
+	pr_warn(" gpio name: %s	    gpio index: %d       gpio pull: %d\n",
+		pin_name, gpio, pull);
+	pr_warn("-----------------------------------------------\n");
+
+	pr_warn("step1: set [%s] pull value to %d\n", pin_name, pull);
+	config_set = pinconf_to_config_packed(SUNXI_PINCFG_TYPE_PUD, pull);
+	ret = pinctrl_gpio_set_config(gpio, config_set);
+	if (ret < 0) {
+		pr_warn("test set pinctrl pull fail\n");
+		return -EINVAL;
+	}
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pinctrl pull set success!\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int pctrltest_dlevel_set(void)
+{
+	unsigned long config_set = 0;
+	char pin_name[SUNXI_PIN_NAME_MAX_LEN];
+	int dlevel = 0;
+	int ret = 0;
+	unsigned gpio = sunxi_ptest_data->gpio_index;
+
+	dlevel = sunxi_ptest_data->dlevel;
+	sunxi_gpio_to_name(sunxi_ptest_data->gpio_index, pin_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("pin data we want to set:\n");
+	pr_warn(" gpio name: %s	    gpio index: %d       gpio dlevel: %d\n",
+		pin_name, gpio, dlevel);
+	pr_warn("-----------------------------------------------\n");
+
+	pr_warn("step1: set [%s] dlevel value to %d\n", pin_name, dlevel);
+	config_set = pinconf_to_config_packed(SUNXI_PINCFG_TYPE_DRV, dlevel);
+	ret = pinctrl_gpio_set_config(gpio, config_set);
+	if (ret < 0) {
+		pr_warn("test set pinctrl dlevel fail\n");
+		return -EINVAL;
+	}
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pinctrl drive level set success!\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int pctrltest_direction_input(void)
+{
+	int gpio_index;
+	char pin_name[SUNXI_PIN_NAME_MAX_LEN];
+	int req_status;
+	int direct_status;
+
+	gpio_index = sunxi_ptest_data->gpio_index;
+	sunxi_gpio_to_name(sunxi_ptest_data->gpio_index, pin_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("gpio name is : %s	gpio index is : %d\n", pin_name, gpio_index);
+	pinctrl_gpio_free(gpio_index);
+	pr_warn("-----------------------------------------------\n");
+
+	pr_warn("step1: Pinctrl request gpio.\n");
+	req_status = pinctrl_gpio_request(gpio_index);
+	if (req_status != 0) {
+		pr_warn("pinctrl request gpio failed !return value %d\n", req_status);
+		return -EINVAL;
+	}
+
+	pr_warn("step2: Set gpio direction input.\n");
+	direct_status = pinctrl_gpio_direction_input(gpio_index);
+	if (direct_status) {
+		pr_warn("set pinctrl gpio direction input failed! return value: %d\n",
+			direct_status);
+		return -EINVAL;
+	}
+
+	pr_warn("step3: Pinctrl free gpio.\n");
+	pinctrl_gpio_free(gpio_index);
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test gpio direction input success!\n");
+	pr_warn("+++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int pctrltest_direction_output(void)
+{
+	int gpio_index;
+	char pin_name[SUNXI_PIN_NAME_MAX_LEN];
+	int req_status;
+	int direct_status;
+
+	gpio_index = sunxi_ptest_data->gpio_index;
+	sunxi_gpio_to_name(sunxi_ptest_data->gpio_index, pin_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("gpio name is : %s	gpio index is : %d\n", pin_name, gpio_index);
+	pr_warn("-----------------------------------------------\n");
+	pinctrl_gpio_free(gpio_index);
+
+	pr_warn("step1: Pinctrl request gpio.\n");
+	req_status = pinctrl_gpio_request(gpio_index);
+	if (req_status != 0) {
+		pr_warn("pinctrl request gpio failed !return value %d\n", req_status);
+		return -EINVAL;
+	}
+
+	pr_warn("step2: Set gpio direction output.\n");
+	direct_status = pinctrl_gpio_direction_output(gpio_index);
+	if (direct_status) {
+		pr_warn("set pinctrl gpio direction output failed! return value: %d\n",
+			direct_status);
+		return -EINVAL;
+	}
+
+	pr_warn("step3: Pinctrl free gpio.\n");
+	pinctrl_gpio_free(gpio_index);
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test gpio direction output success!\n");
+	pr_warn("+++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static irqreturn_t pinctrl_isr_1(int irq, void *dev_id)
+{
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("%s(): interrupt occured\n", __func__);
+	pr_warn("-----------------------------------------------\n");
+	disable_irq_nosync(irq);
+	complete(&sunxi_ptest_data->irq_done);
+	return IRQ_HANDLED;
+}
+
+static irqreturn_t pinctrl_isr_2(int irq, void *dev_id)
+{
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("%s(): interrupt occured\n", __func__);
+	pr_warn("-----------------------------------------------\n");
+	disable_irq_nosync(irq);
+	return IRQ_HANDLED;
+}
+
+static int pctrltest_request_irq(void)
+{
+	int ret;
+	int virq = sunxi_ptest_data->irq;
+	int trigger = IRQF_TRIGGER_HIGH;
+
+	reinit_completion(&sunxi_ptest_data->irq_done);
+
+	pr_warn("step1: request irq(%s level) for irq:%d.\n",
+			trigger == IRQF_TRIGGER_HIGH ? "high" : "low", virq);
+	ret = request_irq(virq, pinctrl_isr_1,
+					trigger, "PIN_EINT", NULL);
+	if (ret) {
+		pr_warn("request irq failed !\n");
+		return -EINVAL;
+	}
+
+	pr_warn("step2: wait for irq.\n");
+	/* wait_for_completion_timeout() return: 0 if timed out, positive if completed. */
+	ret = wait_for_completion_timeout(&sunxi_ptest_data->irq_done, HZ);
+	if (ret == 0) {
+		pr_warn("wait for irq timeout!\n");
+		free_irq(virq, NULL);
+		return -EINVAL;
+	}
+
+	free_irq(virq, NULL);
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pin eint success !\n");
+	pr_warn("+++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n\n");
+
+	return 0;
+}
+
+static int pctrltest_request_eint(void)
+{
+	int ret;
+	int virq;
+	int gpio_index;
+	char pin_name[SUNXI_PIN_NAME_MAX_LEN];
+	int trigger;
+
+	gpio_index = sunxi_ptest_data->gpio_index;
+	sunxi_gpio_to_name(gpio_index, pin_name);
+	reinit_completion(&sunxi_ptest_data->irq_done);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("gpio name is : %s	gpio index is : %d\n", pin_name, gpio_index);
+	pr_warn("-----------------------------------------------\n");
+
+	pr_warn("step1: request gpio [%s].\n", pin_name);
+	ret = gpio_request(gpio_index, NULL);
+	if (ret != 0) {
+		pr_warn("gpio request failed\n");
+		return -EINVAL;
+	}
+
+	gpio_direction_input(gpio_index);
+	trigger = gpio_get_value_cansleep(gpio_index);
+	pr_warn("step2: get gpio[%s] trigger level:0x%x\n", pin_name, trigger);
+	trigger = trigger ? IRQF_TRIGGER_HIGH : IRQF_TRIGGER_LOW;
+	gpio_free(gpio_index);
+
+	pr_warn("step3: generate virtual irq number.\n");
+	virq = gpio_to_irq(gpio_index);
+	if (virq < 0) {
+		pr_warn("map gpio [%d] to virq [%d] failed !\n ", gpio_index, virq);
+		return -EINVAL;
+	}
+
+	pr_warn("step4: request irq(%s level) for irq:%d.\n",
+			trigger == IRQF_TRIGGER_HIGH ? "high" : "low", virq);
+	ret = request_irq(virq, pinctrl_isr_1,
+					trigger, "PIN_EINT", NULL);
+	if (ret) {
+		pr_warn("request irq failed !\n");
+		return -EINVAL;
+	}
+
+	pr_warn("step5: wait for irq.\n");
+	ret = wait_for_completion_timeout(&sunxi_ptest_data->irq_done, HZ);
+	if (ret == 0) {
+		pr_warn("wait for irq timeout!\n");
+		free_irq(virq, NULL);
+		return -EINVAL;
+	}
+
+	free_irq(virq, NULL);
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test pin eint success !\n");
+	pr_warn("+++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n\n");
+
+	return 0;
+}
+
+static int pctrltest_re_request_eint(void)
+{
+	int ret;
+	int virq;
+	int gpio_index;
+	char pin_name[SUNXI_PIN_NAME_MAX_LEN];
+	int trigger;
+
+	gpio_index = sunxi_ptest_data->gpio_index;
+	sunxi_gpio_to_name(gpio_index, pin_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("gpio name is : %s	gpio index is : %d\n", pin_name, gpio_index);
+	pr_warn("-----------------------------------------------\n");
+
+	pr_warn("step1: request gpio [%s].\n", pin_name);
+	ret = gpio_request(gpio_index, NULL);
+	if (ret != 0) {
+		pr_warn("gpio request failed\n");
+		return -EINVAL;
+	}
+
+	gpio_direction_input(gpio_index);
+	trigger = gpio_get_value_cansleep(gpio_index);
+	pr_warn("step2: get gpio[%s] trigger level:0x%x\n", pin_name, trigger);
+	trigger = trigger ? IRQF_TRIGGER_HIGH : IRQF_TRIGGER_LOW;
+	gpio_free(gpio_index);
+
+	pr_warn("step3: generate virtual irq number.\n");
+	virq = gpio_to_irq(gpio_index);
+	if (virq < 0) {
+		pr_warn("map gpio [%d] to virq [%d] failed !\n ", gpio_index, virq);
+		return -EINVAL;
+	}
+
+	pr_warn("step4: first time request irq(%s level trigger).\n",
+			trigger == IRQF_TRIGGER_HIGH ? "high" : "low");
+
+	ret = request_irq(virq, pinctrl_isr_1,
+				    trigger, "PIN_EINT", NULL);
+	if (ret) {
+		free_irq(virq, NULL);
+		pr_warn("test pin request irq failed !\n");
+		return -EINVAL;
+	}
+
+	pr_warn("step5: double request irq(%s level trigger).\n",
+			trigger == IRQF_TRIGGER_HIGH ? "high" : "low");
+	ret = request_irq(virq, pinctrl_isr_2,
+					trigger, "PIN_EINT", NULL);
+	free_irq(virq, NULL);
+	if (!ret) {
+		pr_warn("test failed! for double request is umpermitted.\n");
+		return -EINVAL;
+	}
+	pr_warn("test success! for double request is umpermitted.\n");
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test double request eint success!\n");
+	pr_warn("+++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int gpiotest_request_free(void)
+{
+	int gpio_index;
+	int req_status;
+	char pin_name[SUNXI_PIN_NAME_MAX_LEN];
+
+	gpio_index = sunxi_ptest_data->gpio_index;
+	sunxi_gpio_to_name(gpio_index, pin_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("gpio name is : %s	gpio index is : %d\n", pin_name, gpio_index);
+	pr_warn("-----------------------------------------------\n");
+
+	pr_warn("step1: request gpio[%s]\n", pin_name);
+	gpio_free(gpio_index);
+	req_status = gpio_request(gpio_index, NULL);
+	if (req_status != 0) {
+		pr_warn("gpio request failed !return value %d\n", req_status);
+		return -EINVAL;
+	}
+	pr_warn("       request gpio[%s] success\n", pin_name);
+
+	pr_warn("step2: free gpio[%s]\n", pin_name);
+	gpio_free(gpio_index);
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test gpio request and free success!\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int gpiotest_re_request_free(void)
+{
+	int gpio_index;
+	int req_status;
+	char pin_name[SUNXI_PIN_NAME_MAX_LEN];
+
+	gpio_index = sunxi_ptest_data->gpio_index;
+	sunxi_gpio_to_name(sunxi_ptest_data->gpio_index, pin_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("gpio name is : %s	gpio index is : %d\n", pin_name, gpio_index);
+	pr_warn("-----------------------------------------------\n");
+
+	pr_warn("step1: first time request gpio[%s]\n", pin_name);
+	req_status = gpio_request(gpio_index, NULL);
+	if (req_status != 0) {
+		pr_warn("      first time request gpio [%s]failed !\n", pin_name);
+		return -EINVAL;
+	}
+	pr_warn("       first time request gpio[%s] success!\n", pin_name);
+
+	pr_warn("step2: repeat request gpio[%s]\n", pin_name);
+	req_status = gpio_request(gpio_index, NULL);
+	if (!req_status) {
+		pr_warn("test failed: for repeat request is unpermitted.\n");
+		return -EINVAL;
+	}
+
+	pr_warn("test success: for repeat request is unpermitted.\n");
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test gpio repeat request and free success!\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	gpio_free(gpio_index);
+	return 0;
+}
+
+static int gpiotest_set_debounce(void)
+{
+	int gpio_index;
+	int req_status;
+	__maybe_unused int get_status;
+	char pin_name[SUNXI_PIN_NAME_MAX_LEN];
+
+	gpio_index = sunxi_ptest_data->gpio_index;
+	sunxi_gpio_to_name(gpio_index, pin_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("gpio name is : %s	gpio index is : %d\n", pin_name, gpio_index);
+	pr_warn("-----------------------------------------------\n");
+
+	/*
+	 * test gpio set debounce api
+	 */
+	pr_warn("step1: request gpio.\n");
+	req_status = gpio_request(gpio_index, NULL);
+	if (req_status != 0) {
+		pr_warn("gpio request failed !\n");
+		return -EINVAL;
+	}
+#if 0  /* Linux-5.4 removed 'set_debounce' from 'struct gpio_chip' */
+	pr_warn("step2: set gpio debounce value 0x11.\n");
+	get_status = gpio_set_debounce(gpio_index, 0x11);
+	if (get_status) {
+		pr_warn("      gpio set debounce failed! return value: %d\n", get_status);
+		gpio_free(gpio_index);
+		return -EINVAL;
+	}
+#endif
+	pr_warn("step3: gpio free.\n");
+	gpio_free(gpio_index);
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test gpio set debounce success!\n");
+	pr_warn("++++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+}
+
+static int gpiotest_gpiolib(void)
+{
+	int gpio_index;
+	char pin_name[SUNXI_PIN_NAME_MAX_LEN];
+	int req_status;
+	int set_direct_status;
+	__maybe_unused unsigned long config;
+	int val;
+
+	gpio_index = sunxi_ptest_data->gpio_index;
+	sunxi_gpio_to_name(gpio_index, pin_name);
+
+	pr_warn("++++++++++++++++++++++++++++%s++++++++++++++++++++++++++++\n", __func__);
+	pr_warn("gpio name is : %s	gpio index is : %d\n", pin_name, gpio_index);
+	pr_warn("-----------------------------------------------\n");
+
+	//test gpio set direction input api
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("1. test gpio direction input api:\n");
+	pr_warn("step1: request gpio.\n");
+	req_status = gpio_request(gpio_index, NULL);
+	if (req_status != 0) {
+		pr_warn("gpio request failed !\n");
+		return -EINVAL;
+	}
+
+	pr_warn("step2: set gpio direction input.\n");
+	set_direct_status = gpio_direction_input(gpio_index);
+	if (set_direct_status) {
+		pr_warn("set gpio direction input failed!\n");
+		goto test_gpiolib_api_failed;
+	}
+#if SUPPORT_PIN_CONFIG_API
+	pr_warn("step3: get gpio mux value and check.\n");
+	config = SUNXI_PINCFG_PACK(SUNXI_PINCFG_TYPE_FUNC, 0xFFFFFF);
+	pin_config_get(SUNXI_PINCTRL, pin_name, &config);
+	if (SUNXI_PINCFG_UNPACK_VALUE(config) != 0) {
+		pr_warn("test gpio set direction input failed !\n");
+		goto test_gpiolib_api_failed;
+	}
+#endif
+	gpio_free(gpio_index);
+	pr_warn("step4: gpio free.\n");
+	pr_warn("finish API(gpio_direction_input)testing.\n");
+	pr_warn("-----------------------------------------------\n\n");
+
+	//test gpio set direction output api
+	pr_warn("2. test gpio direction output api:\n");
+	pr_warn("step1: request gpio.\n");
+	req_status = gpio_request(gpio_index, NULL);
+	if (req_status != 0) {
+		pr_warn("gpio request failed!\n");
+		return -EINVAL;
+	}
+
+	pr_warn("step2: set gpio direction output(data value 1).\n");
+	set_direct_status = gpio_direction_output(gpio_index, 1);
+	if (set_direct_status) {
+		pr_warn("set gpio direction output failed!\n");
+		goto test_gpiolib_api_failed;
+	}
+#if SUPPORT_PIN_CONFIG_API
+	pr_warn("step3: get gpio mux value and check.\n");
+	config = SUNXI_PINCFG_PACK(SUNXI_PINCFG_TYPE_FUNC, 0xFFFFFF);
+	pin_config_get(SUNXI_PINCTRL, pin_name, &config);
+	if (SUNXI_PINCFG_UNPACK_VALUE(config) != 1) {
+		pr_warn("faile!FUNC value not the same as expectation.\n");
+		goto test_gpiolib_api_failed;
+	}
+
+	pr_warn("step4: get gpio data value and check.\n");
+	config = SUNXI_PINCFG_PACK(SUNXI_PINCFG_TYPE_DAT, 0xFFFFFF);
+	pin_config_get(SUNXI_PINCTRL, pin_name, &config);
+	if (SUNXI_PINCFG_UNPACK_VALUE(config) != 1) {
+		pr_warn("failed!DATA value not the same as expectation(1).\n");
+		goto test_gpiolib_api_failed;
+	}
+#endif
+	pr_warn("step5: set gpio direction output(data value 0).\n");
+	set_direct_status = gpio_direction_output(gpio_index, 0);
+	if (set_direct_status) {
+		pr_warn("set gpio direction output failed!\n");
+		goto test_gpiolib_api_failed;
+	}
+#if SUPPORT_PIN_CONFIG_API
+	pr_warn("step6: get gpio data value and check.\n");
+	config = SUNXI_PINCFG_PACK(SUNXI_PINCFG_TYPE_DAT, 0xFFFFFF);
+	pin_config_get(SUNXI_PINCTRL, pin_name, &config);
+	if (SUNXI_PINCFG_UNPACK_VALUE(config) != 0) {
+		pr_warn("failed!DATA value not the same as expectation(0).\n");
+		goto test_gpiolib_api_failed;
+	}
+#endif
+	gpio_free(gpio_index);
+	pr_warn("step7: gpio free.\n");
+	pr_warn("finish API(gpio_direction_output)testing.\n");
+	pr_warn("-----------------------------------------------\n\n");
+
+	//test gpio get value api
+	pr_warn("3. test gpio get value api:\n");
+	pr_warn("step1: request gpio.\n");
+	req_status = gpio_request(gpio_index, NULL);
+	if (req_status != 0) {
+		pr_warn("gpio request failed!\n");
+		return -EINVAL;
+	}
+
+	pr_warn("step2: set gpio direction output(data value 0).\n");
+	set_direct_status = gpio_direction_output(gpio_index, 0);
+	if (set_direct_status) {
+		pr_warn("set gpio direction output failed !\n");
+		goto test_gpiolib_api_failed;
+	}
+	pr_warn("step3: get gpio data value and check.\n");
+	val = __gpio_get_value(gpio_index);
+	pr_warn("       gpio data value :    %d\n", val);
+	if (val != 0) {
+		pr_warn("failed!DATA value not the same as expectation.\n");
+		goto test_gpiolib_api_failed;
+	}
+
+	gpio_free(gpio_index);
+	pr_warn("step4: gpio free.\n");
+	pr_warn("finish API(gpio_get_value)testing.\n");
+	pr_warn("-----------------------------------------------\n\n");
+
+	//test gpio set value api
+	pr_warn("4. test gpio set value api:\n");
+	pr_warn("step1: request gpio.\n");
+	req_status = gpio_request(gpio_index, NULL);
+	if (req_status != 0) {
+		pr_warn("gpio request failed!\n");
+		return -EINVAL;
+	}
+
+	pr_warn("step2: set gpio direction output(set data value 0).\n");
+	set_direct_status = gpio_direction_output(gpio_index, 0);
+	if (set_direct_status) {
+		pr_warn("set gpio direction output failed\n");
+		goto test_gpiolib_api_failed;
+	}
+
+	pr_warn("step3: get gpio data value,then set 1 and check.\n");
+	val = __gpio_get_value(gpio_index);
+	pr_warn("       get gpio data value :    %d\n", val);
+	__gpio_set_value(gpio_index, 1);
+	pr_warn("       set gpio data value :    1\n");
+	val = __gpio_get_value(gpio_index);
+	pr_warn("       get gpio data value :    %d\n", val);
+	if (val != 1) {
+		pr_warn("test gpio set dat value 1 failed !\n");
+		goto test_gpiolib_api_failed;
+	}
+
+	pr_warn("step4: get gpio data value,then set 0 and check.\n");
+	val = __gpio_get_value(gpio_index);
+	pr_warn("       get gpio data value :    %d\n", val);
+	__gpio_set_value(gpio_index, 0);
+	pr_warn("       set gpio data value :    0\n");
+	val = __gpio_get_value(gpio_index);
+	pr_warn("       get gpio data value :    %d\n", val);
+	if (val != 0) {
+		pr_warn("test gpio set dat value 0 failed!\n");
+		goto test_gpiolib_api_failed;
+	}
+
+	gpio_free(gpio_index);
+	pr_warn("step5: gpio free.\n");
+	pr_warn("finish API(gpio_set_value)testing.\n");
+
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test gpio gpiolib success!\n");
+	pr_warn("+++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	return 0;
+
+test_gpiolib_api_failed:
+	pr_warn("-----------------------------------------------\n");
+	pr_warn("test gpio gpiolib failed!\n");
+	pr_warn("+++++++++++++++++++++++++++end++++++++++++++++++++++++++++\n\n");
+	gpio_free(gpio_index);
+	return -EINVAL;
+}
+
+static struct pinctrl_case case_table[] = {
+
+	{"pctrltest_request_all_resource",    pctrltest_request_all_resource},
+	{"pctrltest_re_request_all_resource", pctrltest_re_request_all_resource},
+	{"pctrltest_request_gpio",	pctrltest_request_gpio},
+	{"pctrltest_free_gpio",		pctrltest_free_gpio},
+	{"pctrltest_lookup_state",	pctrltest_lookup_state},
+	{"pctrltest_select_state",	pctrltest_select_state},
+	{"pctrltest_select_sleep_state", pctrltest_select_sleep_state},
+	{"pctrltest_get",		pctrltest_get},
+	{"pctrltest_put",		pctrltest_put},
+	{"pctrltest_devm_get_and_put",	pctrltest_devm_get_and_put},
+	{"pctrltest_function_set",	pctrltest_function_set},
+	{"pctrltest_data_set",		pctrltest_data_set},
+	{"pctrltest_pull_set",		pctrltest_pull_set},
+	{"pctrltest_dlevel_set",	pctrltest_dlevel_set},
+	{"pctrltest_direction_input",	pctrltest_direction_input},
+	{"pctrltest_direction_output",	pctrltest_direction_output},
+	{"pctrltest_request_irq",	pctrltest_request_irq},
+	{"pctrltest_request_eint",	pctrltest_request_eint},
+	{"pctrltest_re_request_eint",	pctrltest_re_request_eint},
+	{"gpiotest_request_free",	gpiotest_request_free},
+	{"gpiotest_re_request_free",	gpiotest_re_request_free},
+	{"gpiotest_set_debounce",	gpiotest_set_debounce},
+	{"gpiotest_gpiolib",		gpiotest_gpiolib},
+};
+
+/*
+ * str_to_num - Convert a string to a number
+ * @str:  the string to parse
+ * @number: the result
+ * @size: the length of @str
+ * Return @size on success, otherwise -EINVAL.
+ */
+static int str_to_num(const char *str, int *number, size_t size)
+{
+	char *endp;
+	size_t parsed_count;
+	unsigned long num;
+
+	num = simple_strtoul(str, &endp, 10);
+	parsed_count = endp - str;
+
+	if (isspace(*endp))
+		parsed_count++;
+
+	if (parsed_count == size) {
+		*number = (int)num;
+		return size;
+	}
+
+	return -EINVAL;
+}
+
+/* get the case index from case_table[].name */
+static int get_exec_number(void)
+{
+	int i;
+	struct pinctrl_case *pcase = &case_table[0];
+
+	for (i = 0; i < ARRAY_SIZE(case_table); i++, pcase++) {
+		if (strcmp(pcase->name, sunxi_ptest_data->exec) == 0)
+			return i;
+	}
+
+	return -1;
+}
+
+static ssize_t data_show(struct class *class, struct class_attribute *attr,
+		char *buf)
+{
+	return sprintf(buf, "%d\n", sunxi_ptest_data->data);
+}
+static ssize_t data_store(struct class *class, struct class_attribute *attr,
+		const char *buf, size_t count)
+{
+	return str_to_num(buf, &sunxi_ptest_data->data, count);
+}
+
+static ssize_t dlevel_show(struct class *class, struct class_attribute *attr,
+		char *buf)
+{
+	return sprintf(buf, "%d\n", sunxi_ptest_data->dlevel);
+}
+static ssize_t dlevel_store(struct class *class, struct class_attribute *attr,
+		const char *buf, size_t count)
+{
+	return str_to_num(buf, &sunxi_ptest_data->dlevel, count);
+}
+
+static ssize_t funcs_show(struct class *class, struct class_attribute *attr,
+		char *buf)
+{
+	return sprintf(buf, "%d\n", sunxi_ptest_data->funcs);
+}
+static ssize_t funcs_store(struct class *class, struct class_attribute *attr,
+		const char *buf, size_t count)
+{
+	return str_to_num(buf, &sunxi_ptest_data->funcs, count);
+}
+
+static ssize_t pull_show(struct class *class, struct class_attribute *attr,
+		char *buf)
+{
+	return sprintf(buf, "%d\n", sunxi_ptest_data->pull);
+}
+static ssize_t pull_store(struct class *class, struct class_attribute *attr,
+		const char *buf, size_t count)
+{
+	return str_to_num(buf, &sunxi_ptest_data->pull, count);
+}
+
+/* Show gpio name according to gpio_index, for example: PA0 */
+static ssize_t gpio_index_show(struct class *class, struct class_attribute *attr,
+		char *buf)
+{
+	char pin_name[SUNXI_PIN_NAME_MAX_LEN];
+	/* Convert gpio_index to pin_name. For example: 0-->"PA0", 32-->"PB0" */
+	sunxi_gpio_to_name(sunxi_ptest_data->gpio_index, pin_name);
+	return sprintf(buf, "%s\n", pin_name);
+}
+/* Parse user input (for example: "0"), get gpio_index */
+static ssize_t gpio_index_store(struct class *class, struct class_attribute *attr,
+		const char *buf, size_t count)
+{
+	return str_to_num(buf, &sunxi_ptest_data->gpio_index, count);
+}
+
+/* Show all the supported cases */
+static ssize_t exec_show(struct class *class, struct class_attribute *attr,
+		char *buf)
+{
+	int i;
+	int total_len = 0;
+	struct pinctrl_case *pcase = &case_table[0];
+
+	for (i = 0; i < ARRAY_SIZE(case_table); i++, pcase++) {
+		total_len += snprintf(buf + total_len, SUNXI_FUNC_NAME_MAX_LEN,
+				      "%s\n", pcase->name);
+		if (total_len > PAGE_SIZE - SUNXI_FUNC_NAME_MAX_LEN) {
+			pr_warn("Too many items to show\n");
+			return -EINVAL;
+		}
+	}
+
+	return total_len;
+}
+/* Parse user cmd, and execute the specified case */
+static ssize_t exec_store(struct class *class, struct class_attribute *attr,
+		const char *buf, size_t len)
+{
+	int ret;
+	int number;
+
+	if (len > SUNXI_FUNC_NAME_MAX_LEN) {
+		pr_err("func name is too long\n");
+		return -EINVAL;
+	}
+	ret = strlcpy(sunxi_ptest_data->exec, buf, len);
+	number = get_exec_number();
+	if (number < 0) {
+		pr_err("can't find exec number.\n");
+		return -EINVAL;
+	}
+
+	sunxi_ptest_data->result = case_table[number].func();
+
+	return ret;
+}
+
+/* Show case running result */
+static ssize_t result_show(struct class *class, struct class_attribute *attr,
+		char *buf)
+{
+	return sprintf(buf, "%d\n", sunxi_ptest_data->result);
+}
+
+static struct class_attribute sunxi_pctrltest_attrs[] = {
+	__ATTR(data,       S_IRUGO | S_IWUSR, data_show,   data_store),
+	__ATTR(dlevel,     S_IRUGO | S_IWUSR, dlevel_show, dlevel_store),
+	__ATTR(funcs,      S_IRUGO | S_IWUSR, funcs_show,  funcs_store),
+	__ATTR(pull,       S_IRUGO | S_IWUSR, pull_show,   pull_store),
+	__ATTR(gpio_index, S_IRUGO | S_IWUSR, gpio_index_show, gpio_index_store),
+	__ATTR(exec,       S_IRUGO | S_IWUSR, exec_show,   exec_store),
+	__ATTR(result,     S_IRUGO,           result_show, NULL),
+};
+
+static struct class sunxi_pctrltest_class = {
+	.name  = "sunxi_pinctrl_test",
+	.owner = THIS_MODULE,
+};
+
+static int sunxi_pctrltest_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	enum of_gpio_flags config, config_suspend;
+	int gpio, irq;
+	int err;
+	int i;
+	int suspend_gpio, gpio_irq;
+
+	if (!np) {
+		pr_err("Fail to get of_node\n");
+		return -ENODEV;
+	}
+
+	gpio = of_get_named_gpio_flags(np, "test-gpios", 0, &config);
+	if (!gpio_is_valid(gpio)) {
+		pr_err("Fail to get dts property 'test-gpios'. err=%d\n", gpio);
+		return -ENODEV;
+	}
+
+	suspend_gpio = of_get_named_gpio_flags(np, "suspend-gpios", 0, &config_suspend);
+	if (!gpio_is_valid(suspend_gpio)) {
+		pr_err("Fail to get dts property 'suspend-gpios'. err=%d\n", gpio);
+	}
+
+	sunxi_ptest_data = devm_kzalloc(&pdev->dev, sizeof(*sunxi_ptest_data),
+					GFP_KERNEL);
+	if (!sunxi_ptest_data)
+		return -ENOMEM;
+
+	irq = platform_get_irq(pdev, 0);
+	if (irq < 0) {
+		pr_err("Get irq error!\n");
+		return -EBUSY;
+	}
+
+	if (gpio_is_valid(suspend_gpio)) {
+		gpio_irq = gpio_to_irq(suspend_gpio);
+		if (IS_ERR_VALUE((unsigned long)gpio_irq)) {
+			pr_warn("map gpio [%d] to virq [%d] failed !\n ", gpio, gpio_irq);
+			return -EINVAL;
+		}
+
+		err = request_irq(gpio_irq, sunxi_pinctrl_irq_handler_demo3,
+				IRQF_TRIGGER_FALLING | IRQF_TRIGGER_RISING, "PIN_EINT", NULL);
+		if (IS_ERR_VALUE((unsigned long)err)) {
+			pr_warn("request irq failed !\n");
+			return -EINVAL;
+		}
+	}
+	if (of_property_read_bool(pdev->dev.of_node, "wakeup-source")) {
+		device_init_wakeup(&pdev->dev, true);
+		dev_pm_set_wake_irq(&pdev->dev, gpio_irq);
+	}
+
+	err = class_register(&sunxi_pctrltest_class);
+	if (err < 0) {
+		pr_err("register sunxi pinctrl test class failed. err=%d\n", err);
+		return -EBUSY;
+	}
+
+	/* need some class specific sysfs attributes */
+	for (i = 0; i < ARRAY_SIZE(sunxi_pctrltest_attrs); i++) {
+		err = class_create_file(&sunxi_pctrltest_class, &sunxi_pctrltest_attrs[i]);
+		if (err) {
+			pr_err("%s(): class_create_file() failed. err=%d\n", __func__, err);
+			while (i--) {
+				class_remove_file(&sunxi_pctrltest_class, &sunxi_pctrltest_attrs[i]);
+			}
+			class_unregister(&sunxi_pctrltest_class);
+			return err;
+		}
+	}
+
+	pdev->dev.class = &sunxi_pctrltest_class;
+	dev_set_name(&pdev->dev, "pinctrl-test");
+	platform_set_drvdata(pdev, sunxi_ptest_data);
+
+	/* Set default parameters */
+	strlcpy(sunxi_ptest_data->dev_name, "pinctrl-test", SUNXI_DEV_NAME_MAX_LEN);
+
+	sunxi_ptest_data->result = -1;
+	sunxi_ptest_data->gpio_index = gpio;
+	sunxi_ptest_data->irq = irq;
+	init_completion(&sunxi_ptest_data->irq_done);
+
+	pr_info("%s(): gpio=%d, config=%d, irq=%d\n", __func__, gpio, (int)config, irq);
+	return 0;
+}
+
+static int sunxi_pctrltest_remove(struct platform_device *pdev)
+{
+	platform_set_drvdata(pdev, NULL);
+	pdev->dev.class = NULL;
+	class_unregister(&sunxi_pctrltest_class);
+	return 0;
+}
+
+static const struct of_device_id sunxi_pctrltest_match[] = {
+	{ .compatible = "allwinner,sunxi-pinctrl-test"},
+	{}
+};
+
+static struct platform_driver sunxi_pctrltest_driver = {
+	.probe = sunxi_pctrltest_probe,
+	.remove	= sunxi_pctrltest_remove,
+	.driver = {
+		.name = "pinctrl-test",
+		.owner = THIS_MODULE,
+		.of_match_table = sunxi_pctrltest_match,
+	},
+};
+
+static int __init sunxi_pctrltest_init(void)
+{
+	int ret;
+	ret = platform_driver_register(&sunxi_pctrltest_driver);
+	if (ret) {
+		pr_warn("register sunxi pinctrl platform driver failed\n");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static void __exit sunxi_pctrltest_exit(void)
+{
+	platform_driver_unregister(&sunxi_pctrltest_driver);
+}
+
+module_init(sunxi_pctrltest_init);
+module_exit(sunxi_pctrltest_exit);
+
+MODULE_AUTHOR("Wim Hwang<huangwei@allwinnertech.com");
+MODULE_AUTHOR("Huangshr<huangshr@allwinnertech.com");
+MODULE_DESCRIPTION("Allwinner SUNXI Pinctrl driver test");
+MODULE_VERSION("1.0.1");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/pinctrl/sunxi/pinctrl-sunxi.c b/drivers/pinctrl/sunxi/pinctrl-sunxi.c
index 0cbca30b7..ad2d9e7b6 100644
--- a/drivers/pinctrl/sunxi/pinctrl-sunxi.c
+++ b/drivers/pinctrl/sunxi/pinctrl-sunxi.c
@@ -13,9 +13,11 @@
 #include <linux/io.h>
 #include <linux/clk.h>
 #include <linux/gpio/driver.h>
+#include <linux/interrupt.h>
 #include <linux/irqdomain.h>
 #include <linux/irqchip/chained_irq.h>
 #include <linux/export.h>
+#include <linux/module.h>
 #include <linux/of.h>
 #include <linux/of_clk.h>
 #include <linux/of_address.h>
@@ -24,17 +26,40 @@
 #include <linux/pinctrl/consumer.h>
 #include <linux/pinctrl/machine.h>
 #include <linux/pinctrl/pinctrl.h>
-#include <linux/pinctrl/pinconf-generic.h>
 #include <linux/pinctrl/pinmux.h>
 #include <linux/regulator/consumer.h>
 #include <linux/platform_device.h>
 #include <linux/slab.h>
+#include <soc/allwinner/sunxi_sip.h>
+#ifdef CONFIG_RISCV
+#include <asm/sbi.h>
+#endif
 
 #include <dt-bindings/pinctrl/sun4i-a10.h>
 
 #include "../core.h"
 #include "pinctrl-sunxi.h"
 
+/* Indexed by `enum sunxi_pinctrl_hw_type` */
+struct sunxi_pinctrl_hw_info sunxi_pinctrl_hw_info[SUNXI_PCTL_HW_TYPE_CNT] = {
+	{
+		.bank_mem_size          = 0x24,
+		.pull_regs_offset       = 0x1c,
+		.dlevel_pins_per_reg    = 16,
+		.dlevel_pins_bits       = 2,
+		.dlevel_pins_mask       = 0x3,
+		.irq_mux_val         	= 0x6,
+	},
+	{
+		.bank_mem_size          = 0x30,
+		.pull_regs_offset       = 0x24,
+		.dlevel_pins_per_reg    = 8,
+		.dlevel_pins_bits       = 4,
+		.dlevel_pins_mask       = 0xF,
+		.irq_mux_val         	= 0xE,
+	},
+};
+
 static struct irq_chip sunxi_pinctrl_edge_irq_chip;
 static struct irq_chip sunxi_pinctrl_level_irq_chip;
 
@@ -165,6 +190,11 @@ static bool sunxi_pctrl_has_drive_prop(struct device_node *node)
 		of_find_property(node, "allwinner,drive", NULL);
 }
 
+static bool sunxi_pctrl_has_power_source_prop(struct device_node *node)
+{
+	return of_find_property(node, "power-source", NULL);
+}
+
 static int sunxi_pctrl_parse_bias_prop(struct device_node *node)
 {
 	u32 val;
@@ -238,6 +268,18 @@ static const char *sunxi_pctrl_parse_function_prop(struct device_node *node)
 	return NULL;
 }
 
+static int sunxi_pctrl_parse_power_source_prop(struct device_node *node)
+{
+	u32 val;
+
+	if (!of_property_read_u32(node, "power-source", &val)) {
+		if (val == 1800 || val == 3300)
+			return val;
+	}
+
+	return -EINVAL;
+}
+
 static const char *sunxi_pctrl_find_pins_prop(struct device_node *node,
 					      int *npins)
 {
@@ -271,6 +313,8 @@ static unsigned long *sunxi_pctrl_build_pin_config(struct device_node *node,
 		configlen++;
 	if (sunxi_pctrl_has_bias_prop(node))
 		configlen++;
+	if (sunxi_pctrl_has_power_source_prop(node))
+		configlen++;
 
 	/*
 	 * If we don't have any configuration, bail out
@@ -307,6 +351,16 @@ static unsigned long *sunxi_pctrl_build_pin_config(struct device_node *node,
 		pinconfig[idx++] = pinconf_to_config_packed(pull, arg);
 	}
 
+	if (sunxi_pctrl_has_power_source_prop(node)) {
+		int power = sunxi_pctrl_parse_power_source_prop(node);
+		if (power < 0) {
+			ret = power;
+			goto err_free;
+		}
+
+		pinconfig[idx++] = pinconf_to_config_packed(PIN_CONFIG_POWER_SOURCE,
+							    power);
+	}
 
 	*len = configlen;
 	return pinconfig;
@@ -443,24 +497,121 @@ static const struct pinctrl_ops sunxi_pctrl_ops = {
 	.get_group_pins		= sunxi_pctrl_get_group_pins,
 };
 
+static int sunxi_pinctrl_set_io_bias_cfg(struct sunxi_pinctrl *pctl,
+					 unsigned pin,
+					 struct regulator *supply)
+{
+	unsigned short bank = pin / PINS_PER_BANK;
+	unsigned long flags;
+	u32 val, reg;
+	int uV;
+
+	if (!pctl->desc->io_bias_cfg_variant)
+		return 0;
+
+	uV = regulator_get_voltage(supply);
+	if (uV < 0)
+		return uV;
+
+	/* Might be dummy regulator with no voltage set */
+	if (uV == 0)
+		return 0;
+
+	switch (pctl->desc->io_bias_cfg_variant) {
+	case BIAS_VOLTAGE_GRP_CONFIG:
+		/*
+		 * Configured value must be equal or greater to actual
+		 * voltage.
+		 */
+		if (uV <= 1800000)
+			val = 0x0; /* 1.8V */
+		else if (uV <= 2500000)
+			val = 0x6; /* 2.5V */
+		else if (uV <= 2800000)
+			val = 0x9; /* 2.8V */
+		else if (uV <= 3000000)
+			val = 0xA; /* 3.0V */
+		else
+			val = 0xD; /* 3.3V */
+
+		pin -= pctl->desc->pin_base;
+
+		reg = readl(pctl->membase + sunxi_grp_config_reg(pin));
+		reg &= ~IO_BIAS_MASK;
+		writel(reg | val, pctl->membase + sunxi_grp_config_reg(pin));
+		return 0;
+	case BIAS_VOLTAGE_PIO_POW_MODE_SEL:
+	case BIAS_VOLTAGE_PIO_POW_MODE_CTL:
+		val = uV <= 1800000 ? 1 : 0;
+
+		raw_spin_lock_irqsave(&pctl->lock, flags);
+		reg = readl(pctl->membase + PIO_POW_MOD_SEL_REG);
+		reg &= ~(1 << bank);
+		writel(reg | val << bank, pctl->membase + PIO_POW_MOD_SEL_REG);
+		raw_spin_unlock_irqrestore(&pctl->lock, flags);
+
+		if (pctl->desc->io_bias_cfg_variant ==
+		    BIAS_VOLTAGE_PIO_POW_MODE_SEL)
+			return 0;
+
+		val = (1800000 < uV && uV <= 2500000) ? 1 : 0;
+
+		raw_spin_lock_irqsave(&pctl->lock, flags);
+		reg = readl(pctl->membase + PIO_POW_MOD_CTL_REG);
+		reg &= ~BIT(bank);
+		writel(reg | val << bank, pctl->membase + PIO_POW_MOD_CTL_REG);
+		raw_spin_unlock_irqrestore(&pctl->lock, flags);
+		return 0;
+	default:
+		return -EINVAL;
+	}
+}
+
 static int sunxi_pconf_reg(unsigned pin, enum pin_config_param param,
-			   u32 *offset, u32 *shift, u32 *mask)
+			   u32 *offset, u32 *shift, u32 *mask,
+			   enum sunxi_pinctrl_hw_type hw_type)
 {
+	unsigned short bank = pin / PINS_PER_BANK;
+
 	switch (param) {
 	case PIN_CONFIG_DRIVE_STRENGTH:
-		*offset = sunxi_dlevel_reg(pin);
-		*shift = sunxi_dlevel_offset(pin);
-		*mask = DLEVEL_PINS_MASK;
+		*offset = sunxi_dlevel_reg(pin, hw_type);
+		*shift = sunxi_dlevel_offset(pin, hw_type);
+		*mask = sunxi_pinctrl_hw_info[hw_type].dlevel_pins_mask;
 		break;
 
 	case PIN_CONFIG_BIAS_PULL_UP:
 	case PIN_CONFIG_BIAS_PULL_DOWN:
 	case PIN_CONFIG_BIAS_DISABLE:
-		*offset = sunxi_pull_reg(pin);
+		*offset = sunxi_pull_reg(pin, hw_type);
 		*shift = sunxi_pull_offset(pin);
 		*mask = PULL_PINS_MASK;
 		break;
 
+	case PIN_CONFIG_POWER_SOURCE:
+		/* As SDIO pin, PF needs voltage switching function. */
+		if (bank != 5)
+			return -ENOTSUPP;
+
+		*offset = PIO_POW_CTL_REG;
+		*shift = 0;
+		*mask = POWER_SOURCE_MASK;
+		break;
+
+#if IS_ENABLED(CONFIG_PINCTRL_SUNXI_DEBUGFS)
+	case SUNXI_PINCFG_TYPE_DAT:
+		*offset = sunxi_data_reg(pin, hw_type);
+		*shift = sunxi_data_offset(pin);
+		*mask = DATA_PINS_MASK;
+		break;
+
+	case SUNXI_PINCFG_TYPE_FUNC:
+		*offset = sunxi_mux_reg(pin, hw_type);
+		*shift = sunxi_mux_offset(pin);
+		*mask = MUX_PINS_MASK;
+		break;
+#endif
+
 	default:
 		return -ENOTSUPP;
 	}
@@ -479,7 +630,7 @@ static int sunxi_pconf_get(struct pinctrl_dev *pctldev, unsigned pin,
 
 	pin -= pctl->desc->pin_base;
 
-	ret = sunxi_pconf_reg(pin, param, &offset, &shift, &mask);
+	ret = sunxi_pconf_reg(pin, param, &offset, &shift, &mask, pctl->desc->hw_type);
 	if (ret < 0)
 		return ret;
 
@@ -499,7 +650,7 @@ static int sunxi_pconf_get(struct pinctrl_dev *pctldev, unsigned pin,
 	case PIN_CONFIG_BIAS_PULL_DOWN:
 		if (val != SUN4I_PINCTRL_PULL_DOWN)
 			return -EINVAL;
-		arg = 1; /* hardware is weak pull-down */
+		arg = 2; /* hardware is weak pull-down */
 		break;
 
 	case PIN_CONFIG_BIAS_DISABLE:
@@ -508,6 +659,16 @@ static int sunxi_pconf_get(struct pinctrl_dev *pctldev, unsigned pin,
 		arg = 0;
 		break;
 
+	case PIN_CONFIG_POWER_SOURCE:
+		arg = val ? 3300 : 1800;
+		break;
+
+#if IS_ENABLED(CONFIG_PINCTRL_SUNXI_DEBUGFS)
+	case SUNXI_PINCFG_TYPE_DAT:
+	case SUNXI_PINCFG_TYPE_FUNC:
+		arg = val;
+		break;
+#endif
 	default:
 		/* sunxi_pconf_reg should catch anything unsupported */
 		WARN_ON(1);
@@ -534,6 +695,10 @@ static int sunxi_pconf_set(struct pinctrl_dev *pctldev, unsigned pin,
 			   unsigned long *configs, unsigned num_configs)
 {
 	struct sunxi_pinctrl *pctl = pinctrl_dev_get_drvdata(pctldev);
+	unsigned short bank = pin / PINS_PER_BANK;
+	unsigned short bank_offset = bank - pctl->desc->pin_base /
+					    PINS_PER_BANK;
+	struct sunxi_pinctrl_regulator *s_reg = &pctl->regulators[bank_offset];
 	int i;
 
 	for (i = 0; i < num_configs; i++) {
@@ -546,7 +711,7 @@ static int sunxi_pconf_set(struct pinctrl_dev *pctldev, unsigned pin,
 		param = pinconf_to_config_param(configs[i]);
 		arg = pinconf_to_config_argument(configs[i]);
 
-		ret = sunxi_pconf_reg(pin, param, &offset, &shift, &mask);
+		ret = sunxi_pconf_reg(pin, param, &offset, &shift, &mask, pctl->desc->hw_type);
 		if (ret < 0)
 			return ret;
 
@@ -576,6 +741,29 @@ static int sunxi_pconf_set(struct pinctrl_dev *pctldev, unsigned pin,
 				return -EINVAL;
 			val = 2;
 			break;
+		case PIN_CONFIG_POWER_SOURCE:
+			if (arg != 1800 && arg != 3300)
+				return -EINVAL;
+
+			/*
+			 * Only PF port as SDIO supports power source setting,
+			 * configure pio group withstand voltage mode for PF.
+			 */
+			sunxi_pinctrl_set_io_bias_cfg(pctl, pin,
+						      (arg == 1800) ?
+						      s_reg->regulator :
+						      s_reg->regulator_optional);
+
+			val = arg == 3300 ? 1 : 0;
+			break;
+#if IS_ENABLED(CONFIG_PINCTRL_SUNXI_DEBUGFS)
+		case SUNXI_PINCFG_TYPE_DAT:
+			val = arg;
+			break;
+		case SUNXI_PINCFG_TYPE_FUNC:
+			val = arg;
+			break;
+#endif
 		default:
 			/* sunxi_pconf_reg should catch anything unsupported */
 			WARN_ON(1);
@@ -610,62 +798,6 @@ static const struct pinconf_ops sunxi_pconf_ops = {
 	.pin_config_group_set	= sunxi_pconf_group_set,
 };
 
-static int sunxi_pinctrl_set_io_bias_cfg(struct sunxi_pinctrl *pctl,
-					 unsigned pin,
-					 struct regulator *supply)
-{
-	unsigned short bank = pin / PINS_PER_BANK;
-	unsigned long flags;
-	u32 val, reg;
-	int uV;
-
-	if (!pctl->desc->io_bias_cfg_variant)
-		return 0;
-
-	uV = regulator_get_voltage(supply);
-	if (uV < 0)
-		return uV;
-
-	/* Might be dummy regulator with no voltage set */
-	if (uV == 0)
-		return 0;
-
-	switch (pctl->desc->io_bias_cfg_variant) {
-	case BIAS_VOLTAGE_GRP_CONFIG:
-		/*
-		 * Configured value must be equal or greater to actual
-		 * voltage.
-		 */
-		if (uV <= 1800000)
-			val = 0x0; /* 1.8V */
-		else if (uV <= 2500000)
-			val = 0x6; /* 2.5V */
-		else if (uV <= 2800000)
-			val = 0x9; /* 2.8V */
-		else if (uV <= 3000000)
-			val = 0xA; /* 3.0V */
-		else
-			val = 0xD; /* 3.3V */
-
-		pin -= pctl->desc->pin_base;
-
-		reg = readl(pctl->membase + sunxi_grp_config_reg(pin));
-		reg &= ~IO_BIAS_MASK;
-		writel(reg | val, pctl->membase + sunxi_grp_config_reg(pin));
-		return 0;
-	case BIAS_VOLTAGE_PIO_POW_MODE_SEL:
-		val = uV <= 1800000 ? 1 : 0;
-
-		raw_spin_lock_irqsave(&pctl->lock, flags);
-		reg = readl(pctl->membase + PIO_POW_MOD_SEL_REG);
-		reg &= ~(1 << bank);
-		writel(reg | val << bank, pctl->membase + PIO_POW_MOD_SEL_REG);
-		raw_spin_unlock_irqrestore(&pctl->lock, flags);
-		return 0;
-	default:
-		return -EINVAL;
-	}
-}
 
 static int sunxi_pmx_get_funcs_cnt(struct pinctrl_dev *pctldev)
 {
@@ -706,10 +838,10 @@ static void sunxi_pmx_set(struct pinctrl_dev *pctldev,
 	raw_spin_lock_irqsave(&pctl->lock, flags);
 
 	pin -= pctl->desc->pin_base;
-	val = readl(pctl->membase + sunxi_mux_reg(pin));
+	val = readl(pctl->membase + sunxi_mux_reg(pin, pctl->desc->hw_type));
 	mask = MUX_PINS_MASK << sunxi_mux_offset(pin);
 	writel((val & ~mask) | config << sunxi_mux_offset(pin),
-		pctl->membase + sunxi_mux_reg(pin));
+		pctl->membase + sunxi_mux_reg(pin, pctl->desc->hw_type));
 
 	raw_spin_unlock_irqrestore(&pctl->lock, flags);
 }
@@ -766,38 +898,107 @@ static int sunxi_pmx_request(struct pinctrl_dev *pctldev, unsigned offset)
 					    PINS_PER_BANK;
 	struct sunxi_pinctrl_regulator *s_reg = &pctl->regulators[bank_offset];
 	struct regulator *reg = s_reg->regulator;
+	struct regulator *reg_op = s_reg->regulator_optional;
 	char supply[16];
 	int ret;
 
-	if (reg) {
+	if (refcount_read(&s_reg->refcount)) {
+		dev_dbg(pctl->dev, "bank P%c regulator has been opened\n",
+			'A' + bank);
 		refcount_inc(&s_reg->refcount);
 		return 0;
 	}
 
-	snprintf(supply, sizeof(supply), "vcc-p%c", 'a' + bank);
-	reg = regulator_get(pctl->dev, supply);
-	if (IS_ERR(reg)) {
-		dev_err(pctl->dev, "Couldn't get bank P%c regulator\n",
-			'A' + bank);
-		return PTR_ERR(reg);
+	/*
+	 * We should only call regulator_get when a bank is first requested -
+	 * If we call regulator_get here every time, the DPM list will be
+	 * corrupted. The calling chain:
+	 *
+	   device.suspend
+	   |
+	   V
+	   pinctrl_select_state(default)
+	   |
+	   V
+	   pinctrl_commit_state
+	   |
+	   V
+	   pinmux_enable_setting
+	   |
+	   V
+	   pin_request
+	   |
+	   V
+	   sunxi_pmx_request
+	   |
+	   V
+	   regulator_get
+	   |
+	   V
+	   device_link_add
+	   |
+	   V
+	   device_reorder_to_tail
+	   |
+	   V
+	   device_pm_move_last
+	   |
+	   V
+	   mv dev & child dev ->power.entry to dpm_list last
+	 */
+
+	if (IS_ERR_OR_NULL(reg)) {
+		snprintf(supply, sizeof(supply), "vcc-p%c", 'a' + bank);
+		reg = regulator_get(pctl->dev, supply);
+		if (IS_ERR_OR_NULL(reg)) {
+			dev_err(pctl->dev, "Couldn't get bank P%c regulator\n",
+				'A' + bank);
+			return PTR_ERR(reg);
+		}
+	}
+
+	if (pctl->desc->pf_power_source_switch && bank == 5 && IS_ERR_OR_NULL(reg_op)) {
+		reg_op = regulator_get(pctl->dev, "vcc-pfo");
+		if (IS_ERR_OR_NULL(reg_op)) {
+			dev_err(pctl->dev,
+				"Couldn't get bank PF optional regulator\n");
+			ret = PTR_ERR(reg_op);
+			goto out_reg;
+		}
 	}
 
 	ret = regulator_enable(reg);
 	if (ret) {
 		dev_err(pctl->dev,
 			"Couldn't enable bank P%c regulator\n", 'A' + bank);
-		goto out;
+		goto out_reg_op;
+	}
+
+	if (pctl->desc->pf_power_source_switch && bank == 5) {
+		ret = regulator_enable(reg_op);
+		if (ret) {
+			dev_err(pctl->dev,
+				"Couldn't enable bank PF optional regulator\n");
+			goto out_dis;
+		}
 	}
 
-	sunxi_pinctrl_set_io_bias_cfg(pctl, offset, reg);
+	/* Skip bank PF because we don't know which voltage to use now */
+	if (!(pctl->desc->pf_power_source_switch && bank == 5))
+		sunxi_pinctrl_set_io_bias_cfg(pctl, offset, reg);
 
 	s_reg->regulator = reg;
+	s_reg->regulator_optional = reg_op;
 	refcount_set(&s_reg->refcount, 1);
 
 	return 0;
 
-out:
-	regulator_put(s_reg->regulator);
+out_dis:
+	regulator_disable(reg);
+out_reg_op:
+	regulator_put(reg_op);
+out_reg:
+	regulator_put(reg);
 
 	return ret;
 }
@@ -813,9 +1014,9 @@ static int sunxi_pmx_free(struct pinctrl_dev *pctldev, unsigned offset)
 	if (!refcount_dec_and_test(&s_reg->refcount))
 		return 0;
 
+	if (s_reg->regulator_optional)
+		regulator_disable(s_reg->regulator_optional);
 	regulator_disable(s_reg->regulator);
-	regulator_put(s_reg->regulator);
-	s_reg->regulator = NULL;
 
 	return 0;
 }
@@ -840,7 +1041,7 @@ static int sunxi_pinctrl_gpio_direction_input(struct gpio_chip *chip,
 static int sunxi_pinctrl_gpio_get(struct gpio_chip *chip, unsigned offset)
 {
 	struct sunxi_pinctrl *pctl = gpiochip_get_data(chip);
-	u32 reg = sunxi_data_reg(offset);
+	u32 reg = sunxi_data_reg(offset, pctl->desc->hw_type);
 	u8 index = sunxi_data_offset(offset);
 	bool set_mux = pctl->desc->irq_read_needs_mux &&
 		gpiochip_line_is_irq(chip, offset);
@@ -853,7 +1054,7 @@ static int sunxi_pinctrl_gpio_get(struct gpio_chip *chip, unsigned offset)
 	val = (readl(pctl->membase + reg) >> index) & DATA_PINS_MASK;
 
 	if (set_mux)
-		sunxi_pmx_set(pctl->pctl_dev, pin, SUN4I_FUNC_IRQ);
+		sunxi_pmx_set(pctl->pctl_dev, pin, sunxi_pinctrl_hw_info[pctl->desc->hw_type].irq_mux_val);
 
 	return !!val;
 }
@@ -862,7 +1063,7 @@ static void sunxi_pinctrl_gpio_set(struct gpio_chip *chip,
 				unsigned offset, int value)
 {
 	struct sunxi_pinctrl *pctl = gpiochip_get_data(chip);
-	u32 reg = sunxi_data_reg(offset);
+	u32 reg = sunxi_data_reg(offset, pctl->desc->hw_type);
 	u8 index = sunxi_data_offset(offset);
 	unsigned long flags;
 	u32 regval;
@@ -1058,6 +1259,21 @@ static void sunxi_pinctrl_irq_ack_unmask(struct irq_data *d)
 	sunxi_pinctrl_irq_unmask(d);
 }
 
+static int sunxi_pinctrl_irq_set_wake(struct irq_data *d, unsigned int on)
+{
+	struct sunxi_pinctrl *pctl = irq_data_get_irq_chip_data(d);
+	unsigned long bank = d->hwirq / IRQ_PER_BANK;
+	struct irq_data *bank_irq_d = irq_get_irq_data(pctl->irq[bank]);
+#if IS_ENABLED(CONFIG_ARM) || IS_ENABLED(CONFIG_ARM64)
+	invoke_scp_fn_smc(on ? SET_WAKEUP_SRC : CLEAR_WAKEUP_SRC,
+			  SET_SEC_WAKEUP_SOURCE(bank_irq_d->hwirq, d->hwirq),
+			  0, 0);
+#elif IS_ENABLED(CONFIG_RISCV)
+	sbi_set_wakeup(bank_irq_d->hwirq, on);
+#endif
+	return 0;
+}
+
 static struct irq_chip sunxi_pinctrl_edge_irq_chip = {
 	.name		= "sunxi_pio_edge",
 	.irq_ack	= sunxi_pinctrl_irq_ack,
@@ -1066,7 +1282,8 @@ static struct irq_chip sunxi_pinctrl_edge_irq_chip = {
 	.irq_request_resources = sunxi_pinctrl_irq_request_resources,
 	.irq_release_resources = sunxi_pinctrl_irq_release_resources,
 	.irq_set_type	= sunxi_pinctrl_irq_set_type,
-	.flags		= IRQCHIP_SKIP_SET_WAKE,
+	.flags		= IRQCHIP_MASK_ON_SUSPEND,
+	.irq_set_wake   = sunxi_pinctrl_irq_set_wake,
 };
 
 static struct irq_chip sunxi_pinctrl_level_irq_chip = {
@@ -1081,8 +1298,9 @@ static struct irq_chip sunxi_pinctrl_level_irq_chip = {
 	.irq_request_resources = sunxi_pinctrl_irq_request_resources,
 	.irq_release_resources = sunxi_pinctrl_irq_release_resources,
 	.irq_set_type	= sunxi_pinctrl_irq_set_type,
-	.flags		= IRQCHIP_SKIP_SET_WAKE | IRQCHIP_EOI_THREADED |
+	.flags		= IRQCHIP_MASK_ON_SUSPEND | IRQCHIP_EOI_THREADED |
 			  IRQCHIP_EOI_IF_HANDLED,
+	.irq_set_wake   = sunxi_pinctrl_irq_set_wake,
 };
 
 static int sunxi_pinctrl_irq_of_xlate(struct irq_domain *d,
@@ -1127,8 +1345,9 @@ static void sunxi_pinctrl_irq_handler(struct irq_desc *desc)
 		if (irq == pctl->irq[bank])
 			break;
 
-	if (bank == pctl->desc->irq_banks)
-		return;
+	BUG_ON(bank == pctl->desc->irq_banks);
+
+	chained_irq_enter(chip, desc);
 
 	reg = sunxi_irq_status_reg_from_bank(pctl->desc, bank);
 	val = readl(pctl->membase + reg);
@@ -1136,14 +1355,14 @@ static void sunxi_pinctrl_irq_handler(struct irq_desc *desc)
 	if (val) {
 		int irqoffset;
 
-		chained_irq_enter(chip, desc);
 		for_each_set_bit(irqoffset, &val, IRQ_PER_BANK) {
 			int pin_irq = irq_find_mapping(pctl->domain,
 						       bank * IRQ_PER_BANK + irqoffset);
 			generic_handle_irq(pin_irq);
 		}
-		chained_irq_exit(chip, desc);
 	}
+
+	chained_irq_exit(chip, desc);
 }
 
 static int sunxi_pinctrl_add_function(struct sunxi_pinctrl *pctl,
@@ -1385,7 +1604,6 @@ int sunxi_pinctrl_init_with_variant(struct platform_device *pdev,
 	struct pinctrl_pin_desc *pins;
 	struct sunxi_pinctrl *pctl;
 	struct pinmux_ops *pmxops;
-	struct resource *res;
 	int i, ret, last_pin, pin_idx;
 	struct clk *clk;
 
@@ -1396,8 +1614,7 @@ int sunxi_pinctrl_init_with_variant(struct platform_device *pdev,
 
 	raw_spin_lock_init(&pctl->lock);
 
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	pctl->membase = devm_ioremap_resource(&pdev->dev, res);
+	pctl->membase = devm_platform_ioremap_resource(pdev, 0);
 	if (IS_ERR(pctl->membase))
 		return PTR_ERR(pctl->membase);
 
@@ -1570,3 +1787,5 @@ int sunxi_pinctrl_init_with_variant(struct platform_device *pdev,
 	gpiochip_remove(pctl->chip);
 	return ret;
 }
+EXPORT_SYMBOL_GPL(sunxi_pinctrl_init_with_variant);
+MODULE_LICENSE("GPL");
diff --git a/drivers/pinctrl/sunxi/pinctrl-sunxi.h b/drivers/pinctrl/sunxi/pinctrl-sunxi.h
index a32bb5bcb..92b6df9b9 100644
--- a/drivers/pinctrl/sunxi/pinctrl-sunxi.h
+++ b/drivers/pinctrl/sunxi/pinctrl-sunxi.h
@@ -15,30 +15,33 @@
 
 #include <linux/kernel.h>
 #include <linux/spinlock.h>
-
-#define PA_BASE	0
-#define PB_BASE	32
-#define PC_BASE	64
-#define PD_BASE	96
-#define PE_BASE	128
-#define PF_BASE	160
-#define PG_BASE	192
-#define PH_BASE	224
-#define PI_BASE	256
-#define PL_BASE	352
-#define PM_BASE	384
-#define PN_BASE	416
+#include <linux/pinctrl/pinconf-generic.h>
+
+#define SUNXI_BANK_OFFSET(bank, bankbase)	((bank) - (bankbase))
+#define SUNXI_PIN_BASE(bank)			(SUNXI_BANK_OFFSET(bank, 'A') * 32)
+
+#define PA_BASE			SUNXI_PIN_BASE('A')
+#define PB_BASE			SUNXI_PIN_BASE('B')
+#define PC_BASE			SUNXI_PIN_BASE('C')
+#define PD_BASE			SUNXI_PIN_BASE('D')
+#define PE_BASE			SUNXI_PIN_BASE('E')
+#define PF_BASE			SUNXI_PIN_BASE('F')
+#define PG_BASE			SUNXI_PIN_BASE('G')
+#define PH_BASE			SUNXI_PIN_BASE('H')
+#define PI_BASE			SUNXI_PIN_BASE('I')
+#define PJ_BASE			SUNXI_PIN_BASE('J')
+#define PL_BASE			SUNXI_PIN_BASE('L')
+#define PM_BASE			SUNXI_PIN_BASE('M')
+#define PN_BASE			SUNXI_PIN_BASE('N')
 
 #define SUNXI_PINCTRL_PIN(bank, pin)		\
 	PINCTRL_PIN(P ## bank ## _BASE + (pin), "P" #bank #pin)
 
 #define SUNXI_PIN_NAME_MAX_LEN	5
 
-#define BANK_MEM_SIZE		0x24
 #define MUX_REGS_OFFSET		0x0
 #define DATA_REGS_OFFSET	0x10
 #define DLEVEL_REGS_OFFSET	0x14
-#define PULL_REGS_OFFSET	0x1c
 
 #define PINS_PER_BANK		32
 #define MUX_PINS_PER_REG	8
@@ -47,9 +50,6 @@
 #define DATA_PINS_PER_REG	32
 #define DATA_PINS_BITS		1
 #define DATA_PINS_MASK		0x01
-#define DLEVEL_PINS_PER_REG	16
-#define DLEVEL_PINS_BITS	2
-#define DLEVEL_PINS_MASK	0x03
 #define PULL_PINS_PER_REG	16
 #define PULL_PINS_BITS		2
 #define PULL_PINS_MASK		0x03
@@ -84,7 +84,6 @@
 #define IO_BIAS_MASK		GENMASK(3, 0)
 
 #define SUN4I_FUNC_INPUT	0
-#define SUN4I_FUNC_IRQ		6
 
 #define PINCTRL_SUN5I_A10S	BIT(1)
 #define PINCTRL_SUN5I_A13	BIT(2)
@@ -98,7 +97,15 @@
 #define PINCTRL_SUN8I_V3S	BIT(10)
 
 #define PIO_POW_MOD_SEL_REG	0x340
+#define PIO_POW_MOD_CTL_REG	0x344
+#define PIO_POW_CTL_REG		0x350
+
+#define POWER_SOURCE_MASK	0x01
 
+#if IS_ENABLED(CONFIG_PINCTRL_SUNXI_DEBUGFS)
+#define SUNXI_PINCFG_TYPE_FUNC 	(PIN_CONFIG_END - 2)
+#define SUNXI_PINCFG_TYPE_DAT 	(PIN_CONFIG_END - 1)
+#endif
 enum sunxi_desc_bias_voltage {
 	BIAS_VOLTAGE_NONE,
 	/*
@@ -111,8 +118,34 @@ enum sunxi_desc_bias_voltage {
 	 * register, as seen on H6 SoC, for example.
 	 */
 	BIAS_VOLTAGE_PIO_POW_MODE_SEL,
+	/*
+	 * Bias voltage is set through PIO_POW_MOD_SEL_REG
+	 * and PIO_POW_MOD_CTL_REG register, as seen on
+	 * A100 SoC, for example.
+	 */
+	BIAS_VOLTAGE_PIO_POW_MODE_CTL,
 };
 
+enum sunxi_pinctrl_hw_type {
+	SUNXI_PCTL_HW_TYPE_0,  /* Older chips */
+	SUNXI_PCTL_HW_TYPE_1,  /* Newer chips: sun8iw20, sun20iw1, sun50iw12 */
+	/* Add new types here ... */
+	SUNXI_PCTL_HW_TYPE_CNT,
+};
+
+/* Reference <Port_Controller_Spec: Port Register List> for the information below: */
+struct sunxi_pinctrl_hw_info {
+	u8 bank_mem_size;  	/* Size of the basic registers (including CFG/DAT/DRV/PUL) of any bank  */
+	u8 pull_regs_offset;	/* Pull Register's offset */
+	u8 dlevel_pins_per_reg; /* How many pins does a 'Multi-Driving Register' contain? */
+	u8 dlevel_pins_bits;	/* How many bits does a 'Multi-Driving Register' use for a pin? */
+	u8 dlevel_pins_mask;	/* Bit mask for 'dlevel_pins_bits' */
+	u8 irq_mux_val;		/* Mux value for IRQ function */
+};
+
+/* Indexed by `enum sunxi_pinctrl_hw_type` */
+extern struct sunxi_pinctrl_hw_info sunxi_pinctrl_hw_info[SUNXI_PCTL_HW_TYPE_CNT];
+
 struct sunxi_desc_function {
 	unsigned long	variant;
 	const char	*name;
@@ -136,6 +169,8 @@ struct sunxi_pinctrl_desc {
 	bool				irq_read_needs_mux;
 	bool				disable_strict_mode;
 	enum sunxi_desc_bias_voltage	io_bias_cfg_variant;
+	bool				pf_power_source_switch;
+	enum sunxi_pinctrl_hw_type	hw_type;
 };
 
 struct sunxi_pinctrl_function {
@@ -151,6 +186,7 @@ struct sunxi_pinctrl_group {
 
 struct sunxi_pinctrl_regulator {
 	struct regulator	*regulator;
+	struct regulator	*regulator_optional;
 	refcount_t		refcount;
 };
 
@@ -232,10 +268,10 @@ struct sunxi_pinctrl {
  * The following functions calculate from the pin number the register
  * and the bit offset that we should access.
  */
-static inline u32 sunxi_mux_reg(u16 pin)
+static inline u32 sunxi_mux_reg(u16 pin, enum sunxi_pinctrl_hw_type hw_type)
 {
 	u8 bank = pin / PINS_PER_BANK;
-	u32 offset = bank * BANK_MEM_SIZE;
+	u32 offset = bank * sunxi_pinctrl_hw_info[hw_type].bank_mem_size;
 	offset += MUX_REGS_OFFSET;
 	offset += pin % PINS_PER_BANK / MUX_PINS_PER_REG * 0x04;
 	return round_down(offset, 4);
@@ -247,10 +283,10 @@ static inline u32 sunxi_mux_offset(u16 pin)
 	return pin_num * MUX_PINS_BITS;
 }
 
-static inline u32 sunxi_data_reg(u16 pin)
+static inline u32 sunxi_data_reg(u16 pin, enum sunxi_pinctrl_hw_type hw_type)
 {
 	u8 bank = pin / PINS_PER_BANK;
-	u32 offset = bank * BANK_MEM_SIZE;
+	u32 offset = bank * sunxi_pinctrl_hw_info[hw_type].bank_mem_size;
 	offset += DATA_REGS_OFFSET;
 	offset += pin % PINS_PER_BANK / DATA_PINS_PER_REG * 0x04;
 	return round_down(offset, 4);
@@ -262,26 +298,26 @@ static inline u32 sunxi_data_offset(u16 pin)
 	return pin_num * DATA_PINS_BITS;
 }
 
-static inline u32 sunxi_dlevel_reg(u16 pin)
+static inline u32 sunxi_dlevel_reg(u16 pin, enum sunxi_pinctrl_hw_type hw_type)
 {
 	u8 bank = pin / PINS_PER_BANK;
-	u32 offset = bank * BANK_MEM_SIZE;
+	u32 offset = bank * sunxi_pinctrl_hw_info[hw_type].bank_mem_size;
 	offset += DLEVEL_REGS_OFFSET;
-	offset += pin % PINS_PER_BANK / DLEVEL_PINS_PER_REG * 0x04;
+	offset += pin % PINS_PER_BANK / sunxi_pinctrl_hw_info[hw_type].dlevel_pins_per_reg * 0x04;
 	return round_down(offset, 4);
 }
 
-static inline u32 sunxi_dlevel_offset(u16 pin)
+static inline u32 sunxi_dlevel_offset(u16 pin, enum sunxi_pinctrl_hw_type hw_type)
 {
-	u32 pin_num = pin % DLEVEL_PINS_PER_REG;
-	return pin_num * DLEVEL_PINS_BITS;
+	u32 pin_num = pin % sunxi_pinctrl_hw_info[hw_type].dlevel_pins_per_reg;
+	return pin_num * sunxi_pinctrl_hw_info[hw_type].dlevel_pins_bits;
 }
 
-static inline u32 sunxi_pull_reg(u16 pin)
+static inline u32 sunxi_pull_reg(u16 pin, enum sunxi_pinctrl_hw_type hw_type)
 {
 	u8 bank = pin / PINS_PER_BANK;
-	u32 offset = bank * BANK_MEM_SIZE;
-	offset += PULL_REGS_OFFSET;
+	u32 offset = bank * sunxi_pinctrl_hw_info[hw_type].bank_mem_size;
+	offset += sunxi_pinctrl_hw_info[hw_type].pull_regs_offset;
 	offset += pin % PINS_PER_BANK / PULL_PINS_PER_REG * 0x04;
 	return round_down(offset, 4);
 }
@@ -294,6 +330,7 @@ static inline u32 sunxi_pull_offset(u16 pin)
 
 static inline u32 sunxi_irq_hw_bank_num(const struct sunxi_pinctrl_desc *desc, u8 bank)
 {
+	BUG_ON(bank >= desc->irq_banks);
 	if (!desc->irq_bank_map)
 		return bank;
 	else
-- 
2.17.1

